{"version":3,"sources":["../../src/index.ts","../../src/InlineCombinatorDnD.tsx","../../src/hooks/useInlineCombinatorDnD.ts","../../src/hooks/useReactDnD.ts","../../src/hooks/useRuleDnD.ts","../../src/hooks/useDragCommon.ts","../../src/hooks/useRuleGroupDnD.ts","../../src/QueryBuilderDndContext.ts","../../src/QueryBuilderDnD.tsx","../../src/RuleDnD.tsx","../../src/RuleGroupDnD.tsx"],"sourcesContent":["export * from './InlineCombinatorDnD';\nexport * from './QueryBuilderDnD';\nexport * from './RuleDnD';\nexport * from './RuleGroupDnD';\nexport * from './hooks';\nexport * from './types';\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { InlineCombinatorProps } from 'react-querybuilder';\nimport { standardClassnames, TestID } from 'react-querybuilder';\nimport { useInlineCombinatorDnD } from './hooks';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\n\n/**\n * The drag-and-drop-enabled inline combinator component.\n */\nexport const InlineCombinatorDnD = ({\n  component: CombinatorSelectorComponent,\n  ...props\n}: InlineCombinatorProps) => {\n  const { canDrop, useDrop } = useContext(QueryBuilderDndContext);\n\n  const { dropRef, dropMonitorId, isOver } = useInlineCombinatorDnD({\n    ...props,\n    component: CombinatorSelectorComponent,\n    useDrop: useDrop!,\n    canDrop,\n  });\n\n  const dndOver = isOver ? standardClassnames.dndOver : '';\n  const wrapperClassName = `${standardClassnames.betweenRules}${dndOver ? ` ${dndOver}` : ''}`;\n\n  return (\n    <div\n      key=\"dnd\"\n      ref={dropRef}\n      className={wrapperClassName}\n      data-dropmonitorid={dropMonitorId}\n      data-testid={TestID.inlineCombinator}>\n      <CombinatorSelectorComponent {...props} testID={TestID.combinators} />\n    </div>\n  );\n};\n","import type { Ref } from 'react';\nimport { useRef } from 'react';\nimport type {\n  DndDropTargetType,\n  DraggedItem,\n  DropCollection,\n  DropEffect,\n  DropResult,\n  InlineCombinatorProps,\n  RuleGroupTypeAny,\n  RuleType,\n} from 'react-querybuilder';\nimport { getParentPath, isAncestor, pathsAreEqual } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from '../types';\n\ntype UseInlineCombinatorDndParams = InlineCombinatorProps &\n  Pick<QueryBuilderDndContextProps, 'canDrop'> &\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  Pick<typeof import('react-dnd'), 'useDrop'>;\n\ninterface UseInlineCombinatorDnD {\n  isOver: boolean;\n  dropMonitorId: string | symbol | null;\n  dropRef: Ref<HTMLDivElement>;\n  dropEffect?: DropEffect;\n}\n\nexport const useInlineCombinatorDnD = ({\n  path,\n  canDrop,\n  schema,\n  useDrop,\n  rules,\n}: UseInlineCombinatorDndParams): UseInlineCombinatorDnD => {\n  const dropRef = useRef<HTMLDivElement>(null);\n\n  // The \"hovering\" item is the rule or group which precedes this inline combinator.\n  const hoveringItem = (rules ?? /* istanbul ignore next */ [])[path[path.length - 1] - 1] as\n    | RuleType\n    | RuleGroupTypeAny;\n\n  const [{ isOver, dropMonitorId }, drop] = useDrop!<DraggedItem, DropResult, DropCollection>(\n    () => ({\n      accept: ['rule', 'ruleGroup'] as DndDropTargetType[],\n      canDrop: dragging => {\n        const { path: itemPath } = dragging;\n        if (\n          dragging &&\n          typeof canDrop === 'function' &&\n          !canDrop({ dragging, hovering: { ...hoveringItem, path, qbId: schema.qbId } })\n        ) {\n          return false;\n        }\n        const parentHoverPath = getParentPath(path);\n        const parentItemPath = getParentPath(itemPath);\n        const hoverIndex = path[path.length - 1];\n        const itemIndex = itemPath[itemPath.length - 1];\n\n        // Disallow drop if...\n        // prettier-ignore\n        return !(\n          // 1) the item is an ancestor of the drop target,\n          isAncestor(itemPath, path) ||\n          // 2) the item is hovered over itself (which should never\n          // happen since combinators don't have drag handles),\n          pathsAreEqual(itemPath, path) ||\n          (pathsAreEqual(parentHoverPath, parentItemPath) && hoverIndex - 1 === itemIndex) ||\n          // 3) independentCombinators is true and the drop target is just above the hovering item\n          (schema.independentCombinators &&\n            pathsAreEqual(parentHoverPath, parentItemPath) &&\n            hoverIndex === itemIndex - 1)\n        );\n      },\n      collect: monitor => ({\n        isOver: monitor.canDrop() && monitor.isOver(),\n        dropMonitorId: monitor.getHandlerId() ?? '',\n        dropEffect: (monitor.getDropResult() ?? {}).dropEffect,\n      }),\n      drop: () => {\n        const { qbId, getQuery, dispatchQuery } = schema;\n        // `dropEffect` gets added automatically to the object returned from `drop`:\n        return { type: 'inlineCombinator', path, qbId, getQuery, dispatchQuery };\n      },\n    }),\n    [path, schema.independentCombinators]\n  );\n\n  drop(dropRef);\n\n  return { dropRef, dropMonitorId, isOver };\n};\n","import { useEffect, useState } from 'react';\nimport { messages } from 'react-querybuilder';\nimport type { UseReactDnD } from '../types';\n\nlet didWarnEnabledDndWithoutReactDnD = false;\n\nexport const useReactDnD = (dndParam?: UseReactDnD) => {\n  const [dnd, setDnd] = useState<UseReactDnD | null>(dndParam ?? null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const getDnD = async () => {\n      const [reactDnD, reactDnDHTML5Be] = await Promise.all([\n        import('react-dnd').catch(() => null),\n        import('react-dnd-html5-backend').catch(() => null),\n      ]);\n\n      // istanbul ignore else\n      if (!didCancel) {\n        if (reactDnD && reactDnDHTML5Be) {\n          setDnd(() => ({ ...reactDnD, ...reactDnDHTML5Be }));\n        } else {\n          // istanbul ignore else\n          if (process.env.NODE_ENV !== 'production' && !didWarnEnabledDndWithoutReactDnD) {\n            console.error(messages.errorEnabledDndWithoutReactDnD);\n            didWarnEnabledDndWithoutReactDnD = true;\n          }\n        }\n      }\n    };\n\n    if (!dnd) {\n      getDnD();\n    }\n\n    return () => {\n      didCancel = true;\n    };\n  }, [dnd]);\n\n  return dnd;\n};\n","import { useRef } from 'react';\nimport type {\n  DndDropTargetType,\n  DraggedItem,\n  DropCollection,\n  DropResult,\n  RuleProps,\n  UseRuleDnD,\n} from 'react-querybuilder';\nimport { getParentPath, isAncestor, pathsAreEqual } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from '../types';\nimport { useDragCommon } from './useDragCommon';\n\ntype UseRuleDndParams = RuleProps &\n  Pick<QueryBuilderDndContextProps, 'canDrop'> &\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  Pick<typeof import('react-dnd'), 'useDrag' | 'useDrop'>;\n\nconst accept: [DndDropTargetType, DndDropTargetType] = ['rule', 'ruleGroup'];\n\nexport const useRuleDnD = (params: UseRuleDndParams): UseRuleDnD => {\n  const { path, rule, disabled, schema, actions, useDrag, useDrop, canDrop } = params;\n\n  const dndRef = useRef<HTMLDivElement>(null);\n  const dragRef = useRef<HTMLSpanElement>(null);\n\n  const [{ isDragging, dragMonitorId }, drag, preview] = useDragCommon({\n    type: 'rule',\n    path,\n    disabled,\n    independentCombinators: schema.independentCombinators,\n    moveRule: actions.moveRule,\n    schema,\n    actions,\n    useDrag,\n  });\n\n  const [{ isOver, dropMonitorId, dropEffect }, drop] = useDrop!<\n    DraggedItem,\n    DropResult,\n    DropCollection\n  >(\n    () => ({\n      accept,\n      canDrop: dragging => {\n        if (\n          dragging &&\n          typeof canDrop === 'function' &&\n          !canDrop({ dragging, hovering: { ...rule, path, qbId: schema.qbId } })\n        ) {\n          return false;\n        }\n\n        if (schema.qbId !== dragging.qbId) return true;\n\n        const parentHoverPath = getParentPath(path);\n        const parentItemPath = getParentPath(dragging.path);\n        const hoverIndex = path[path.length - 1];\n        const itemIndex = dragging.path[dragging.path.length - 1];\n\n        // Disallow drop if...\n        // prettier-ignore\n        return !(\n          // 1) item is ancestor of drop target,\n          isAncestor(dragging.path, path) ||\n          // 2) item is hovered over itself or the previous item\n          (pathsAreEqual(parentHoverPath, parentItemPath) &&\n            (hoverIndex === itemIndex ||\n              hoverIndex === itemIndex - 1 ||\n              (schema.independentCombinators && hoverIndex === itemIndex - 2)))\n        );\n      },\n      collect: monitor => ({\n        isOver: monitor.canDrop() && monitor.isOver(),\n        dropMonitorId: monitor.getHandlerId() ?? '',\n        dropEffect: (monitor.getDropResult() ?? {}).dropEffect,\n      }),\n      drop: () => {\n        const { qbId, getQuery, dispatchQuery } = schema;\n        // `dropEffect` gets added automatically to the object returned from `drop`:\n        return { type: 'rule', path, qbId, getQuery, dispatchQuery };\n      },\n    }),\n    [disabled, schema.independentCombinators, actions.moveRule, path]\n  );\n\n  drag(dragRef);\n  preview(drop(dndRef));\n\n  return { isDragging, dragMonitorId, isOver, dropMonitorId, dndRef, dragRef, dropEffect };\n};\n","import type {\n  DndDropTargetType,\n  DragCollection,\n  DraggedItem,\n  DropResult,\n  Path,\n  QueryActions,\n  Schema,\n} from 'react-querybuilder';\nimport { findPath, getParentPath, insert } from 'react-querybuilder';\n\ntype UseDragCommonProps = {\n  path: Path;\n  type: DndDropTargetType;\n  disabled?: boolean;\n  independentCombinators?: boolean;\n  moveRule: QueryActions['moveRule'];\n  actions: QueryActions;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  schema: Schema<any, any>;\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  useDrag: (typeof import('react-dnd'))['useDrag'];\n};\n\nexport const useDragCommon = ({\n  type,\n  path,\n  disabled,\n  // Unused for now\n  // independentCombinators,\n  actions,\n  schema,\n  useDrag,\n}: UseDragCommonProps) =>\n  useDrag!<DraggedItem, DropResult, DragCollection>(\n    () => ({\n      type,\n      item: () => ({ ...findPath(path, schema.getQuery()!)!, path, qbId: schema.qbId }),\n      canDrag: !disabled,\n      collect: monitor => ({\n        isDragging: !disabled && monitor.isDragging(),\n        dragMonitorId: monitor.getHandlerId() ?? '',\n      }),\n      end: (item, monitor) => {\n        const dropResult = monitor.getDropResult();\n\n        if (!dropResult) return;\n\n        const parentHoverPath = getParentPath(dropResult.path);\n        const hoverIndex = dropResult.path[dropResult.path.length - 1];\n        const destinationPath =\n          dropResult.type === 'ruleGroup'\n            ? [...dropResult.path, 0]\n            : dropResult.type === 'inlineCombinator'\n              ? [...parentHoverPath, hoverIndex]\n              : [...parentHoverPath, hoverIndex + 1];\n\n        if (schema.qbId !== dropResult.qbId) {\n          const otherBuilderQuery = dropResult.getQuery();\n          // istanbul ignore else\n          if (otherBuilderQuery) {\n            dropResult.dispatchQuery(insert(otherBuilderQuery, item, destinationPath));\n            // istanbul ignore else\n            if (dropResult.dropEffect !== 'copy') {\n              actions.onRuleRemove(item.path);\n            }\n          }\n        } else {\n          actions.moveRule(item.path, destinationPath, dropResult.dropEffect === 'copy');\n        }\n      },\n    }),\n    [disabled, path]\n  );\n","import { useRef } from 'react';\nimport type {\n  DndDropTargetType,\n  DraggedItem,\n  DropCollection,\n  DropResult,\n  RuleGroupProps,\n  UseRuleGroupDnD,\n} from 'react-querybuilder';\nimport { getParentPath, isAncestor, pathsAreEqual } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from '../types';\nimport { useDragCommon } from './useDragCommon';\n\ntype UseRuleGroupDndParams = RuleGroupProps &\n  Pick<QueryBuilderDndContextProps, 'canDrop'> &\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  Pick<typeof import('react-dnd'), 'useDrag' | 'useDrop'>;\n\nconst accept: [DndDropTargetType, DndDropTargetType] = ['rule', 'ruleGroup'];\n\nexport const useRuleGroupDnD = (params: UseRuleGroupDndParams): UseRuleGroupDnD => {\n  const { disabled, path, ruleGroup, schema, actions, useDrag, useDrop, canDrop } = params;\n\n  const previewRef = useRef<HTMLDivElement>(null);\n  const dragRef = useRef<HTMLSpanElement>(null);\n  const dropRef = useRef<HTMLDivElement>(null);\n\n  const [{ isDragging, dragMonitorId }, drag, preview] = useDragCommon({\n    type: 'ruleGroup',\n    path,\n    disabled,\n    independentCombinators: schema.independentCombinators,\n    moveRule: actions.moveRule,\n    schema,\n    actions,\n    useDrag,\n  });\n\n  const [{ isOver, dropMonitorId, dropEffect }, drop] = useDrop!<\n    DraggedItem,\n    DropResult,\n    DropCollection\n  >(\n    () => ({\n      accept,\n      canDrop: dragging => {\n        if (\n          disabled ||\n          (dragging &&\n            typeof canDrop === 'function' &&\n            !canDrop({ dragging, hovering: { ...ruleGroup, path, qbId: schema.qbId } }))\n        ) {\n          return false;\n        }\n\n        if (schema.qbId !== dragging.qbId) return true;\n\n        const parentItemPath = getParentPath(dragging.path);\n        const itemIndex = dragging.path[dragging.path.length - 1];\n        // Disallow drop if...\n        // prettier-ignore\n        return !(\n          // 1) item is ancestor of drop target,\n          isAncestor(dragging.path, path) ||\n          // 2) item is first child and is dropped on its own group header,\n          (pathsAreEqual(path, parentItemPath) && itemIndex === 0) ||\n          // 3) the group is dropped on itself\n          pathsAreEqual(path, dragging.path)\n        );\n      },\n      collect: monitor => ({\n        isOver: monitor.canDrop() && monitor.isOver(),\n        dropMonitorId: monitor.getHandlerId() ?? '',\n        dropEffect: (monitor.getDropResult() ?? {}).dropEffect,\n      }),\n      drop: (_item, monitor) => {\n        const { qbId, getQuery, dispatchQuery } = schema;\n\n        // `dropEffect` gets added automatically to the object returned from `drop`:\n        return (\n          monitor.getDropResult() ?? { type: 'ruleGroup', path, qbId, getQuery, dispatchQuery }\n        );\n      },\n    }),\n    [disabled, actions.moveRule, path]\n  );\n\n  if (path.length > 0) {\n    drag(dragRef);\n    preview(previewRef);\n  }\n  drop(dropRef);\n\n  return {\n    isDragging,\n    dragMonitorId,\n    isOver,\n    dropMonitorId,\n    previewRef,\n    dragRef,\n    dropRef,\n    dropEffect,\n  };\n};\n","import { createContext } from 'react';\nimport { defaultControlElements } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from './types';\n\nconst { rule, ruleGroup, combinatorSelector } = defaultControlElements;\n\nexport const QueryBuilderDndContext = createContext<QueryBuilderDndContextProps>({\n  baseControls: { rule, ruleGroup, combinatorSelector },\n});\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { FullField, QueryBuilderContextProps } from 'react-querybuilder';\nimport {\n  QueryBuilderContext,\n  useMergedContext,\n  usePreferAnyProp,\n  usePreferProp,\n} from 'react-querybuilder';\nimport { InlineCombinatorDnD } from './InlineCombinatorDnD';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\nimport { RuleDnD } from './RuleDnD';\nimport { RuleGroupDnD } from './RuleGroupDnD';\nimport { useReactDnD } from './hooks';\nimport type { QueryBuilderDndProps } from './types';\n\n/**\n * Context provider to enable drag-and-drop. If the application already implements\n * `react-dnd`, use {@link QueryBuilderDndWithoutProvider} instead.\n */\nexport const QueryBuilderDnD = (props: QueryBuilderDndProps) => {\n  const {\n    controlClassnames,\n    controlElements,\n    debugMode,\n    enableDragAndDrop: enableDragAndDropProp,\n    enableMountQueryChange,\n    translations,\n    canDrop,\n  } = props;\n\n  const rqbContext = useMergedContext({\n    controlClassnames,\n    controlElements,\n    debugMode,\n    enableDragAndDrop: enableDragAndDropProp ?? true,\n    enableMountQueryChange,\n    translations: translations ?? {},\n  });\n  const { enableDragAndDrop } = rqbContext;\n\n  const dnd = useReactDnD(props.dnd);\n  const key = enableDragAndDrop && dnd ? 'dnd' : 'no-dnd';\n\n  if (!enableDragAndDrop || !dnd) {\n    return (\n      <QueryBuilderContext.Provider\n        key={key}\n        value={{ ...rqbContext, enableDragAndDrop: false, debugMode }}>\n        {props.children}\n      </QueryBuilderContext.Provider>\n    );\n  }\n\n  const { DndProvider, HTML5Backend } = dnd;\n\n  return (\n    <DndProvider key={key} backend={HTML5Backend} debugMode={debugMode}>\n      <QueryBuilderContext.Provider\n        key={key}\n        value={{ ...rqbContext, enableDragAndDrop, debugMode }}>\n        <QueryBuilderDndWithoutProvider dnd={dnd} canDrop={canDrop}>\n          {props.children}\n        </QueryBuilderDndWithoutProvider>\n      </QueryBuilderContext.Provider>\n    </DndProvider>\n  );\n};\n\n/**\n * Context provider to enable drag-and-drop. Only use this provider if the application\n * already implements `react-dnd`, otherwise use {@link QueryBuilderDnD}.\n */\nexport const QueryBuilderDndWithoutProvider = (props: QueryBuilderDndProps) => {\n  const rqbContext = useContext(QueryBuilderContext);\n  const rqbDndContext = useContext(QueryBuilderDndContext);\n  const dnd = useReactDnD(props.dnd);\n  const debugMode = usePreferProp(false, props.debugMode, rqbContext.debugMode);\n  const canDrop = usePreferAnyProp(undefined, props.canDrop, rqbDndContext.canDrop);\n  const enableDragAndDrop = usePreferProp(\n    true,\n    props.enableDragAndDrop,\n    rqbContext.enableDragAndDrop\n  );\n  const key = enableDragAndDrop && dnd ? 'dnd' : 'no-dnd';\n\n  if (!enableDragAndDrop || !dnd) {\n    return (\n      <QueryBuilderContext.Provider\n        key={key}\n        value={{ ...rqbContext, enableDragAndDrop: false, debugMode }}>\n        {props.children}\n      </QueryBuilderContext.Provider>\n    );\n  }\n\n  const { DndContext, useDrag, useDrop } = dnd;\n\n  const baseControls = {\n    rule:\n      props.controlElements?.rule ??\n      rqbContext.controlElements?.rule ??\n      rqbDndContext.baseControls.rule,\n    ruleGroup:\n      props.controlElements?.ruleGroup ??\n      rqbContext.controlElements?.ruleGroup ??\n      rqbDndContext.baseControls.ruleGroup,\n    combinatorSelector:\n      props.controlElements?.combinatorSelector ??\n      rqbContext.controlElements?.combinatorSelector ??\n      rqbDndContext.baseControls.combinatorSelector,\n  };\n\n  const newContext: QueryBuilderContextProps<FullField, string> = {\n    ...rqbContext,\n    controlElements: {\n      ...rqbContext.controlElements,\n      ruleGroup: RuleGroupDnD,\n      rule: RuleDnD,\n      inlineCombinator: InlineCombinatorDnD,\n    },\n  };\n\n  return (\n    <DndContext.Consumer key={key}>\n      {() => (\n        <QueryBuilderContext.Provider key={key} value={newContext}>\n          <QueryBuilderDndContext.Provider value={{ useDrag, useDrop, baseControls, canDrop }}>\n            {props.children}\n          </QueryBuilderDndContext.Provider>\n        </QueryBuilderContext.Provider>\n      )}\n    </DndContext.Consumer>\n  );\n};\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { RuleProps } from 'react-querybuilder';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\nimport { useRuleDnD } from './hooks';\n\n/**\n * Rule component for drag-and-drop. Renders the provided rule component\n * ({@link Rule} by default), but forwards the drag-and-drop context.\n */\nexport const RuleDnD = (props: RuleProps) => {\n  const rqbDndContext = useContext(QueryBuilderDndContext);\n\n  const { canDrop, useDrag, useDrop } = rqbDndContext;\n\n  const disabled = !!props.parentDisabled || !!props.disabled;\n\n  const dndRefs = useRuleDnD({\n    ...props,\n    disabled,\n    useDrag: useDrag!,\n    useDrop: useDrop!,\n    canDrop,\n  });\n\n  const { rule: BaseRuleComponent } = rqbDndContext.baseControls;\n\n  return (\n    <QueryBuilderDndContext.Provider value={rqbDndContext}>\n      <BaseRuleComponent {...props} {...dndRefs} />\n    </QueryBuilderDndContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { RuleGroupProps } from 'react-querybuilder';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\nimport { useRuleGroupDnD } from './hooks';\n\n/**\n * Rule group component for drag-and-drop. Renders the provided rule group component\n * ({@link RuleGroup} by default), but forwards the drag-and-drop context so that child\n * rules and groups will render within the appropriate drag-and-drop wrappers.\n */\nexport const RuleGroupDnD = (props: RuleGroupProps) => {\n  const rqbDndContext = useContext(QueryBuilderDndContext);\n\n  const { canDrop, useDrag, useDrop } = rqbDndContext;\n\n  const disabled = !!props.parentDisabled || !!props.disabled;\n\n  const dndRefs = useRuleGroupDnD({\n    ...props,\n    disabled,\n    useDrag: useDrag!,\n    useDrop: useDrop!,\n    canDrop,\n  });\n\n  const { ruleGroup: BaseRuleGroupComponent } = rqbDndContext.baseControls;\n\n  return <BaseRuleGroupComponent {...props} {...dndRefs} />;\n};\n"],"mappings":"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","names":["import_react","import_react_querybuilder","import_react","import_react_querybuilder","import_react","import_react_querybuilder","import_react_querybuilder","rule","import_react","import_react_querybuilder","accept","ruleGroup","import_react","import_react_querybuilder","React","import_react","import_react_querybuilder","React","import_react","React","import_react"]}