{"version":3,"sources":["../../src/index.ts","../../src/InlineCombinatorDnD.tsx","../../src/hooks/useInlineCombinatorDnD.ts","../../src/hooks/useReactDnD.ts","../../src/hooks/useRuleDnD.ts","../../src/hooks/useDragCommon.ts","../../src/hooks/useRuleGroupDnD.ts","../../src/QueryBuilderDndContext.ts","../../src/QueryBuilderDnD.tsx","../../src/RuleDnD.tsx","../../src/RuleGroupDnD.tsx"],"sourcesContent":["export * from './InlineCombinatorDnD';\nexport * from './QueryBuilderDnD';\nexport * from './RuleDnD';\nexport * from './RuleGroupDnD';\nexport * from './hooks';\nexport * from './types';\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { InlineCombinatorProps } from 'react-querybuilder';\nimport { standardClassnames, TestID } from 'react-querybuilder';\nimport { useInlineCombinatorDnD } from './hooks';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\n\n/**\n * The drag-and-drop-enabled inline combinator component.\n */\nexport const InlineCombinatorDnD = ({\n  component: CombinatorSelectorComponent,\n  ...props\n}: InlineCombinatorProps) => {\n  const { canDrop, useDrop } = useContext(QueryBuilderDndContext);\n\n  const { dropRef, dropMonitorId, isOver } = useInlineCombinatorDnD({\n    ...props,\n    component: CombinatorSelectorComponent,\n    useDrop: useDrop!,\n    canDrop,\n  });\n\n  const dndOver = isOver ? standardClassnames.dndOver : '';\n  const wrapperClassName = `${standardClassnames.betweenRules}${dndOver ? ` ${dndOver}` : ''}`;\n\n  return (\n    <div\n      key=\"dnd\"\n      ref={dropRef}\n      className={wrapperClassName}\n      data-dropmonitorid={dropMonitorId}\n      data-testid={TestID.inlineCombinator}>\n      <CombinatorSelectorComponent {...props} testID={TestID.combinators} />\n    </div>\n  );\n};\n","import type { Ref } from 'react';\nimport { useRef } from 'react';\nimport type {\n  DndDropTargetType,\n  DraggedItem,\n  DropCollection,\n  DropEffect,\n  DropResult,\n  InlineCombinatorProps,\n  RuleGroupTypeAny,\n  RuleType,\n} from 'react-querybuilder';\nimport { getParentPath, isAncestor, pathsAreEqual } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from '../types';\n\ntype UseInlineCombinatorDndParams = InlineCombinatorProps &\n  Pick<QueryBuilderDndContextProps, 'canDrop'> &\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  Pick<typeof import('react-dnd'), 'useDrop'>;\n\ninterface UseInlineCombinatorDnD {\n  isOver: boolean;\n  dropMonitorId: string | symbol | null;\n  dropRef: Ref<HTMLDivElement>;\n  dropEffect?: DropEffect;\n}\n\nexport const useInlineCombinatorDnD = ({\n  path,\n  canDrop,\n  schema,\n  useDrop,\n  rules,\n}: UseInlineCombinatorDndParams): UseInlineCombinatorDnD => {\n  const dropRef = useRef<HTMLDivElement>(null);\n\n  // The \"hovering\" item is the rule or group which precedes this inline combinator.\n  const hoveringItem = (rules ?? /* istanbul ignore next */ [])[path[path.length - 1] - 1] as\n    | RuleType\n    | RuleGroupTypeAny;\n\n  const [{ isOver, dropMonitorId }, drop] = useDrop!<DraggedItem, DropResult, DropCollection>(\n    () => ({\n      accept: ['rule', 'ruleGroup'] as DndDropTargetType[],\n      canDrop: dragging => {\n        const { path: itemPath } = dragging;\n        if (\n          dragging &&\n          typeof canDrop === 'function' &&\n          !canDrop({ dragging, hovering: { ...hoveringItem, path, qbId: schema.qbId } })\n        ) {\n          return false;\n        }\n        const parentHoverPath = getParentPath(path);\n        const parentItemPath = getParentPath(itemPath);\n        const hoverIndex = path[path.length - 1];\n        const itemIndex = itemPath[itemPath.length - 1];\n\n        // Disallow drop if...\n        // prettier-ignore\n        return !(\n          // 1) the item is an ancestor of the drop target,\n          isAncestor(itemPath, path) ||\n          // 2) the item is hovered over itself (which should never\n          // happen since combinators don't have drag handles),\n          pathsAreEqual(itemPath, path) ||\n          (pathsAreEqual(parentHoverPath, parentItemPath) && hoverIndex - 1 === itemIndex) ||\n          // 3) independentCombinators is true and the drop target is just above the hovering item\n          (schema.independentCombinators &&\n            pathsAreEqual(parentHoverPath, parentItemPath) &&\n            hoverIndex === itemIndex - 1)\n        );\n      },\n      collect: monitor => ({\n        isOver: monitor.canDrop() && monitor.isOver(),\n        dropMonitorId: monitor.getHandlerId() ?? '',\n        dropEffect: (monitor.getDropResult() ?? {}).dropEffect,\n      }),\n      drop: () => {\n        const { qbId, getQuery, dispatchQuery } = schema;\n        // `dropEffect` gets added automatically to the object returned from `drop`:\n        return { type: 'inlineCombinator', path, qbId, getQuery, dispatchQuery };\n      },\n    }),\n    [path, schema.independentCombinators]\n  );\n\n  drop(dropRef);\n\n  return { dropRef, dropMonitorId, isOver };\n};\n","import { useEffect, useState } from 'react';\nimport { messages } from 'react-querybuilder';\nimport type { UseReactDnD } from '../types';\n\nlet didWarnEnabledDndWithoutReactDnD = false;\n\nexport const useReactDnD = (dndParam?: UseReactDnD) => {\n  const [dnd, setDnd] = useState<UseReactDnD | null>(dndParam ?? null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const getDnD = async () => {\n      const [reactDnD, reactDnDHTML5Be] = await Promise.all([\n        import('react-dnd').catch(() => null),\n        import('react-dnd-html5-backend').catch(() => null),\n      ]);\n\n      // istanbul ignore else\n      if (!didCancel) {\n        if (reactDnD && reactDnDHTML5Be) {\n          setDnd(() => ({ ...reactDnD, ...reactDnDHTML5Be }));\n        } else {\n          // istanbul ignore else\n          if (process.env.NODE_ENV !== 'production' && !didWarnEnabledDndWithoutReactDnD) {\n            console.error(messages.errorEnabledDndWithoutReactDnD);\n            didWarnEnabledDndWithoutReactDnD = true;\n          }\n        }\n      }\n    };\n\n    if (!dnd) {\n      getDnD();\n    }\n\n    return () => {\n      didCancel = true;\n    };\n  }, [dnd]);\n\n  return dnd;\n};\n","import { useRef } from 'react';\nimport type {\n  DndDropTargetType,\n  DraggedItem,\n  DropCollection,\n  DropResult,\n  RuleProps,\n  UseRuleDnD,\n} from 'react-querybuilder';\nimport { getParentPath, isAncestor, pathsAreEqual } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from '../types';\nimport { useDragCommon } from './useDragCommon';\n\ntype UseRuleDndParams = RuleProps &\n  Pick<QueryBuilderDndContextProps, 'canDrop'> &\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  Pick<typeof import('react-dnd'), 'useDrag' | 'useDrop'>;\n\nconst accept: [DndDropTargetType, DndDropTargetType] = ['rule', 'ruleGroup'];\n\nexport const useRuleDnD = (params: UseRuleDndParams): UseRuleDnD => {\n  const { path, rule, disabled, schema, actions, useDrag, useDrop, canDrop } = params;\n\n  const dndRef = useRef<HTMLDivElement>(null);\n  const dragRef = useRef<HTMLSpanElement>(null);\n\n  const [{ isDragging, dragMonitorId }, drag, preview] = useDragCommon({\n    type: 'rule',\n    path,\n    disabled,\n    independentCombinators: schema.independentCombinators,\n    moveRule: actions.moveRule,\n    schema,\n    actions,\n    useDrag,\n  });\n\n  const [{ isOver, dropMonitorId, dropEffect }, drop] = useDrop!<\n    DraggedItem,\n    DropResult,\n    DropCollection\n  >(\n    () => ({\n      accept,\n      canDrop: dragging => {\n        if (\n          dragging &&\n          typeof canDrop === 'function' &&\n          !canDrop({ dragging, hovering: { ...rule, path, qbId: schema.qbId } })\n        ) {\n          return false;\n        }\n\n        if (schema.qbId !== dragging.qbId) return true;\n\n        const parentHoverPath = getParentPath(path);\n        const parentItemPath = getParentPath(dragging.path);\n        const hoverIndex = path[path.length - 1];\n        const itemIndex = dragging.path[dragging.path.length - 1];\n\n        // Disallow drop if...\n        // prettier-ignore\n        return !(\n          // 1) item is ancestor of drop target,\n          isAncestor(dragging.path, path) ||\n          // 2) item is hovered over itself or the previous item\n          (pathsAreEqual(parentHoverPath, parentItemPath) &&\n            (hoverIndex === itemIndex ||\n              hoverIndex === itemIndex - 1 ||\n              (schema.independentCombinators && hoverIndex === itemIndex - 2)))\n        );\n      },\n      collect: monitor => ({\n        isOver: monitor.canDrop() && monitor.isOver(),\n        dropMonitorId: monitor.getHandlerId() ?? '',\n        dropEffect: (monitor.getDropResult() ?? {}).dropEffect,\n      }),\n      drop: () => {\n        const { qbId, getQuery, dispatchQuery } = schema;\n        // `dropEffect` gets added automatically to the object returned from `drop`:\n        return { type: 'rule', path, qbId, getQuery, dispatchQuery };\n      },\n    }),\n    [disabled, schema.independentCombinators, actions.moveRule, path]\n  );\n\n  drag(dragRef);\n  preview(drop(dndRef));\n\n  return { isDragging, dragMonitorId, isOver, dropMonitorId, dndRef, dragRef, dropEffect };\n};\n","import type {\n  DndDropTargetType,\n  DragCollection,\n  DraggedItem,\n  DropResult,\n  Path,\n  QueryActions,\n  Schema,\n} from 'react-querybuilder';\nimport { findPath, getParentPath, insert } from 'react-querybuilder';\n\ntype UseDragCommonProps = {\n  path: Path;\n  type: DndDropTargetType;\n  disabled?: boolean;\n  independentCombinators?: boolean;\n  moveRule: QueryActions['moveRule'];\n  actions: QueryActions;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  schema: Schema<any, any>;\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  useDrag: (typeof import('react-dnd'))['useDrag'];\n};\n\nexport const useDragCommon = ({\n  type,\n  path,\n  disabled,\n  // Unused for now\n  // independentCombinators,\n  actions,\n  schema,\n  useDrag,\n}: UseDragCommonProps) =>\n  useDrag!<DraggedItem, DropResult, DragCollection>(\n    () => ({\n      type,\n      item: () => ({ ...findPath(path, schema.getQuery()!)!, path, qbId: schema.qbId }),\n      canDrag: !disabled,\n      collect: monitor => ({\n        isDragging: !disabled && monitor.isDragging(),\n        dragMonitorId: monitor.getHandlerId() ?? '',\n      }),\n      end: (item, monitor) => {\n        const dropResult = monitor.getDropResult();\n\n        if (!dropResult) return;\n\n        const parentHoverPath = getParentPath(dropResult.path);\n        const hoverIndex = dropResult.path[dropResult.path.length - 1];\n        const destinationPath =\n          dropResult.type === 'ruleGroup'\n            ? [...dropResult.path, 0]\n            : dropResult.type === 'inlineCombinator'\n              ? [...parentHoverPath, hoverIndex]\n              : [...parentHoverPath, hoverIndex + 1];\n\n        if (schema.qbId !== dropResult.qbId) {\n          const otherBuilderQuery = dropResult.getQuery();\n          // istanbul ignore else\n          if (otherBuilderQuery) {\n            dropResult.dispatchQuery(insert(otherBuilderQuery, item, destinationPath));\n            // istanbul ignore else\n            if (dropResult.dropEffect !== 'copy') {\n              actions.onRuleRemove(item.path);\n            }\n          }\n        } else {\n          actions.moveRule(item.path, destinationPath, dropResult.dropEffect === 'copy');\n        }\n      },\n    }),\n    [disabled, path]\n  );\n","import { useRef } from 'react';\nimport type {\n  DndDropTargetType,\n  DraggedItem,\n  DropCollection,\n  DropResult,\n  RuleGroupProps,\n  UseRuleGroupDnD,\n} from 'react-querybuilder';\nimport { getParentPath, isAncestor, pathsAreEqual } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from '../types';\nimport { useDragCommon } from './useDragCommon';\n\ntype UseRuleGroupDndParams = RuleGroupProps &\n  Pick<QueryBuilderDndContextProps, 'canDrop'> &\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  Pick<typeof import('react-dnd'), 'useDrag' | 'useDrop'>;\n\nconst accept: [DndDropTargetType, DndDropTargetType] = ['rule', 'ruleGroup'];\n\nexport const useRuleGroupDnD = (params: UseRuleGroupDndParams): UseRuleGroupDnD => {\n  const { disabled, path, ruleGroup, schema, actions, useDrag, useDrop, canDrop } = params;\n\n  const previewRef = useRef<HTMLDivElement>(null);\n  const dragRef = useRef<HTMLSpanElement>(null);\n  const dropRef = useRef<HTMLDivElement>(null);\n\n  const [{ isDragging, dragMonitorId }, drag, preview] = useDragCommon({\n    type: 'ruleGroup',\n    path,\n    disabled,\n    independentCombinators: schema.independentCombinators,\n    moveRule: actions.moveRule,\n    schema,\n    actions,\n    useDrag,\n  });\n\n  const [{ isOver, dropMonitorId, dropEffect }, drop] = useDrop!<\n    DraggedItem,\n    DropResult,\n    DropCollection\n  >(\n    () => ({\n      accept,\n      canDrop: dragging => {\n        if (\n          disabled ||\n          (dragging &&\n            typeof canDrop === 'function' &&\n            !canDrop({ dragging, hovering: { ...ruleGroup, path, qbId: schema.qbId } }))\n        ) {\n          return false;\n        }\n\n        if (schema.qbId !== dragging.qbId) return true;\n\n        const parentItemPath = getParentPath(dragging.path);\n        const itemIndex = dragging.path[dragging.path.length - 1];\n        // Disallow drop if...\n        // prettier-ignore\n        return !(\n          // 1) item is ancestor of drop target,\n          isAncestor(dragging.path, path) ||\n          // 2) item is first child and is dropped on its own group header,\n          (pathsAreEqual(path, parentItemPath) && itemIndex === 0) ||\n          // 3) the group is dropped on itself\n          pathsAreEqual(path, dragging.path)\n        );\n      },\n      collect: monitor => ({\n        isOver: monitor.canDrop() && monitor.isOver(),\n        dropMonitorId: monitor.getHandlerId() ?? '',\n        dropEffect: (monitor.getDropResult() ?? {}).dropEffect,\n      }),\n      drop: (_item, monitor) => {\n        const { qbId, getQuery, dispatchQuery } = schema;\n\n        // `dropEffect` gets added automatically to the object returned from `drop`:\n        return (\n          monitor.getDropResult() ?? { type: 'ruleGroup', path, qbId, getQuery, dispatchQuery }\n        );\n      },\n    }),\n    [disabled, actions.moveRule, path]\n  );\n\n  if (path.length > 0) {\n    drag(dragRef);\n    preview(previewRef);\n  }\n  drop(dropRef);\n\n  return {\n    isDragging,\n    dragMonitorId,\n    isOver,\n    dropMonitorId,\n    previewRef,\n    dragRef,\n    dropRef,\n    dropEffect,\n  };\n};\n","import { createContext } from 'react';\nimport { defaultControlElements } from 'react-querybuilder';\nimport type { QueryBuilderDndContextProps } from './types';\n\nconst { rule, ruleGroup, combinatorSelector } = defaultControlElements;\n\nexport const QueryBuilderDndContext = createContext<QueryBuilderDndContextProps>({\n  baseControls: { rule, ruleGroup, combinatorSelector },\n});\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { FullField, QueryBuilderContextProps } from 'react-querybuilder';\nimport {\n  QueryBuilderContext,\n  useMergedContext,\n  usePreferAnyProp,\n  usePreferProp,\n} from 'react-querybuilder';\nimport { InlineCombinatorDnD } from './InlineCombinatorDnD';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\nimport { RuleDnD } from './RuleDnD';\nimport { RuleGroupDnD } from './RuleGroupDnD';\nimport { useReactDnD } from './hooks';\nimport type { QueryBuilderDndProps } from './types';\n\n/**\n * Context provider to enable drag-and-drop. If the application already implements\n * `react-dnd`, use {@link QueryBuilderDndWithoutProvider} instead.\n */\nexport const QueryBuilderDnD = (props: QueryBuilderDndProps) => {\n  const {\n    controlClassnames,\n    controlElements,\n    debugMode,\n    enableDragAndDrop: enableDragAndDropProp,\n    enableMountQueryChange,\n    translations,\n    canDrop,\n  } = props;\n\n  const rqbContext = useMergedContext({\n    controlClassnames,\n    controlElements,\n    debugMode,\n    enableDragAndDrop: enableDragAndDropProp ?? true,\n    enableMountQueryChange,\n    translations: translations ?? {},\n  });\n  const { enableDragAndDrop } = rqbContext;\n\n  const dnd = useReactDnD(props.dnd);\n  const key = enableDragAndDrop && dnd ? 'dnd' : 'no-dnd';\n\n  if (!enableDragAndDrop || !dnd) {\n    return (\n      <QueryBuilderContext.Provider\n        key={key}\n        value={{ ...rqbContext, enableDragAndDrop: false, debugMode }}>\n        {props.children}\n      </QueryBuilderContext.Provider>\n    );\n  }\n\n  const { DndProvider, HTML5Backend } = dnd;\n\n  return (\n    <DndProvider key={key} backend={HTML5Backend} debugMode={debugMode}>\n      <QueryBuilderContext.Provider\n        key={key}\n        value={{ ...rqbContext, enableDragAndDrop, debugMode }}>\n        <QueryBuilderDndWithoutProvider dnd={dnd} canDrop={canDrop}>\n          {props.children}\n        </QueryBuilderDndWithoutProvider>\n      </QueryBuilderContext.Provider>\n    </DndProvider>\n  );\n};\n\n/**\n * Context provider to enable drag-and-drop. Only use this provider if the application\n * already implements `react-dnd`, otherwise use {@link QueryBuilderDnD}.\n */\nexport const QueryBuilderDndWithoutProvider = (props: QueryBuilderDndProps) => {\n  const rqbContext = useContext(QueryBuilderContext);\n  const rqbDndContext = useContext(QueryBuilderDndContext);\n  const dnd = useReactDnD(props.dnd);\n  const debugMode = usePreferProp(false, props.debugMode, rqbContext.debugMode);\n  const canDrop = usePreferAnyProp(undefined, props.canDrop, rqbDndContext.canDrop);\n  const enableDragAndDrop = usePreferProp(\n    true,\n    props.enableDragAndDrop,\n    rqbContext.enableDragAndDrop\n  );\n  const key = enableDragAndDrop && dnd ? 'dnd' : 'no-dnd';\n\n  if (!enableDragAndDrop || !dnd) {\n    return (\n      <QueryBuilderContext.Provider\n        key={key}\n        value={{ ...rqbContext, enableDragAndDrop: false, debugMode }}>\n        {props.children}\n      </QueryBuilderContext.Provider>\n    );\n  }\n\n  const { DndContext, useDrag, useDrop } = dnd;\n\n  const baseControls = {\n    rule:\n      props.controlElements?.rule ??\n      rqbContext.controlElements?.rule ??\n      rqbDndContext.baseControls.rule,\n    ruleGroup:\n      props.controlElements?.ruleGroup ??\n      rqbContext.controlElements?.ruleGroup ??\n      rqbDndContext.baseControls.ruleGroup,\n    combinatorSelector:\n      props.controlElements?.combinatorSelector ??\n      rqbContext.controlElements?.combinatorSelector ??\n      rqbDndContext.baseControls.combinatorSelector,\n  };\n\n  const newContext: QueryBuilderContextProps<FullField, string> = {\n    ...rqbContext,\n    controlElements: {\n      ...rqbContext.controlElements,\n      ruleGroup: RuleGroupDnD,\n      rule: RuleDnD,\n      inlineCombinator: InlineCombinatorDnD,\n    },\n  };\n\n  return (\n    <DndContext.Consumer key={key}>\n      {() => (\n        <QueryBuilderContext.Provider key={key} value={newContext}>\n          <QueryBuilderDndContext.Provider value={{ useDrag, useDrop, baseControls, canDrop }}>\n            {props.children}\n          </QueryBuilderDndContext.Provider>\n        </QueryBuilderContext.Provider>\n      )}\n    </DndContext.Consumer>\n  );\n};\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { RuleProps } from 'react-querybuilder';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\nimport { useRuleDnD } from './hooks';\n\n/**\n * Rule component for drag-and-drop. Renders the provided rule component\n * ({@link Rule} by default), but forwards the drag-and-drop context.\n */\nexport const RuleDnD = (props: RuleProps) => {\n  const rqbDndContext = useContext(QueryBuilderDndContext);\n\n  const { canDrop, useDrag, useDrop } = rqbDndContext;\n\n  const disabled = !!props.parentDisabled || !!props.disabled;\n\n  const dndRefs = useRuleDnD({\n    ...props,\n    disabled,\n    useDrag: useDrag!,\n    useDrop: useDrop!,\n    canDrop,\n  });\n\n  const { rule: BaseRuleComponent } = rqbDndContext.baseControls;\n\n  return (\n    <QueryBuilderDndContext.Provider value={rqbDndContext}>\n      <BaseRuleComponent {...props} {...dndRefs} />\n    </QueryBuilderDndContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport type { RuleGroupProps } from 'react-querybuilder';\nimport { QueryBuilderDndContext } from './QueryBuilderDndContext';\nimport { useRuleGroupDnD } from './hooks';\n\n/**\n * Rule group component for drag-and-drop. Renders the provided rule group component\n * ({@link RuleGroup} by default), but forwards the drag-and-drop context so that child\n * rules and groups will render within the appropriate drag-and-drop wrappers.\n */\nexport const RuleGroupDnD = (props: RuleGroupProps) => {\n  const rqbDndContext = useContext(QueryBuilderDndContext);\n\n  const { canDrop, useDrag, useDrop } = rqbDndContext;\n\n  const disabled = !!props.parentDisabled || !!props.disabled;\n\n  const dndRefs = useRuleGroupDnD({\n    ...props,\n    disabled,\n    useDrag: useDrag!,\n    useDrop: useDrop!,\n    canDrop,\n  });\n\n  const { ruleGroup: BaseRuleGroupComponent } = rqbDndContext.baseControls;\n\n  return <BaseRuleGroupComponent {...props} {...dndRefs} />;\n};\n"],"mappings":"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","names":["src_exports","__export","InlineCombinatorDnD","QueryBuilderDnD","QueryBuilderDndWithoutProvider","RuleDnD","RuleGroupDnD","useInlineCombinatorDnD","useReactDnD","useRuleDnD","useRuleGroupDnD","__toCommonJS","React","import_react","import_react_querybuilder","import_react","import_react_querybuilder","useInlineCombinatorDnD","path","canDrop","schema","useDrop","rules","dropRef","hoveringItem","isOver","dropMonitorId","drop","dragging","itemPath","parentHoverPath","parentItemPath","hoverIndex","itemIndex","monitor","qbId","getQuery","dispatchQuery","import_react","import_react_querybuilder","useReactDnD","dndParam","dnd","setDnd","didCancel","reactDnD","reactDnDHTML5Be","import_react","import_react_querybuilder","import_react_querybuilder","useDragCommon","type","path","disabled","actions","schema","useDrag","monitor","item","dropResult","parentHoverPath","hoverIndex","destinationPath","otherBuilderQuery","accept","useRuleDnD","params","path","rule","disabled","schema","actions","useDrag","useDrop","canDrop","dndRef","dragRef","isDragging","dragMonitorId","drag","preview","useDragCommon","isOver","dropMonitorId","dropEffect","drop","dragging","parentHoverPath","parentItemPath","hoverIndex","itemIndex","monitor","qbId","getQuery","dispatchQuery","import_react","import_react_querybuilder","accept","useRuleGroupDnD","params","disabled","path","ruleGroup","schema","actions","useDrag","useDrop","canDrop","previewRef","dragRef","dropRef","isDragging","dragMonitorId","drag","preview","useDragCommon","isOver","dropMonitorId","dropEffect","drop","dragging","parentItemPath","itemIndex","monitor","_item","qbId","getQuery","dispatchQuery","import_react","import_react_querybuilder","rule","ruleGroup","combinatorSelector","QueryBuilderDndContext","InlineCombinatorDnD","CombinatorSelectorComponent","props","canDrop","useDrop","QueryBuilderDndContext","dropRef","dropMonitorId","isOver","useInlineCombinatorDnD","dndOver","wrapperClassName","React","import_react","import_react_querybuilder","React","import_react","RuleDnD","props","rqbDndContext","QueryBuilderDndContext","canDrop","useDrag","useDrop","disabled","dndRefs","useRuleDnD","BaseRuleComponent","React","import_react","RuleGroupDnD","props","rqbDndContext","QueryBuilderDndContext","canDrop","useDrag","useDrop","disabled","dndRefs","useRuleGroupDnD","BaseRuleGroupComponent","QueryBuilderDnD","props","controlClassnames","controlElements","debugMode","enableDragAndDropProp","enableMountQueryChange","translations","canDrop","rqbContext","enableDragAndDrop","dnd","useReactDnD","key","DndProvider","HTML5Backend","QueryBuilderDndWithoutProvider","rqbDndContext","QueryBuilderDndContext","DndContext","useDrag","useDrop","baseControls","newContext","RuleGroupDnD","RuleDnD","InlineCombinatorDnD"]}