{"version":3,"sources":["../../src/index.ts","../../src/components/ActionElement.tsx","../../src/components/DragHandle.tsx","../../src/components/InlineCombinator.tsx","../../src/defaults.ts","../../src/components/NotToggle.tsx","../../src/components/QueryBuilder.tsx","../../src/messages.ts","../../src/redux/_internal.ts","../../src/redux/index.ts","../../src/redux/queriesSlice.ts","../../src/redux/warningsSlice.ts","../../src/hooks/usePrevious.ts","../../src/hooks/useControlledOrUncontrolled.ts","../../src/hooks/useDeprecatedProps.ts","../../src/hooks/useMergedContext.ts","../../src/utils/arrayUtils.ts","../../src/utils/misc.ts","../../src/utils/isRuleGroup.ts","../../src/utils/convertQuery.ts","../../src/utils/defaultValidator.ts","../../src/utils/toFullOption.ts","../../src/utils/uniq.ts","../../src/utils/optGroupUtils.ts","../../src/utils/filterFieldsByComparator.ts","../../src/utils/parseNumber.ts","../../src/utils/formatQuery/utils.ts","../../src/utils/formatQuery/defaultRuleProcessorCEL.ts","../../src/utils/formatQuery/defaultRuleProcessorMongoDB.ts","../../src/utils/formatQuery/defaultRuleProcessorSpEL.ts","../../src/utils/formatQuery/defaultValueProcessorByRule.ts","../../src/utils/formatQuery/defaultRuleProcessorElasticSearch.ts","../../src/utils/formatQuery/defaultRuleProcessorJSONata.ts","../../src/utils/formatQuery/defaultRuleProcessorJsonLogic.ts","../../src/utils/formatQuery/defaultRuleProcessorParameterized.ts","../../src/utils/formatQuery/defaultRuleProcessorSQL.ts","../../src/utils/isRuleOrGroupValid.ts","../../src/utils/formatQuery/formatQuery.ts","../../src/utils/formatQuery/index.ts","../../src/utils/pathUtils.ts","../../src/utils/generateAccessibleDescription.ts","../../src/utils/generateID.ts","../../src/utils/getCompatContextProvider.tsx","../../src/utils/mergeClassnames.ts","../../src/utils/mergeTranslations.ts","../../src/utils/objectUtils.ts","../../src/utils/getValidationClassNames.ts","../../src/utils/getValueSourcesUtil.ts","../../src/utils/prepareQueryObjects.ts","../../src/utils/queryTools.ts","../../src/utils/regenerateIDs.ts","../../src/utils/toOptions.tsx","../../src/utils/transformQuery.ts","../../src/hooks/usePreferProp.ts","../../src/hooks/useQueryBuilderSchema.ts","../../src/hooks/useQueryBuilderSetup.ts","../../src/hooks/useReactDndWarning.ts","../../src/hooks/useRule.ts","../../src/hooks/useRuleGroup.ts","../../src/hooks/useSelectElementChangeHandler.ts","../../src/hooks/useStopEventPropagation.ts","../../src/hooks/useValueEditor.ts","../../src/hooks/useValueSelector.ts","../../src/components/QueryBuilderContext.ts","../../src/components/Rule.tsx","../../src/components/RuleGroup.tsx","../../src/components/ShiftActions.tsx","../../src/components/ValueEditor.tsx","../../src/components/ValueSelector.tsx","../../src/components/defaults.ts"],"sourcesContent":["export * from './components';\nexport { QueryBuilder as default } from './components';\nexport * from './defaults';\nexport * from './hooks';\nexport * from './messages';\nexport * from './redux';\nexport * from './types';\nexport * from './utils';\n","import * as React from 'react';\nimport type { ActionProps } from '../types';\n\n/**\n * Default `<button>` component used by {@link QueryBuilder}.\n */\nexport const ActionElement = (props: ActionProps) => (\n  <button\n    type=\"button\"\n    data-testid={props.testID}\n    disabled={props.disabled && !props.disabledTranslation}\n    className={props.className}\n    title={\n      props.disabledTranslation && props.disabled ? props.disabledTranslation.title : props.title\n    }\n    onClick={e => props.handleOnClick(e)}>\n    {props.disabledTranslation && props.disabled ? props.disabledTranslation.label : props.label}\n  </button>\n);\n","import * as React from 'react';\nimport { forwardRef } from 'react';\nimport type { DragHandleProps } from '../types';\n\n/**\n * Defaut drag handle component used by {@link QueryBuilder} when\n * `enableDragAndDrop` is `true`.\n */\nexport const DragHandle = forwardRef<HTMLSpanElement, DragHandleProps>((props, dragRef) => (\n  <span data-testid={props.testID} ref={dragRef} className={props.className} title={props.title}>\n    {props.label}\n  </span>\n));\n","import * as React from 'react';\nimport { standardClassnames, TestID } from '../defaults';\nimport type { InlineCombinatorProps } from '../types';\n\n/**\n * Default `inlineCombinator` component used by {@link QueryBuilder}. A small `<div>`\n * wrapper around the `combinatorSelector` component, used when either\n * `showCombinatorsBetweenRules` or `independentCombinators` are `true`.\n */\nexport const InlineCombinator = (allProps: InlineCombinatorProps) => {\n  const { component: CombinatorSelectorComponent, ...props } = allProps;\n\n  return (\n    <div className={standardClassnames.betweenRules} data-testid={TestID.inlineCombinator}>\n      <CombinatorSelectorComponent {...props} testID={TestID.combinators} />\n    </div>\n  );\n};\n","import type {\n  Classnames,\n  DefaultCombinator,\n  DefaultCombinatorExtended,\n  DefaultOperator,\n  DefaultOperatorName,\n  TranslationsFull,\n} from './types/index.noReact';\n\n// DO NOT ALTER OR REMOVE REGION NAMES. Some of them are used\n// to generate code snippets in the documentation.\n\nconst placeholderName = '~';\nconst placeholderLabel = '------';\n/**\n * Default `name` for placeholder option in the `fields` array.\n */\nexport const defaultPlaceholderFieldName = placeholderName;\n/**\n * Default `label` for placeholder option in the `fields` array.\n */\nexport const defaultPlaceholderFieldLabel = placeholderLabel;\n/**\n * Default `label` for placeholder option group in the `fields` array.\n */\nexport const defaultPlaceholderFieldGroupLabel = placeholderLabel;\n/**\n * Default `name` for placeholder option in the `operators` array.\n */\nexport const defaultPlaceholderOperatorName = placeholderName;\n/**\n * Default `label` for placeholder option in the `operators` array.\n */\nexport const defaultPlaceholderOperatorLabel = placeholderLabel;\n/**\n * Default `label` for placeholder option group in the `operators` array.\n */\nexport const defaultPlaceholderOperatorGroupLabel = placeholderLabel;\n\n/**\n * Default character used to `.join` and `.split` arrays.\n */\nexport const defaultJoinChar = ',';\n\n/**\n * Default configuration of translatable strings.\n */\n// #region docs-translations\nexport const defaultTranslations = {\n  fields: {\n    title: 'Fields',\n    placeholderName: defaultPlaceholderFieldName,\n    placeholderLabel: defaultPlaceholderFieldLabel,\n    placeholderGroupLabel: defaultPlaceholderFieldGroupLabel,\n  } as const,\n  operators: {\n    title: 'Operators',\n    placeholderName: defaultPlaceholderOperatorName,\n    placeholderLabel: defaultPlaceholderOperatorLabel,\n    placeholderGroupLabel: defaultPlaceholderOperatorGroupLabel,\n  } as const,\n  value: {\n    title: 'Value',\n  } as const,\n  removeRule: {\n    label: '‚®Ø',\n    title: 'Remove rule',\n  } as const,\n  removeGroup: {\n    label: '‚®Ø',\n    title: 'Remove group',\n  } as const,\n  addRule: {\n    label: '+ Rule',\n    title: 'Add rule',\n  } as const,\n  addGroup: {\n    label: '+ Group',\n    title: 'Add group',\n  } as const,\n  combinators: {\n    title: 'Combinators',\n  } as const,\n  notToggle: {\n    label: 'Not',\n    title: 'Invert this group',\n  } as const,\n  cloneRule: {\n    label: '‚ßâ',\n    title: 'Clone rule',\n  } as const,\n  cloneRuleGroup: {\n    label: '‚ßâ',\n    title: 'Clone group',\n  } as const,\n  shiftActionUp: {\n    label: 'ÀÑ',\n    title: 'Shift up',\n  } as const,\n  shiftActionDown: {\n    label: 'ÀÖ',\n    title: 'Shift down',\n  } as const,\n  dragHandle: {\n    label: '‚Åû‚Åû',\n    title: 'Drag handle',\n  } as const,\n  lockRule: {\n    label: 'üîì',\n    title: 'Lock rule',\n  } as const,\n  lockGroup: {\n    label: 'üîì',\n    title: 'Lock group',\n  } as const,\n  lockRuleDisabled: {\n    label: 'üîí',\n    title: 'Unlock rule',\n  } as const,\n  lockGroupDisabled: {\n    label: 'üîí',\n    title: 'Unlock group',\n  } as const,\n  valueSourceSelector: {\n    title: 'Value source',\n  } as const,\n} satisfies TranslationsFull;\n// #endregion\n\n/**\n * Default operator list.\n */\n// #region docs-operators\nexport const defaultOperators = [\n  { name: '=', value: '=', label: '=' } as const,\n  { name: '!=', value: '!=', label: '!=' } as const,\n  { name: '<', value: '<', label: '<' } as const,\n  { name: '>', value: '>', label: '>' } as const,\n  { name: '<=', value: '<=', label: '<=' } as const,\n  { name: '>=', value: '>=', label: '>=' } as const,\n  { name: 'contains', value: 'contains', label: 'contains' } as const,\n  { name: 'beginsWith', value: 'beginsWith', label: 'begins with' } as const,\n  { name: 'endsWith', value: 'endsWith', label: 'ends with' } as const,\n  { name: 'doesNotContain', value: 'doesNotContain', label: 'does not contain' } as const,\n  { name: 'doesNotBeginWith', value: 'doesNotBeginWith', label: 'does not begin with' } as const,\n  { name: 'doesNotEndWith', value: 'doesNotEndWith', label: 'does not end with' } as const,\n  { name: 'null', value: 'null', label: 'is null' } as const,\n  { name: 'notNull', value: 'notNull', label: 'is not null' } as const,\n  { name: 'in', value: 'in', label: 'in' } as const,\n  { name: 'notIn', value: 'notIn', label: 'not in' } as const,\n  { name: 'between', value: 'between', label: 'between' } as const,\n  { name: 'notBetween', value: 'notBetween', label: 'not between' } as const,\n] satisfies DefaultOperator[];\n// #endregion\n\n/**\n * Map of default operators to their respective opposite/negating operators.\n */\nexport const defaultOperatorNegationMap = {\n  '=': '!=',\n  '!=': '=',\n  '<': '>=',\n  '<=': '>',\n  '>': '<=',\n  '>=': '<',\n  beginsWith: 'doesNotBeginWith',\n  doesNotBeginWith: 'beginsWith',\n  endsWith: 'doesNotEndWith',\n  doesNotEndWith: 'endsWith',\n  contains: 'doesNotContain',\n  doesNotContain: 'contains',\n  between: 'notBetween',\n  notBetween: 'between',\n  in: 'notIn',\n  notIn: 'in',\n  notNull: 'null',\n  null: 'notNull',\n} satisfies Record<DefaultOperatorName, DefaultOperatorName>;\n\n/**\n * Default combinator list.\n */\n// #region docs-combinators\nexport const defaultCombinators = [\n  { name: 'and', value: 'and', label: 'AND' } as const,\n  { name: 'or', value: 'or', label: 'OR' } as const,\n] satisfies DefaultCombinator[];\n// #endregion\n\n/**\n * Default combinator list, with `XOR` added.\n */\nexport const defaultCombinatorsExtended = [\n  ...defaultCombinators,\n  { name: 'xor', value: 'xor', label: 'XOR' } as const,\n] satisfies DefaultCombinatorExtended[];\n\n/**\n * Standard classnames applied to each component.\n */\n// #region docs-standardclassnames\nexport const standardClassnames = {\n  queryBuilder: 'queryBuilder',\n  ruleGroup: 'ruleGroup',\n  header: 'ruleGroup-header',\n  body: 'ruleGroup-body',\n  combinators: 'ruleGroup-combinators',\n  addRule: 'ruleGroup-addRule',\n  addGroup: 'ruleGroup-addGroup',\n  cloneRule: 'rule-cloneRule',\n  cloneGroup: 'ruleGroup-cloneGroup',\n  removeGroup: 'ruleGroup-remove',\n  notToggle: 'ruleGroup-notToggle',\n  rule: 'rule',\n  fields: 'rule-fields',\n  operators: 'rule-operators',\n  value: 'rule-value',\n  removeRule: 'rule-remove',\n  betweenRules: 'betweenRules',\n  valid: 'queryBuilder-valid',\n  invalid: 'queryBuilder-invalid',\n  shiftActions: 'shiftActions',\n  dndDragging: 'dndDragging',\n  dndOver: 'dndOver',\n  dndCopy: 'dndCopy',\n  dragHandle: 'queryBuilder-dragHandle',\n  disabled: 'queryBuilder-disabled',\n  lockRule: 'rule-lock',\n  lockGroup: 'ruleGroup-lock',\n  valueSource: 'rule-valueSource',\n  valueListItem: 'rule-value-list-item',\n  branches: 'queryBuilder-branches',\n} as const;\n// #endregion\n\n/**\n * Default classnames for each component.\n */\nexport const defaultControlClassnames = {\n  queryBuilder: '',\n  ruleGroup: '',\n  header: '',\n  body: '',\n  combinators: '',\n  addRule: '',\n  addGroup: '',\n  cloneRule: '',\n  cloneGroup: '',\n  removeGroup: '',\n  notToggle: '',\n  rule: '',\n  fields: '',\n  operators: '',\n  value: '',\n  removeRule: '',\n  shiftActions: '',\n  dragHandle: '',\n  lockRule: '',\n  lockGroup: '',\n  valueSource: '',\n  actionElement: '',\n  valueSelector: '',\n} satisfies Classnames;\n\n/**\n * Default reason codes for a group being invalid.\n */\nexport const groupInvalidReasons = {\n  empty: 'empty',\n  invalidCombinator: 'invalid combinator',\n  invalidIndependentCombinators: 'invalid independent combinators',\n} as const;\n\n/**\n * Component identifiers for testing.\n */\nexport const TestID = {\n  rule: 'rule',\n  ruleGroup: 'rule-group',\n  inlineCombinator: 'inline-combinator',\n  addGroup: 'add-group',\n  removeGroup: 'remove-group',\n  cloneGroup: 'clone-group',\n  cloneRule: 'clone-rule',\n  addRule: 'add-rule',\n  removeRule: 'remove-rule',\n  combinators: 'combinators',\n  fields: 'fields',\n  operators: 'operators',\n  valueEditor: 'value-editor',\n  notToggle: 'not-toggle',\n  shiftActions: 'shift-actions',\n  dragHandle: 'drag-handle',\n  lockRule: 'lock-rule',\n  lockGroup: 'lock-group',\n  valueSourceSelector: 'value-source-selector',\n} as const;\n\nexport const LogType = {\n  parentPathDisabled: 'action aborted: parent path disabled',\n  pathDisabled: 'action aborted: path is disabled',\n  queryUpdate: 'query updated',\n  onAddRuleFalse: 'onAddRule callback returned false',\n  onAddGroupFalse: 'onAddGroup callback returned false',\n  onRemoveFalse: 'onRemove callback returned false',\n  add: 'rule or group added',\n  remove: 'rule or group removed',\n  update: 'rule or group updated',\n  move: 'rule or group moved',\n} as const;\n","import * as React from 'react';\nimport type { NotToggleProps } from '../types';\n\n/**\n * Default `notToggle` (aka inversion) component used by {@link QueryBuilder}.\n */\nexport const NotToggle = (props: NotToggleProps) => (\n  <label data-testid={props.testID} className={props.className} title={props.title}>\n    <input\n      type=\"checkbox\"\n      onChange={e => props.handleOnChange(e.target.checked)}\n      checked={!!props.checked}\n      disabled={props.disabled}\n    />\n    {props.label}\n  </label>\n);\n","import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { useQueryBuilderSchema, useQueryBuilderSetup } from '../hooks';\nimport { QueryBuilderStateContext, queryBuilderStore } from '../redux';\nimport type {\n  FullCombinator,\n  FullField,\n  GetOptionIdentifierType,\n  FullOperator,\n  Path,\n  QueryBuilderContextProps,\n  QueryBuilderProps,\n  RuleGroupTypeAny,\n} from '../types';\nimport { QueryBuilderContext as _QBC } from './QueryBuilderContext';\n\n/**\n * The {@link Path} of the root group.\n */\nexport const rootPath = [] satisfies Path;\n\n/**\n * Context provider for the `{@link QueryBuilder}` state store.\n */\nexport const QueryBuilderStateProvider = (props: { children: React.ReactNode }) => (\n  <Provider context={QueryBuilderStateContext} store={queryBuilderStore}>\n    {props.children}\n  </Provider>\n);\n\nconst QueryBuilderInternal = <\n  RG extends RuleGroupTypeAny,\n  F extends FullField,\n  O extends FullOperator,\n  C extends FullCombinator,\n>(allProps: {\n  props: QueryBuilderProps<RG, F, O, C>;\n  setup: ReturnType<typeof useQueryBuilderSetup<RG, F, O, C>>;\n}) => {\n  const { setup, props } = allProps;\n\n  const qb = useQueryBuilderSchema<RG, F, O, C>(props, setup);\n\n  const RuleGroupControlElement = qb.schema.controls.ruleGroup;\n\n  const QueryBuilderContext = _QBC as React.Context<\n    QueryBuilderContextProps<F, GetOptionIdentifierType<O>>\n  >;\n\n  return (\n    <QueryBuilderContext.Provider key={qb.dndEnabledAttr} value={qb.rqbContext}>\n      <div\n        role=\"form\"\n        className={qb.wrapperClassName}\n        data-dnd={qb.dndEnabledAttr}\n        data-inlinecombinators={qb.inlineCombinatorsAttr}>\n        <RuleGroupControlElement\n          translations={qb.translations}\n          ruleGroup={qb.rootGroup}\n          rules={qb.rootGroup.rules}\n          {...qb.combinatorPropObject}\n          not={!!qb.rootGroup.not}\n          schema={qb.schema}\n          actions={qb.actions}\n          id={qb.rootGroup.id}\n          path={rootPath}\n          disabled={qb.rootGroupDisabled}\n          shiftUpDisabled\n          shiftDownDisabled\n          parentDisabled={qb.queryDisabled}\n          context={qb.context}\n        />\n      </div>\n    </QueryBuilderContext.Provider>\n  );\n};\n\n/**\n * The query builder component for React.\n *\n * See https://react-querybuilder.js.org/ for demos and documentation.\n */\nexport const QueryBuilder = <\n  RG extends RuleGroupTypeAny,\n  F extends FullField,\n  O extends FullOperator,\n  C extends FullCombinator,\n>(\n  props: QueryBuilderProps<RG, F, O, C>\n) => {\n  const setup = useQueryBuilderSetup(props);\n\n  return (\n    <QueryBuilderStateProvider>\n      <QueryBuilderInternal props={props} setup={setup} />\n    </QueryBuilderStateProvider>\n  );\n};\n","export const messages = {\n  errorInvalidIndependentCombinatorsProp:\n    'QueryBuilder was rendered with a truthy independentCombinators prop. This prop is deprecated and unnecessary. Furthermore, the initial query/defaultQuery prop was of type RuleGroupType instead of type RuleGroupIC. More info: https://react-querybuilder.js.org/docs/components/querybuilder#independent-combinators',\n\n  errorUnnecessaryIndependentCombinatorsProp:\n    'QueryBuilder was rendered with the deprecated and unnecessary independentCombinators prop. To use independent combinators, make sure the query/defaultQuery prop is of type RuleGroupIC when the component mounts. More info: https://react-querybuilder.js.org/docs/components/querybuilder#independent-combinators',\n\n  errorDeprecatedRuleGroupProps:\n    'A custom RuleGroup component has rendered a standard RuleGroup component with deprecated props. The combinator, not, and rules props should not be used. Instead, the full group object should be passed as the ruleGroup prop.',\n\n  errorDeprecatedRuleProps:\n    'A custom RuleGroup component has rendered a standard Rule component with deprecated props. The field, operator, value, and valueSource props should not be used. Instead, the full rule object should be passed as the rule prop.',\n\n  errorBothQueryDefaultQuery:\n    'QueryBuilder was rendered with both query and defaultQuery props. QueryBuilder must be either controlled or uncontrolled (specify either the query prop, or the defaultQuery prop, but not both). Decide between using a controlled or uncontrolled query builder and remove one of these props. More info: https://reactjs.org/link/controlled-components',\n\n  errorUncontrolledToControlled:\n    'QueryBuilder is changing from an uncontrolled component to be controlled. This is likely caused by the query changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled query builder for the lifetime of the component. More info: https://reactjs.org/link/controlled-components',\n\n  errorControlledToUncontrolled:\n    'QueryBuilder is changing from a controlled component to be uncontrolled. This is likely caused by the query changing from defined to undefined, which should not happen. Decide between using a controlled or uncontrolled query builder for the lifetime of the component. More info: https://reactjs.org/link/controlled-components',\n\n  errorEnabledDndWithoutReactDnD:\n    'QueryBuilder was rendered with the enableDragAndDrop prop set to true, but either react-dnd or react-dnd-html5-backend (or both) was not installed. To enable drag-and-drop functionality, install both packages and wrap QueryBuilder in QueryBuilderDnD from @react-querybuilder/dnd.',\n} as const;\n","import type {\n  Dispatch,\n  PayloadAction,\n  ThunkAction,\n  ThunkDispatch,\n  UnknownAction,\n} from '@reduxjs/toolkit';\nimport { createDispatchHook, createStoreHook } from 'react-redux';\nimport { QueryBuilderStateContext, type RqbState } from '.';\nimport type { SetQueryStateParams } from './queriesSlice';\nimport { queriesSlice } from './queriesSlice';\nimport type { Messages } from './warningsSlice';\nimport { warningsSlice } from './warningsSlice';\n\nexport const _RQB_INTERNAL_dispatchThunk =\n  ({\n    payload,\n    onQueryChange,\n  }: {\n    payload: SetQueryStateParams;\n    // TODO: Why doesn't `(query: RuleGroupTypeAny) => void` work here?\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onQueryChange?: (query: any) => void;\n  }): ThunkAction<void, RqbState, unknown, PayloadAction<SetQueryStateParams>> =>\n  dispatch => {\n    dispatch(queriesSlice.actions.setQueryState(payload));\n    if (typeof onQueryChange === 'function') {\n      onQueryChange(payload.query);\n    }\n  };\n\n/**\n * Gets the `dispatch` function for the RQB Redux store.\n */\nexport const useRQB_INTERNAL_QueryBuilderDispatch: UseQueryBuilderDispatch =\n  createDispatchHook(QueryBuilderStateContext);\ntype UseQueryBuilderDispatch = () => ThunkDispatch<RqbState, undefined, UnknownAction> &\n  Dispatch<UnknownAction>;\n\n/**\n * Gets the full RQB Redux store.\n */\nexport const useRQB_INTERNAL_QueryBuilderStore = createStoreHook(QueryBuilderStateContext);\n\nconst { rqbWarn: _SYNC_rqbWarn } = warningsSlice.actions;\n\nexport const rqbWarn =\n  (msg: Messages): ThunkAction<void, RqbState, unknown, PayloadAction<Messages>> =>\n  dispatch => {\n    setTimeout(() => dispatch(_SYNC_rqbWarn(msg)));\n  };\n","import type { UnknownAction } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\nimport * as React from 'react';\nimport type { ReactReduxContextValue, TypedUseSelectorHook } from 'react-redux';\nimport { createSelectorHook } from 'react-redux';\nimport type { QueriesSliceState } from './queriesSlice';\nimport { queriesSlice } from './queriesSlice';\nimport type { WarningsSliceState } from './warningsSlice';\nimport { warningsSlice } from './warningsSlice';\n\nexport type RqbState = {\n  queries: QueriesSliceState;\n  warnings: WarningsSliceState;\n};\n\nconst preloadedState = {\n  queries: queriesSlice.getInitialState(),\n  warnings: warningsSlice.getInitialState(),\n} satisfies RqbState;\n\nexport const queryBuilderStore = configureStore({\n  reducer: {\n    queries: queriesSlice.reducer,\n    warnings: warningsSlice.reducer,\n  },\n  preloadedState,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      // Ignore non-serializable values in setQueryState actions and rule `value`s\n      // https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data\n      serializableCheck: {\n        ignoredActions: ['queries/setQueryState'],\n        ignoredPaths: [/^queries\\b.*\\.rules\\.\\d+\\.value$/],\n      },\n    }),\n});\n\nexport const QueryBuilderStateContext = React.createContext<ReactReduxContextValue<\n  RqbState,\n  UnknownAction\n> | null>(null);\n\n// #region Hooks\n/**\n * A `useSelector` hook for the RQB Redux store.\n */\nexport const useQueryBuilderSelector: TypedUseSelectorHook<RqbState> =\n  createSelectorHook(QueryBuilderStateContext);\n// #endregion\n\n// #region Selectors\n/**\n * Given a `qbId` (provided as part of the `schema` prop), returns\n * a selector for use with `useQueryBuilderSelector`.\n */\nexport const getQuerySelectorById = (qbId: string) => (state: RqbState) =>\n  queriesSlice.selectors.getQuerySelectorById({ queries: state.queries }, qbId);\n// #endregion\n","import type { PayloadAction, Slice } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { RuleGroupTypeAny } from '../types';\n\nexport type QueriesSliceState = Record<string, RuleGroupTypeAny>;\n\nexport interface SetQueryStateParams {\n  qbId: string;\n  query: RuleGroupTypeAny;\n}\n\nexport const initialState: QueriesSliceState = {};\n\nexport const queriesSlice = createSlice({\n  name: 'queries',\n  initialState,\n  reducers: {\n    setQueryState: (state, { payload: { qbId, query } }: PayloadAction<SetQueryStateParams>) => {\n      state[qbId] = query;\n    },\n  },\n  selectors: {\n    getQuerySelectorById: (state: QueriesSliceState, qbId: string) => state[qbId],\n  },\n}) satisfies Slice;\n","import type { PayloadAction, Slice } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { messages } from '../messages';\n\ntype ValuesAsKeys<T> =\n  T extends Record<infer _K, infer V>\n    ? [V] extends [string]\n      ? { [Key in V]: boolean }\n      : never\n    : never;\ntype ValuesType<T> =\n  T extends Record<infer _K, infer V> ? ([V] extends [string] ? V : never) : never;\nexport type WarningsSliceState = ValuesAsKeys<typeof messages>;\nexport type Messages = ValuesType<typeof messages>;\nexport const initialState: WarningsSliceState = {\n  [messages.errorInvalidIndependentCombinatorsProp]: false,\n  [messages.errorUnnecessaryIndependentCombinatorsProp]: false,\n  [messages.errorDeprecatedRuleGroupProps]: false,\n  [messages.errorDeprecatedRuleProps]: false,\n  [messages.errorBothQueryDefaultQuery]: false,\n  [messages.errorUncontrolledToControlled]: false,\n  [messages.errorControlledToUncontrolled]: false,\n  [messages.errorEnabledDndWithoutReactDnD]: false,\n};\n\n// export type WarningsSliceState = Record<keyof typeof messages, boolean>;\n// export const initialState = Object.fromEntries(\n//   Object.keys(messages).map(key => [key, false])\n// ) as WarningsSliceState;\n\nexport const warningsSlice = createSlice({\n  name: 'warnings',\n  initialState,\n  reducers: {\n    rqbWarn: (state, { payload }: PayloadAction<Messages>) => {\n      if (!state[payload]) {\n        console.error(payload);\n        state[payload] = true;\n      }\n    },\n  },\n}) satisfies Slice;\n","import { useRef } from 'react';\n\n/**\n * Returns the prop value from the last render.\n *\n * Adapted from https://usehooks.com/usePrevious/.\n */\nexport const usePrevious = <T>(value: T) => {\n  const ref = useRef<{ value: T | null; prev: T | null }>({ value, prev: null });\n\n  const current = ref.current.value;\n\n  if (value !== current) {\n    ref.current = { value, prev: current };\n  }\n\n  return ref.current.prev;\n};\n","import { messages } from '../messages';\nimport { useRQB_INTERNAL_QueryBuilderDispatch, rqbWarn } from '../redux/_internal';\nimport type { RuleGroupTypeAny } from '../types';\nimport { usePrevious } from './usePrevious';\n\nexport interface UseControlledOrUncontrolledParams {\n  defaultQuery?: RuleGroupTypeAny;\n  queryProp?: RuleGroupTypeAny;\n}\n\n/**\n * Logs a warning when the component changes from controlled to uncontrolled,\n * vice versa, or both `query` and `defaultQuery` are provided.\n */\nexport const useControlledOrUncontrolled = (params: UseControlledOrUncontrolledParams) => {\n  const dispatch = useRQB_INTERNAL_QueryBuilderDispatch();\n  const { defaultQuery, queryProp } = params;\n  const prevQueryPresent = usePrevious(!!queryProp);\n\n  // istanbul ignore else\n  if (process.env.NODE_ENV !== 'production') {\n    if (!!queryProp && !!defaultQuery) {\n      dispatch(rqbWarn(messages.errorBothQueryDefaultQuery));\n    } else if (prevQueryPresent === true && !queryProp && !!defaultQuery) {\n      dispatch(rqbWarn(messages.errorControlledToUncontrolled));\n    } else if (prevQueryPresent === false && !!queryProp && !defaultQuery) {\n      dispatch(rqbWarn(messages.errorUncontrolledToControlled));\n    }\n  }\n};\n","import { messages } from '../messages';\nimport { rqbWarn, useRQB_INTERNAL_QueryBuilderDispatch } from '../redux/_internal';\n\n/**\n * Logs an error to the console if any of the following are true:\n * - `QueryBuilder` is rendered with an `independentCombinators` prop\n * - `RuleGroup` is rendered with `combinator` or `rules` props (deprecated in favor of `ruleGroup`)\n * - `Rule` is rendered with `field`, `operator`, or `value` props (deprecated in favor of `rule`)\n */\nfunction useDeprecatedProps(\n  type: 'independentCombinators',\n  logWarning: boolean,\n  otherParams: 'invalid' | 'unnecessary'\n): void;\nfunction useDeprecatedProps(type: 'rule' | 'ruleGroup', logWarning: boolean): void;\nfunction useDeprecatedProps(\n  /** Type of error to be logged, if logWarning is true. */\n  type: 'independentCombinators' | 'rule' | 'ruleGroup',\n  /** If true, the error (well...warning, really) will be logged. */\n  logWarning: boolean,\n  otherParams?: 'invalid' | 'unnecessary'\n) {\n  const dispatch = useRQB_INTERNAL_QueryBuilderDispatch();\n  if (process.env.NODE_ENV !== 'production' && logWarning) {\n    if (type === 'independentCombinators') {\n      if (otherParams === 'invalid') {\n        dispatch(rqbWarn(messages.errorInvalidIndependentCombinatorsProp));\n      }\n\n      if (otherParams === 'unnecessary') {\n        dispatch(rqbWarn(messages.errorUnnecessaryIndependentCombinatorsProp));\n      }\n    }\n\n    if (type === 'rule') {\n      dispatch(rqbWarn(messages.errorDeprecatedRuleProps));\n    }\n\n    if (type === 'ruleGroup') {\n      dispatch(rqbWarn(messages.errorDeprecatedRuleGroupProps));\n    }\n  }\n}\n\nexport { useDeprecatedProps };\n","import type { ComponentType, ForwardRefExoticComponent, RefAttributes } from 'react';\nimport { forwardRef, useContext, useMemo } from 'react';\nimport { QueryBuilderContext, defaultControlElements } from '../components';\nimport { defaultControlClassnames, defaultTranslations } from '../defaults';\nimport type {\n  Controls,\n  FullField,\n  FieldSelectorProps,\n  OperatorSelectorProps,\n  QueryBuilderContextProps,\n  TranslationsFull,\n  ValueSourceSelectorProps,\n  ControlElementsProp,\n  DragHandleProps,\n} from '../types';\nimport { mergeClassnames, mergeTranslations } from '../utils';\nimport { usePreferProp } from './usePreferProp';\n\nexport type UseMergedContextProps<\n  F extends FullField = FullField,\n  O extends string = string,\n> = QueryBuilderContextProps<F, O>;\n\nconst nullComp = () => null;\nconst nullFwdComp: ForwardRefExoticComponent<DragHandleProps & RefAttributes<HTMLElement>> =\n  forwardRef(nullComp);\n\n/**\n * Merges inherited context values with props, giving precedence to props.\n */\nexport const useMergedContext = <F extends FullField = FullField, O extends string = string>(\n  props: UseMergedContextProps<F, O>\n) => {\n  const rqbContext = useContext(QueryBuilderContext) as QueryBuilderContextProps<F, O>;\n  // as ContextType<Context<QueryBuilderContextProps<any, any>>>;\n\n  const enableMountQueryChange = usePreferProp(\n    true,\n    props.enableMountQueryChange,\n    rqbContext.enableMountQueryChange\n  );\n\n  // Drag-and-drop should be disabled if context sets it to false because\n  // QueryBuilderDnD might not have loaded react-dnd yet. Therefore we prefer\n  // the prop here only if context is true or undefined.\n  const enableDragAndDrop =\n    usePreferProp(false, props.enableDragAndDrop, rqbContext.enableDragAndDrop) &&\n    rqbContext.enableDragAndDrop !== false;\n\n  const debugMode = usePreferProp(false, props.debugMode, rqbContext.debugMode);\n\n  const controlClassnames = useMemo(\n    () =>\n      mergeClassnames(\n        defaultControlClassnames,\n        rqbContext.controlClassnames,\n        props.controlClassnames\n      ),\n    [rqbContext.controlClassnames, props.controlClassnames]\n  );\n\n  const controlElements = useMemo(() => {\n    const contextControlElements: ControlElementsProp<F, O> = {\n      ...rqbContext.controlElements,\n      ...(rqbContext.controlElements?.dragHandle === null ? { dragHandle: nullFwdComp } : {}),\n      ...(rqbContext.controlElements?.inlineCombinator === null\n        ? { inlineCombinator: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.notToggle === null ? { notToggle: nullComp } : {}),\n      ...(rqbContext.controlElements?.shiftActions === null ? { shiftActions: nullComp } : {}),\n      ...(rqbContext.controlElements?.valueEditor === null ? { valueEditor: nullComp } : {}),\n      ...(rqbContext.controlElements?.valueSourceSelector === null\n        ? { valueSourceSelector: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.addGroupAction === null ? { addGroupAction: nullComp } : {}),\n      ...(rqbContext.controlElements?.addRuleAction === null ? { addRuleAction: nullComp } : {}),\n      ...(rqbContext.controlElements?.cloneGroupAction === null\n        ? { cloneGroupAction: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.cloneRuleAction === null\n        ? { cloneRuleAction: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.lockGroupAction === null\n        ? { lockGroupAction: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.lockRuleAction === null ? { lockRuleAction: nullComp } : {}),\n      ...(rqbContext.controlElements?.removeGroupAction === null\n        ? { removeGroupAction: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.removeRuleAction === null\n        ? { removeRuleAction: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.combinatorSelector === null\n        ? { combinatorSelector: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.fieldSelector === null ? { fieldSelector: nullComp } : {}),\n      ...(rqbContext.controlElements?.operatorSelector === null\n        ? { operatorSelector: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.valueSourceSelector === null\n        ? { valueSourceSelector: nullComp }\n        : {}),\n      ...(rqbContext.controlElements?.actionElement\n        ? {\n            addGroupAction:\n              rqbContext.controlElements?.addGroupAction === null\n                ? nullComp\n                : rqbContext.controlElements?.addGroupAction ??\n                  rqbContext.controlElements.actionElement,\n            addRuleAction:\n              rqbContext.controlElements?.addRuleAction === null\n                ? nullComp\n                : rqbContext.controlElements?.addRuleAction ??\n                  rqbContext.controlElements.actionElement,\n            cloneGroupAction:\n              rqbContext.controlElements?.cloneGroupAction === null\n                ? nullComp\n                : rqbContext.controlElements?.cloneGroupAction ??\n                  rqbContext.controlElements.actionElement,\n            cloneRuleAction:\n              rqbContext.controlElements?.cloneRuleAction === null\n                ? nullComp\n                : rqbContext.controlElements?.cloneRuleAction ??\n                  rqbContext.controlElements.actionElement,\n            lockGroupAction:\n              rqbContext.controlElements?.lockGroupAction === null\n                ? nullComp\n                : rqbContext.controlElements?.lockGroupAction ??\n                  rqbContext.controlElements.actionElement,\n            lockRuleAction:\n              rqbContext.controlElements?.lockRuleAction === null\n                ? nullComp\n                : rqbContext.controlElements?.lockRuleAction ??\n                  rqbContext.controlElements.actionElement,\n            removeGroupAction:\n              rqbContext.controlElements?.removeGroupAction === null\n                ? nullComp\n                : rqbContext.controlElements?.removeGroupAction ??\n                  rqbContext.controlElements.actionElement,\n            removeRuleAction:\n              rqbContext.controlElements?.removeRuleAction === null\n                ? nullComp\n                : rqbContext.controlElements?.removeRuleAction ??\n                  rqbContext.controlElements.actionElement,\n          }\n        : {}),\n      ...(rqbContext.controlElements?.valueSelector\n        ? {\n            combinatorSelector:\n              rqbContext.controlElements?.combinatorSelector === null\n                ? nullComp\n                : rqbContext.controlElements?.combinatorSelector ??\n                  rqbContext.controlElements.valueSelector,\n            fieldSelector:\n              rqbContext.controlElements?.fieldSelector === null\n                ? nullComp\n                : rqbContext.controlElements?.fieldSelector ??\n                  (rqbContext.controlElements.valueSelector as unknown as ComponentType<\n                    FieldSelectorProps<F>\n                  >),\n            operatorSelector:\n              rqbContext.controlElements?.operatorSelector === null\n                ? nullComp\n                : rqbContext.controlElements?.operatorSelector ??\n                  (rqbContext.controlElements\n                    .valueSelector as ComponentType<OperatorSelectorProps>),\n            valueSourceSelector:\n              rqbContext.controlElements?.valueSourceSelector === null\n                ? nullComp\n                : rqbContext.controlElements?.valueSourceSelector ??\n                  (rqbContext.controlElements\n                    .valueSelector as ComponentType<ValueSourceSelectorProps>),\n          }\n        : {}),\n    };\n\n    const propsControlElements: ControlElementsProp<F, O> = {\n      ...props.controlElements,\n      ...(props.controlElements?.dragHandle === null ? { dragHandle: nullFwdComp } : {}),\n      ...(props.controlElements?.inlineCombinator === null ? { inlineCombinator: nullComp } : {}),\n      ...(props.controlElements?.notToggle === null ? { notToggle: nullComp } : {}),\n      ...(props.controlElements?.shiftActions === null ? { shiftActions: nullComp } : {}),\n      ...(props.controlElements?.valueEditor === null ? { valueEditor: nullComp } : {}),\n      ...(props.controlElements?.valueSourceSelector === null\n        ? { valueSourceSelector: nullComp }\n        : {}),\n      ...(props.controlElements?.addGroupAction === null ? { addGroupAction: nullComp } : {}),\n      ...(props.controlElements?.addRuleAction === null ? { addRuleAction: nullComp } : {}),\n      ...(props.controlElements?.cloneGroupAction === null ? { cloneGroupAction: nullComp } : {}),\n      ...(props.controlElements?.cloneRuleAction === null ? { cloneRuleAction: nullComp } : {}),\n      ...(props.controlElements?.lockGroupAction === null ? { lockGroupAction: nullComp } : {}),\n      ...(props.controlElements?.lockRuleAction === null ? { lockRuleAction: nullComp } : {}),\n      ...(props.controlElements?.removeGroupAction === null ? { removeGroupAction: nullComp } : {}),\n      ...(props.controlElements?.removeRuleAction === null ? { removeRuleAction: nullComp } : {}),\n      ...(props.controlElements?.combinatorSelector === null\n        ? { combinatorSelector: nullComp }\n        : {}),\n      ...(props.controlElements?.fieldSelector === null ? { fieldSelector: nullComp } : {}),\n      ...(props.controlElements?.operatorSelector === null ? { operatorSelector: nullComp } : {}),\n      ...(props.controlElements?.valueSourceSelector === null\n        ? { valueSourceSelector: nullComp }\n        : {}),\n      ...(props.controlElements?.actionElement\n        ? {\n            addGroupAction:\n              props.controlElements?.addGroupAction === null\n                ? nullComp\n                : props.controlElements?.addGroupAction ?? props.controlElements.actionElement,\n            addRuleAction:\n              props.controlElements?.addRuleAction === null\n                ? nullComp\n                : props.controlElements?.addRuleAction ?? props.controlElements.actionElement,\n            cloneGroupAction:\n              props.controlElements?.cloneGroupAction === null\n                ? nullComp\n                : props.controlElements?.cloneGroupAction ?? props.controlElements.actionElement,\n            cloneRuleAction:\n              props.controlElements?.cloneRuleAction === null\n                ? nullComp\n                : props.controlElements?.cloneRuleAction ?? props.controlElements.actionElement,\n            lockGroupAction:\n              props.controlElements?.lockGroupAction === null\n                ? nullComp\n                : props.controlElements?.lockGroupAction ?? props.controlElements.actionElement,\n            lockRuleAction:\n              props.controlElements?.lockRuleAction === null\n                ? nullComp\n                : props.controlElements?.lockRuleAction ?? props.controlElements.actionElement,\n            removeGroupAction:\n              props.controlElements?.removeGroupAction === null\n                ? nullComp\n                : props.controlElements?.removeGroupAction ?? props.controlElements.actionElement,\n            removeRuleAction:\n              props.controlElements?.removeRuleAction === null\n                ? nullComp\n                : props.controlElements?.removeRuleAction ?? props.controlElements.actionElement,\n          }\n        : {}),\n      ...(props.controlElements?.valueSelector\n        ? {\n            combinatorSelector:\n              props.controlElements?.combinatorSelector === null\n                ? nullComp\n                : props.controlElements?.combinatorSelector ?? props.controlElements.valueSelector,\n            fieldSelector:\n              props.controlElements?.fieldSelector === null\n                ? nullComp\n                : props.controlElements?.fieldSelector ??\n                  (props.controlElements.valueSelector as unknown as ComponentType<\n                    FieldSelectorProps<F>\n                  >),\n            operatorSelector:\n              props.controlElements?.operatorSelector === null\n                ? nullComp\n                : props.controlElements?.operatorSelector ??\n                  (props.controlElements.valueSelector as ComponentType<OperatorSelectorProps>),\n            valueSourceSelector:\n              props.controlElements?.valueSourceSelector === null\n                ? nullComp\n                : props.controlElements?.valueSourceSelector ??\n                  (props.controlElements.valueSelector as ComponentType<ValueSourceSelectorProps>),\n          }\n        : {}),\n    };\n\n    return {\n      ...defaultControlElements,\n      ...contextControlElements,\n      ...propsControlElements,\n    } as Controls<F, O>;\n  }, [props.controlElements, rqbContext.controlElements]);\n\n  const translations = useMemo(\n    () =>\n      mergeTranslations(\n        defaultTranslations,\n        rqbContext.translations,\n        props.translations\n      ) as TranslationsFull,\n    [props.translations, rqbContext.translations]\n  );\n\n  const {\n    controlClassnames: _controlClassnames,\n    controlElements: _controlElements,\n    debugMode: _debugMode,\n    enableDragAndDrop: _enableDragAndDrop,\n    enableMountQueryChange: _enableMountQueryChange,\n    translations: _translations,\n    ...otherContext\n  } = rqbContext;\n\n  return {\n    controlClassnames,\n    controlElements,\n    debugMode,\n    enableDragAndDrop,\n    enableMountQueryChange,\n    translations,\n    ...otherContext,\n  };\n};\n","import { defaultJoinChar } from '../defaults';\n\n/**\n * Splits a string by a given character (see {@link defaultJoinChar}. Escaped characters\n * (characters preceded by a backslash) will not apply to the split, and the backslash will\n * be removed in the array element. Inverse of {@link joinWith}.\n *\n * @example\n * splitBy('this\\\\,\\\\,that,,the other,,,\\\\,')\n * // or\n * splitBy('this\\\\,\\\\,that,,the other,,,\\\\,', ',')\n * // would return\n * ['this,,that', '', 'the other', '', '', ',']\n */\nexport const splitBy = (str?: string, splitChar = defaultJoinChar) =>\n  typeof str === 'string'\n    ? str\n        .split(`\\\\${splitChar}`)\n        .map(c => c.split(splitChar))\n        .reduce((prev, curr, idx) => {\n          if (idx === 0) {\n            return curr;\n          }\n          return [\n            ...prev.slice(0, prev.length - 1),\n            `${prev[prev.length - 1]}${splitChar}${curr[0]}`,\n            ...curr.slice(1),\n          ];\n        }, [])\n    : [];\n\n/**\n * Joins an array of strings using the given character (see {@link defaultJoinChar}. When\n * the given character appears in an array element, a backslash will be added just before it\n * to distinguish it from the join character. Inverse of {@link splitBy}.\n *\n * @example\n * joinWith(['this,,that', '', 'the other', '', '', ','])\n * // would return\n * 'this\\\\,\\\\,that,,the other,,,\\\\,'\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const joinWith = (strArr: any[], joinChar = defaultJoinChar) =>\n  strArr.map(str => `${str ?? ''}`.replaceAll(joinChar, `\\\\${joinChar}`)).join(joinChar);\n\n/**\n * Trims the value if it is a string. Otherwise returns the value as is.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const trimIfString = (val: any) => (typeof val === 'string' ? val.trim() : val);\n\n/**\n * Splits a string by comma then trims each element. Arrays are returned as is except\n * any string elements are trimmed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const toArray = (v: any) =>\n  Array.isArray(v)\n    ? v.map(trimIfString)\n    : typeof v === 'string'\n      ? splitBy(v, defaultJoinChar)\n          .filter(s => !/^\\s*$/.test(s))\n          .map(s => s.trim())\n      : typeof v === 'number'\n        ? [v]\n        : [];\n\n/**\n * Determines if an array is free of `null`/`undefined`.\n */\nexport const nullFreeArray = <T>(arr: T[]): arr is Exclude<T, null>[] =>\n  arr.every(el => el === false || (el ?? false) !== false);\n","import { numericRegex as numericQuantityRegex } from 'numeric-quantity';\n\n/**\n * Regex matching numeric strings. Passes for positive/negative integers, decimals,\n * and E notation, with optional surrounding whitespace.\n */\nexport const numericRegex = new RegExp(\n  numericQuantityRegex.source.replace(/^\\^/, '^\\\\s*').replace(/\\$$/, '\\\\s*$')\n);\n\n/**\n * Determines if a variable is a plain old JavaScript object, aka POJO.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isPojo = (obj: any): obj is Record<string, any> =>\n  obj === null || typeof obj !== 'object' ? false : Object.getPrototypeOf(obj) === Object.prototype;\n","import type { RuleGroupType, RuleGroupTypeAny, RuleGroupTypeIC } from '../types/index.noReact';\nimport { isPojo } from './misc';\n\n/**\n * Determines if an object is a {@link RuleGroupType} or {@link RuleGroupTypeIC}.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isRuleGroup = (rg: any): rg is RuleGroupTypeAny =>\n  isPojo(rg) && 'rules' in rg && Array.isArray(rg.rules);\n\n/**\n * Determines if an object is a {@link RuleGroupType}.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isRuleGroupType = (rg: any): rg is RuleGroupType =>\n  isRuleGroup(rg) && typeof rg.combinator === 'string';\n\n/**\n * Determines if an object is a {@link RuleGroupTypeIC}.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isRuleGroupTypeIC = (rg: any): rg is RuleGroupTypeIC =>\n  isRuleGroup(rg) && typeof rg.combinator === 'undefined';\n","import type {\n  RuleGroupArray,\n  RuleGroupICArray,\n  RuleGroupType,\n  RuleGroupTypeIC,\n  RuleType,\n} from '../types/index.noReact';\nimport { isRuleGroup, isRuleGroupType, isRuleGroupTypeIC } from './isRuleGroup';\n\nconst processRuleOrStringOrRuleGroupIC = (r: string | RuleType | RuleGroupTypeIC) =>\n  isRuleGroup(r) ? generateRuleGroupICWithConsistentCombinators(r) : r;\n\nconst generateRuleGroupICWithConsistentCombinators = (rg: RuleGroupTypeIC): RuleGroupTypeIC => {\n  const returnArray: RuleGroupICArray = [];\n  const push = (r: string | RuleType | RuleGroupTypeIC) =>\n    returnArray.push(processRuleOrStringOrRuleGroupIC(r) as RuleType | RuleGroupTypeIC);\n  let startIndex = 0;\n  for (let i = 0; i < rg.rules.length; i += 2) {\n    if (rg.rules.length === 1) {\n      push(rg.rules[0]);\n    } else if (rg.rules[i + 1] === 'and') {\n      startIndex = i;\n      let j = 1;\n      while (rg.rules[startIndex + j] === 'and') {\n        i += 2;\n        j += 2;\n      }\n      returnArray.push({\n        // @ts-expect-error Too complicated to keep track of odd/even indexes in TS\n        rules: rg.rules.slice(startIndex, i + 1).map(processRuleOrStringOrRuleGroupIC),\n      });\n      i -= 2;\n    } else if (rg.rules[i + 1] === 'or') {\n      if (i === 0 || i === rg.rules.length - 3) {\n        if (i === 0 || rg.rules[i - 1] === 'or') {\n          push(rg.rules[i]);\n        }\n        push(rg.rules[i + 1]);\n        if (i === rg.rules.length - 3) {\n          push(rg.rules[i + 2]);\n        }\n      } else {\n        if (rg.rules[i - 1] === 'and') {\n          push(rg.rules[i + 1]);\n        } else {\n          push(rg.rules[i]);\n          push(rg.rules[i + 1]);\n        }\n      }\n    }\n  }\n  if (\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error TS still thinks returnArray has length 0\n    returnArray.length === 1 &&\n    typeof returnArray[0] === 'object' &&\n    isRuleGroup(returnArray[0])\n  ) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error TS still thinks returnArray has length 0\n    return { ...rg, ...returnArray[0] };\n  }\n  return { ...rg, rules: returnArray };\n};\n\n/**\n * Converts a {@link RuleGroupTypeIC} to {@link RuleGroupType}.\n *\n * This function is idempotent: {@link RuleGroupType} queries will be\n * returned as-is.\n */\nexport const convertFromIC = <RG extends RuleGroupType = RuleGroupType>(\n  rg: RuleGroupTypeIC\n): RG => {\n  if (isRuleGroupType(rg)) {\n    return rg;\n  }\n  const processedRG = generateRuleGroupICWithConsistentCombinators(rg);\n  const rulesAsMixedList = processedRG.rules.map(r =>\n    typeof r === 'string' || !isRuleGroup(r) ? r : convertFromIC(r)\n  );\n  const combinator = rulesAsMixedList.length < 2 ? 'and' : (rulesAsMixedList[1] as string);\n  const rules = rulesAsMixedList.filter(r => typeof r !== 'string') as RuleGroupArray;\n  return { ...processedRG, combinator, rules } as RG;\n};\n\n/**\n * Converts a {@link RuleGroupType} to {@link RuleGroupTypeIC}.\n *\n * This function is idempotent: {@link RuleGroupTypeIC} queries will be\n * returned as-is.\n */\nexport const convertToIC = <RGIC extends RuleGroupTypeIC = RuleGroupTypeIC>(\n  rg: RuleGroupType\n): RGIC => {\n  if (isRuleGroupTypeIC(rg)) {\n    return rg;\n  }\n  const { combinator, ...queryWithoutCombinator } = rg;\n  const rules: (RuleGroupTypeIC | RuleType | string)[] = [];\n  const { length } = rg.rules;\n  rg.rules.forEach((r, idx) => {\n    if (isRuleGroup(r)) {\n      rules.push(convertToIC(r));\n    } else {\n      rules.push(r);\n    }\n    if (combinator && idx < length - 1) {\n      rules.push(combinator);\n    }\n  });\n  return { ...queryWithoutCombinator, rules } as RGIC;\n};\n\n/**\n * Converts a {@link RuleGroupType} to {@link RuleGroupTypeIC}. For a more explicit\n * operation, use {@link convertToIC}.\n */\nfunction convertQuery(query: RuleGroupType): RuleGroupTypeIC;\n/**\n * Converts a {@link RuleGroupTypeIC} to {@link RuleGroupType}. For a more explicit\n * operation, use {@link convertFromIC}.\n */\nfunction convertQuery(query: RuleGroupTypeIC): RuleGroupType;\nfunction convertQuery(query: RuleGroupType | RuleGroupTypeIC): RuleGroupType | RuleGroupTypeIC {\n  return isRuleGroupTypeIC(query) ? convertFromIC(query) : convertToIC(query);\n}\n\nexport { convertQuery };\n","import { defaultCombinators, groupInvalidReasons } from '../defaults';\nimport type {\n  QueryValidator,\n  RuleGroupTypeAny,\n  RuleType,\n  ValidationMap,\n} from '../types/index.noReact';\nimport { isRuleGroup, isRuleGroupType } from './isRuleGroup';\n\n/**\n * This is an example validation function you can pass to {@link QueryBuilder} in the\n * `validator` prop. It assumes that you want to validate groups, and has a no-op\n * for validating rules which you can replace with your own implementation.\n */\nexport const defaultValidator: QueryValidator = query => {\n  const result: ValidationMap = {};\n\n  const validateRule = (_rule: RuleType) => {\n    // Replace this with your custom implementation.\n    // Inside this function, set `result[_rule.id] = true` for a valid\n    // rule, or `{ valid: false, reasons: ['your', 'reasons', 'here'] }`\n    // for an invalid rule.\n  };\n\n  const validateGroup = (rg: RuleGroupTypeAny) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const reasons: any[] = [];\n    if (rg.rules.length === 0) {\n      reasons.push(groupInvalidReasons.empty);\n    } else if (!isRuleGroupType(rg)) {\n      // Odd indexes should be valid combinators and even indexes should be rules or groups\n      let invalidICs = false;\n      for (let i = 0; i < rg.rules.length && !invalidICs; i++) {\n        if (\n          (i % 2 === 0 && typeof rg.rules[i] === 'string') ||\n          (i % 2 === 1 && typeof rg.rules[i] !== 'string') ||\n          (i % 2 === 1 &&\n            typeof rg.rules[i] === 'string' &&\n            !defaultCombinators.map(c => c.name as string).includes(rg.rules[i] as string))\n        ) {\n          invalidICs = true;\n        }\n      }\n      if (invalidICs) {\n        reasons.push(groupInvalidReasons.invalidIndependentCombinators);\n      }\n    }\n    // Non-independent combinators should be valid, but only checked if there are multiple rules\n    // since combinators don't really apply to groups with only one rule/group\n    if (\n      isRuleGroupType(rg) &&\n      !defaultCombinators.map(c => c.name as string).includes(rg.combinator) &&\n      rg.rules.length > 1\n    ) {\n      reasons.push(groupInvalidReasons.invalidCombinator);\n    }\n    /* istanbul ignore else */\n    if (rg.id) {\n      if (reasons.length) {\n        result[rg.id] = { valid: false, reasons };\n      } else {\n        result[rg.id] = true;\n      }\n    }\n    rg.rules.forEach(r => {\n      if (typeof r === 'string') {\n        // Validation for this case was done earlier\n      } else if (isRuleGroup(r)) {\n        validateGroup(r);\n      } else {\n        validateRule(r);\n      }\n    });\n  };\n\n  validateGroup(query);\n\n  return result;\n  // You can return the result object itself like above, or if you just\n  // want the entire query to be marked invalid if _any_ rules/groups are\n  // invalid, return a boolean like this:\n  //   return Object.values(result).map(rv => (typeof rv !== 'boolean')).includes(true);\n  // That will return `true` if no errors were found.\n};\n","import { produce } from 'immer';\nimport type {\n  BaseOption,\n  BaseOptionMap,\n  FlexibleOption,\n  FlexibleOptionList,\n  FullOptionList,\n  Option,\n  ToFullOption,\n  ValueOption,\n} from '../types';\nimport { isPojo } from './misc';\nimport { isFlexibleOptionGroupArray } from './optGroupUtils';\n\nconst isOptionWithName = (opt: BaseOption): opt is Option =>\n  isPojo(opt) && 'name' in opt && typeof opt.name === 'string';\nconst isOptionWithValue = (opt: BaseOption): opt is ValueOption =>\n  isPojo(opt) && 'value' in opt && typeof opt.value === 'string';\n\n/**\n * Converts an {@link Option} or {@link ValueOption} (i.e., {@link BaseOption})\n * into a {@link FullOption}. Full options are left unchanged.\n */\nfunction toFullOption<Opt extends BaseOption>(\n  opt: Opt,\n  baseProperties?: Record<string, unknown>\n): ToFullOption<Opt> {\n  const recipe: (o: Opt) => ToFullOption<Opt> = produce(draft => {\n    const idObj: { name?: string; value?: string } = {};\n    let needsUpdating = !!baseProperties;\n\n    if (isOptionWithName(draft) && !isOptionWithValue(draft)) {\n      idObj.value = draft.name;\n      needsUpdating = true;\n    } else if (!isOptionWithName(draft) && isOptionWithValue(draft)) {\n      idObj.name = draft.value;\n      needsUpdating = true;\n    }\n\n    if (needsUpdating) {\n      return Object.assign({}, baseProperties, draft, idObj);\n    }\n  });\n  return recipe(opt);\n}\n\n/**\n * Converts an {@link OptionList} or {@link FlexibleOptionList} into a {@link FullOptionList}.\n * Lists of full options are left unchanged.\n */\nfunction toFullOptionList<Opt extends BaseOption, OptList extends FlexibleOptionList<Opt>>(\n  optList: OptList,\n  baseProperties?: Record<string, unknown>\n): FullOptionList<Opt> {\n  if (!Array.isArray(optList)) {\n    return [] as unknown as FullOptionList<Opt>;\n  }\n\n  const recipe: (ol: FlexibleOptionList<Opt>) => FullOptionList<Opt> = produce(draft => {\n    if (isFlexibleOptionGroupArray(draft)) {\n      for (const optGroup of draft) {\n        optGroup.options.forEach(\n          (opt, idx) => (optGroup.options[idx] = toFullOption(opt, baseProperties))\n        );\n      }\n    } else {\n      (draft as Opt[]).forEach((opt, idx) => (draft[idx] = toFullOption(opt, baseProperties)));\n    }\n  });\n\n  return recipe(optList);\n}\n\n/**\n * Converts a {@link FlexibleOptionList} into a {@link FullOptionList}.\n * Lists of full options are left unchanged.\n */\nfunction toFullOptionMap<OptMap extends BaseOptionMap>(\n  optMap: OptMap,\n  baseProperties?: Record<string, unknown>\n): OptMap extends BaseOptionMap<infer V, infer K> ? Partial<Record<K, ToFullOption<V>>> : never {\n  type FullOptMapType =\n    OptMap extends BaseOptionMap<infer VT, infer KT>\n      ? Partial<Record<KT, ToFullOption<VT>>>\n      : never;\n\n  return Object.fromEntries(\n    (Object.entries(optMap) as [string, FlexibleOption][]).map(([k, v]) => [\n      k,\n      toFullOption(v, baseProperties),\n    ])\n  ) as FullOptMapType;\n}\n\nexport { toFullOption, toFullOptionList, toFullOptionMap };\n","import type { RequireAtLeastOne } from 'type-fest';\nimport type {\n  BaseOption,\n  FlexibleOptionGroup,\n  FlexibleOptionList,\n  OptionGroup,\n  ToFullOption,\n  WithUnknownIndex,\n} from '../types/index.noReact';\nimport { isFlexibleOptionGroupArray } from './optGroupUtils';\nimport { toFullOption } from './toFullOption';\n\n/**\n * @deprecated Renamed to {@link uniqByIdentifier}.\n */\nexport const uniqByName = <\n  T extends { name: string; value?: string } | { name?: string; value: string },\n>(\n  originalArray: T[]\n): T[] => uniqByIdentifier(originalArray);\n\n/**\n * Generates a new array of objects with duplicates removed based\n * on the identifying property (`value` or `name`)\n */\nexport const uniqByIdentifier = <\n  T extends RequireAtLeastOne<{ name: string; value: string }, 'name' | 'value'>,\n>(\n  originalArray: T[]\n): T[] => {\n  const names = new Set<string>();\n  const newArray: T[] = [];\n  originalArray.forEach(el => {\n    if (!names.has((el.value ?? el.name)!)) {\n      names.add((el.value ?? el.name)!);\n      newArray.push(el);\n    }\n  });\n  return originalArray.length === newArray.length ? originalArray : newArray;\n};\n\n/**\n * Generates a new {@link OptionGroup} array with duplicates\n * removed based on the identifying property (`value` or `name`).\n */\nexport const uniqOptGroups = <T extends BaseOption>(\n  originalArray: FlexibleOptionGroup<T>[]\n): OptionGroup<ToFullOption<T>>[] => {\n  type K = T extends BaseOption<infer KT> ? KT : never;\n  const labels = new Set<string>();\n  const names = new Set<K>();\n  const newArray: OptionGroup<ToFullOption<T>>[] = [];\n  originalArray.forEach(el => {\n    if (!labels.has(el.label)) {\n      labels.add(el.label);\n      const optionsForThisGroup: WithUnknownIndex<ToFullOption<T>>[] = [];\n      el.options.forEach(opt => {\n        if (!names.has((opt.value ?? opt.name) as K)) {\n          names.add((opt.value ?? opt.name) as K);\n          optionsForThisGroup.push(toFullOption(opt) as WithUnknownIndex<ToFullOption<T>>);\n        }\n      });\n      newArray.push({ ...el, options: optionsForThisGroup });\n    }\n  });\n  return newArray;\n};\n\n/**\n * Generates a new {@link Option} or {@link OptionGroup} array with duplicates\n * removed based on the identifier property (`value` or `name`).\n */\nexport const uniqOptList = <T extends BaseOption>(originalArray: FlexibleOptionList<T>) => {\n  if (isFlexibleOptionGroupArray(originalArray)) {\n    return uniqOptGroups(originalArray) as OptionGroup<ToFullOption<T>>[];\n  }\n  return uniqByIdentifier((originalArray as BaseOption[]).map(o => toFullOption(o)));\n};\n","import type {\n  BaseOption,\n  FlexibleOptionGroup,\n  FullOption,\n  FullOptionList,\n  GetOptionIdentifierType,\n  Option,\n  OptionGroup,\n  OptionList,\n} from '../types/index.noReact';\nimport { isPojo } from './misc';\nimport { uniqByIdentifier } from './uniq';\n\n/**\n * Determines if an {@link OptionList} is an {@link OptionGroup} array.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isOptionGroupArray = (arr: any): arr is OptionGroup<BaseOption>[] =>\n  Array.isArray(arr) && arr.length > 0 && isPojo(arr[0]) && 'options' in arr[0];\n\n/**\n * Determines if a {@link FlexibleOptionList} is a {@link FlexibleOptionGroup} array.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isFlexibleOptionGroupArray = (arr: any): arr is FlexibleOptionGroup[] =>\n  Array.isArray(arr) &&\n  arr.length > 0 &&\n  isPojo(arr[0]) &&\n  'options' in arr[0] &&\n  isPojo(arr[0].options[0]) &&\n  ('name' in arr[0].options[0] || 'value' in arr[0].options[0]);\n\n/**\n * Determines if a {@link FlexibleOptionList} is a {@link OptionGroup} array of\n * {@link FullOption}.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isFullOptionGroupArray = (arr: any): arr is OptionGroup<FullOption>[] =>\n  Array.isArray(arr) &&\n  arr.length > 0 &&\n  isPojo(arr[0]) &&\n  'options' in arr[0] &&\n  isPojo(arr[0].options[0]) &&\n  'name' in arr[0].options[0] &&\n  isPojo(arr[0].options[0]) &&\n  'value' in arr[0].options[0];\n\n/**\n * Gets the option from an {@link OptionList} with the given `name`. Handles\n * {@link Option} arrays as well as {@link OptionGroup} arrays.\n */\nexport const getOption = <OptType extends Option = Option>(\n  arr: OptionList<OptType>,\n  name: string\n): OptType | undefined =>\n  (isOptionGroupArray(arr) ? arr.flatMap(og => og.options) : arr).find(op => op.name === name);\n\n/**\n * Gets the first option from an {@link OptionList}.\n */\nexport const getFirstOption = <Opt extends BaseOption>(arr?: FlexibleOptionGroup<Opt>[] | Opt[]) =>\n  (!Array.isArray(arr) || arr.length === 0\n    ? null\n    : isFlexibleOptionGroupArray(arr)\n      ? arr[0].options[0].value ?? arr[0].options[0].name\n      : arr[0].value ?? arr[0].name) as GetOptionIdentifierType<Opt>;\n\n/**\n * Flattens {@link FlexibleOptionGroup} arrays into {@link BaseOption} arrays.\n * If the array is already flat, it is returned as is.\n */\nexport const toFlatOptionArray = <T extends FullOption, OL extends FullOptionList<T>>(arr: OL) =>\n  uniqByIdentifier(isOptionGroupArray(arr) ? arr.flatMap(og => og.options) : arr) as T[];\n","import type { FullField, OptionList } from '../types/index.noReact';\nimport { isFlexibleOptionGroupArray } from './optGroupUtils';\nimport { toFullOption } from './toFullOption';\n\nconst filterByComparator = (field: FullField, operator: string, fieldToCompare: FullField) => {\n  const fullField = toFullOption(field);\n  const fullFieldToCompare = toFullOption(fieldToCompare);\n  if (fullField.value === fullFieldToCompare.value) {\n    return false;\n  }\n  if (typeof fullField.comparator === 'string') {\n    return fullField[fullField.comparator] === fullFieldToCompare[fullField.comparator];\n  }\n  return fullField.comparator?.(fullFieldToCompare, operator) ?? /* istanbul ignore next */ false;\n};\n\n/**\n * For a given {@link FullField}, returns the `fields` list filtered for\n * other fields that match by `comparator`. Only fields *other than the\n * one in question* will ever be included, even if `comparator` is `null`\n * or `undefined`. If `comparator` is a string, fields with the same value\n * for that property will be included. If `comparator` is a function, each\n * field will be passed to the function along with the `operator` and fields\n * for which the function returns `true` will be included.\n */\nexport const filterFieldsByComparator = (\n  /** The field in question. */\n  field: FullField,\n  /** The full {@link FullField} list to be filtered. */\n  fields: OptionList<FullField>,\n  operator: string\n) => {\n  if (!field.comparator) {\n    const filterOutSameField = (f: FullField) =>\n      (f.value ?? /* istanbul ignore next */ f.name) !==\n      (field.value ?? /* istanbul ignore next */ field.name);\n    if (isFlexibleOptionGroupArray(fields)) {\n      return fields.map(og => ({\n        ...og,\n        options: og.options.filter(filterOutSameField),\n      }));\n    }\n    return fields.filter(filterOutSameField);\n  }\n\n  if (isFlexibleOptionGroupArray(fields)) {\n    return fields\n      .map(og => ({\n        ...og,\n        options: og.options.filter(f => filterByComparator(field, operator, f)),\n      }))\n      .filter(og => og.options.length > 0);\n  }\n\n  return fields.filter(f => filterByComparator(field, operator, f));\n};\n","import { numericQuantity } from 'numeric-quantity';\nimport type { ParseNumbersMethod } from '../types/index.noReact';\n\n/**\n * Options object for {@link parseNumber}.\n */\nexport interface ParseNumberOptions {\n  parseNumbers?: ParseNumbersMethod;\n}\n\n/**\n * Converts a string to a number. Uses native `parseFloat` if `parseNumbers` is \"native\",\n * otherwise uses [`numeric-quantity`](https://jakeboone02.github.io/numeric-quantity/).\n * If that returns `NaN`, the string is returned unchanged. Numeric values are returned\n * as-is regardless of the `parseNumbers` option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const parseNumber = (v: any, pno: ParseNumberOptions = {}) => {\n  if (!pno.parseNumbers || typeof v === 'bigint' || typeof v === 'number') {\n    return v;\n  }\n  if (pno.parseNumbers === 'native') {\n    return parseFloat(v);\n  }\n  const n =\n    // TODO: Should these options be configurable?\n    numericQuantity(v, {\n      allowTrailingInvalid: pno.parseNumbers === 'enhanced',\n      romanNumerals: true,\n      round: false,\n    });\n  return isNaN(n) ? v : n;\n};\n","import type {\n  DefaultCombinatorName,\n  RuleGroupTypeAny,\n  ValueProcessorByRule,\n  ValueProcessorLegacy,\n} from '../../types/index.noReact';\nimport { isRuleGroup } from '../isRuleGroup';\nimport { numericRegex } from '../misc';\nimport { parseNumber } from '../parseNumber';\n\nexport const mapSQLOperator = (op: string) => {\n  switch (op.toLowerCase()) {\n    case 'null':\n      return 'is null';\n    case 'notnull':\n      return 'is not null';\n    case 'notin':\n      return 'not in';\n    case 'notbetween':\n      return 'not between';\n    case 'contains':\n    case 'beginswith':\n    case 'endswith':\n      return 'like';\n    case 'doesnotcontain':\n    case 'doesnotbeginwith':\n    case 'doesnotendwith':\n      return 'not like';\n    default:\n      return op;\n  }\n};\n\nexport const mongoOperators = {\n  '=': '$eq',\n  '!=': '$ne',\n  '<': '$lt',\n  '<=': '$lte',\n  '>': '$gt',\n  '>=': '$gte',\n  in: '$in',\n  notIn: '$nin',\n};\n\nexport const celCombinatorMap = {\n  and: '&&',\n  or: '||',\n} satisfies Record<DefaultCombinatorName, '&&' | '||'>;\n\n/**\n * Register these operators with `jsonLogic` before applying the result\n * of `formatQuery(query, 'jsonlogic')`.\n *\n * @example\n * ```\n * for (const [op, func] of Object.entries(jsonLogicAdditionalOperators)) {\n *   jsonLogic.add_operation(op, func);\n * }\n * jsonLogic.apply({ \"startsWith\": [{ \"var\": \"firstName\" }, \"Stev\"] }, data);\n * ```\n */\nexport const jsonLogicAdditionalOperators = {\n  startsWith: (a: string, b: string) => typeof a === 'string' && a.startsWith(b),\n  endsWith: (a: string, b: string) => typeof a === 'string' && a.endsWith(b),\n} satisfies Record<'startsWith' | 'endsWith', (a: string, b: string) => boolean>;\n\nexport const numerifyValues = (rg: RuleGroupTypeAny): RuleGroupTypeAny => ({\n  ...rg,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error TS doesn't keep track of odd/even indexes here\n  rules: rg.rules.map(r => {\n    if (typeof r === 'string') {\n      return r;\n    }\n\n    if (isRuleGroup(r)) {\n      return numerifyValues(r);\n    }\n\n    let { value } = r;\n    if (typeof value === 'string') {\n      value = parseNumber(value, { parseNumbers: true });\n    }\n\n    return { ...r, value };\n  }),\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isValidValue = (v: any) =>\n  (typeof v === 'string' && v.length > 0) ||\n  (typeof v === 'number' && !isNaN(v)) ||\n  (typeof v !== 'string' && typeof v !== 'number');\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const shouldRenderAsNumber = (v: any, parseNumbers?: boolean) =>\n  parseNumbers &&\n  (typeof v === 'number' ||\n    typeof v === 'bigint' ||\n    (typeof v === 'string' && numericRegex.test(v)));\n\nexport const isValueProcessorLegacy = (\n  vp: ValueProcessorLegacy | ValueProcessorByRule\n): vp is ValueProcessorLegacy => vp.length >= 3;\n\nexport const quoteFieldNamesWithArray = (\n  quoteFieldNamesWith: null | string | [string, string] = ['', '']\n): [string, string] =>\n  Array.isArray(quoteFieldNamesWith)\n    ? quoteFieldNamesWith\n    : typeof quoteFieldNamesWith === 'string'\n      ? [quoteFieldNamesWith, quoteFieldNamesWith]\n      : quoteFieldNamesWith ?? ['', ''];\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const nullOrUndefinedOrEmpty = (v: any) =>\n  v === null || typeof v === 'undefined' || v === '';\n","import type { RuleProcessor } from '../../types/index.noReact';\nimport { toArray, trimIfString } from '../arrayUtils';\nimport { parseNumber } from '../parseNumber';\nimport { nullOrUndefinedOrEmpty, shouldRenderAsNumber } from './utils';\n\nconst shouldNegate = (op: string) => /^(does)?not/i.test(op);\n\nconst escapeDoubleQuotes = (\n  v: string | number | boolean | object | null,\n  escapeQuotes?: boolean\n) => (typeof v !== 'string' || !escapeQuotes ? v : v.replaceAll(`\"`, `\\\\\"`));\n\n/**\n * Default rule processor used by {@link formatQuery} for \"cel\" format.\n */\nexport const defaultRuleProcessorCEL: RuleProcessor = (\n  { field, operator, value, valueSource },\n  // istanbul ignore next\n  { escapeQuotes, parseNumbers } = {}\n) => {\n  const valueIsField = valueSource === 'field';\n  const operatorTL = operator.replace(/^=$/, '==');\n  const useBareValue =\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'bigint' ||\n    shouldRenderAsNumber(value, parseNumbers);\n\n  switch (operatorTL) {\n    case '<':\n    case '<=':\n    case '==':\n    case '!=':\n    case '>':\n    case '>=':\n      return `${field} ${operatorTL} ${\n        valueIsField || useBareValue\n          ? trimIfString(value)\n          : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`\n      }`;\n\n    case 'contains':\n    case 'doesNotContain': {\n      const negate = shouldNegate(operatorTL) ? '!' : '';\n      return `${negate}${field}.contains(${\n        valueIsField ? trimIfString(value) : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`\n      })`;\n    }\n\n    case 'beginsWith':\n    case 'doesNotBeginWith': {\n      const negate = shouldNegate(operatorTL) ? '!' : '';\n      return `${negate}${field}.startsWith(${\n        valueIsField ? trimIfString(value) : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`\n      })`;\n    }\n\n    case 'endsWith':\n    case 'doesNotEndWith': {\n      const negate = shouldNegate(operatorTL) ? '!' : '';\n      return `${negate}${field}.endsWith(${\n        valueIsField ? trimIfString(value) : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`\n      })`;\n    }\n\n    case 'null':\n      return `${field} == null`;\n\n    case 'notNull':\n      return `${field} != null`;\n\n    case 'in':\n    case 'notIn': {\n      const negate = shouldNegate(operatorTL);\n      const valueAsArray = toArray(value);\n      return `${negate ? '!(' : ''}${field} in [${valueAsArray\n        .map(val =>\n          valueIsField || shouldRenderAsNumber(val, parseNumbers)\n            ? `${trimIfString(val)}`\n            : `\"${escapeDoubleQuotes(val, escapeQuotes)}\"`\n        )\n        .join(', ')}]${negate ? ')' : ''}`;\n    }\n\n    case 'between':\n    case 'notBetween': {\n      const valueAsArray = toArray(value);\n      if (\n        valueAsArray.length >= 2 &&\n        !nullOrUndefinedOrEmpty(valueAsArray[0]) &&\n        !nullOrUndefinedOrEmpty(valueAsArray[1])\n      ) {\n        const [first, second] = valueAsArray;\n        const firstNum = shouldRenderAsNumber(first, true)\n          ? parseNumber(first, { parseNumbers: true })\n          : NaN;\n        const secondNum = shouldRenderAsNumber(second, true)\n          ? parseNumber(second, { parseNumbers: true })\n          : NaN;\n        let firstValue = isNaN(firstNum)\n          ? valueIsField\n            ? `${first}`\n            : `\"${escapeDoubleQuotes(first, escapeQuotes)}\"`\n          : firstNum;\n        let secondValue = isNaN(secondNum)\n          ? valueIsField\n            ? `${second}`\n            : `\"${escapeDoubleQuotes(second, escapeQuotes)}\"`\n          : secondNum;\n\n        if (firstValue === firstNum && secondValue === secondNum && secondNum < firstNum) {\n          const tempNum = secondNum;\n          secondValue = firstNum;\n          firstValue = tempNum;\n        }\n\n        if (operator === 'between') {\n          return `(${field} >= ${firstValue} && ${field} <= ${secondValue})`;\n        } else {\n          return `(${field} < ${firstValue} || ${field} > ${secondValue})`;\n        }\n      } else {\n        return '';\n      }\n    }\n  }\n  return '';\n};\n","import type { RuleProcessor } from '../../types/index.noReact';\nimport { toArray, trimIfString } from '../arrayUtils';\nimport { parseNumber } from '../parseNumber';\nimport { isValidValue, mongoOperators, shouldRenderAsNumber } from './utils';\n\nconst escapeDoubleQuotes = (v: string | number | boolean | object | null) =>\n  typeof v !== 'string' ? v : v.replaceAll('\\\\', '\\\\\\\\').replaceAll(`\"`, `\\\\\"`);\n\n/**\n * Default rule processor used by {@link formatQuery} for \"mongodb\" format.\n */\nexport const defaultRuleProcessorMongoDB: RuleProcessor = (\n  { field, operator, value, valueSource },\n  // istanbul ignore next\n  { parseNumbers } = {}\n) => {\n  const valueIsField = valueSource === 'field';\n  const useBareValue =\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'bigint' ||\n    shouldRenderAsNumber(value, parseNumbers);\n\n  if (operator === '=' && !valueIsField) {\n    return `{\"${field}\":${useBareValue ? trimIfString(value) : `\"${escapeDoubleQuotes(value)}\"`}}`;\n  }\n\n  switch (operator) {\n    case '<':\n    case '<=':\n    case '=':\n    case '!=':\n    case '>':\n    case '>=': {\n      const mongoOperator = mongoOperators[operator];\n      return valueIsField\n        ? `{\"$expr\":{\"${mongoOperator}\":[\"$${field}\",\"$${value}\"]}}`\n        : `{\"${field}\":{\"${mongoOperator}\":${\n            useBareValue ? trimIfString(value) : `\"${escapeDoubleQuotes(value)}\"`\n          }}}`;\n    }\n\n    case 'contains':\n      return valueIsField\n        ? `{\"$where\":\"this.${field}.includes(this.${value})\"}`\n        : `{\"${field}\":{\"$regex\":\"${escapeDoubleQuotes(value)}\"}}`;\n\n    case 'beginsWith':\n      return valueIsField\n        ? `{\"$where\":\"this.${field}.startsWith(this.${value})\"}`\n        : `{\"${field}\":{\"$regex\":\"^${escapeDoubleQuotes(value)}\"}}`;\n\n    case 'endsWith':\n      return valueIsField\n        ? `{\"$where\":\"this.${field}.endsWith(this.${value})\"}`\n        : `{\"${field}\":{\"$regex\":\"${escapeDoubleQuotes(value)}$\"}}`;\n\n    case 'doesNotContain':\n      return valueIsField\n        ? `{\"$where\":\"!this.${field}.includes(this.${value})\"}`\n        : `{\"${field}\":{\"$not\":{\"$regex\":\"${escapeDoubleQuotes(value)}\"}}}`;\n\n    case 'doesNotBeginWith':\n      return valueIsField\n        ? `{\"$where\":\"!this.${field}.startsWith(this.${value})\"}`\n        : `{\"${field}\":{\"$not\":{\"$regex\":\"^${escapeDoubleQuotes(value)}\"}}}`;\n\n    case 'doesNotEndWith':\n      return valueIsField\n        ? `{\"$where\":\"!this.${field}.endsWith(this.${value})\"}`\n        : `{\"${field}\":{\"$not\":{\"$regex\":\"${escapeDoubleQuotes(value)}$\"}}}`;\n\n    case 'null':\n      return `{\"${field}\":null}`;\n\n    case 'notNull':\n      return `{\"${field}\":{\"$ne\":null}}`;\n\n    case 'in':\n    case 'notIn': {\n      const valueAsArray = toArray(value);\n      return valueIsField\n        ? `{\"$where\":\"${operator === 'notIn' ? '!' : ''}[${valueAsArray\n            .map(val => `this.${val}`)\n            .join(',')}].includes(this.${field})\"}`\n        : `{\"${field}\":{\"${mongoOperators[operator]}\":[${valueAsArray\n            .map(val =>\n              shouldRenderAsNumber(val, parseNumbers)\n                ? `${trimIfString(val)}`\n                : `\"${escapeDoubleQuotes(val)}\"`\n            )\n            .join(',')}]}}`;\n    }\n\n    case 'between':\n    case 'notBetween': {\n      const valueAsArray = toArray(value);\n      if (\n        valueAsArray.length >= 2 &&\n        isValidValue(valueAsArray[0]) &&\n        isValidValue(valueAsArray[1])\n      ) {\n        const [first, second] = valueAsArray;\n        const firstNum = shouldRenderAsNumber(first, true)\n          ? parseNumber(first, { parseNumbers: true })\n          : NaN;\n        const secondNum = shouldRenderAsNumber(second, true)\n          ? parseNumber(second, { parseNumbers: true })\n          : NaN;\n        const firstValue =\n          valueIsField || !isNaN(firstNum) ? `${first}` : `\"${escapeDoubleQuotes(first)}\"`;\n        const secondValue =\n          valueIsField || !isNaN(secondNum) ? `${second}` : `\"${escapeDoubleQuotes(second)}\"`;\n        if (operator === 'between') {\n          return valueIsField\n            ? `{\"$and\":[{\"$expr\":{\"$gte\":[\"$${field}\",\"$${firstValue}\"]}},{\"$expr\":{\"$lte\":[\"$${field}\",\"$${secondValue}\"]}}]}`\n            : `{\"${field}\":{\"$gte\":${firstValue},\"$lte\":${secondValue}}}`;\n        } else {\n          return valueIsField\n            ? `{\"$or\":[{\"$expr\":{\"$lt\":[\"$${field}\",\"$${firstValue}\"]}},{\"$expr\":{\"$gt\":[\"$${field}\",\"$${secondValue}\"]}}]}`\n            : `{\"$or\":[{\"${field}\":{\"$lt\":${firstValue}}},{\"${field}\":{\"$gt\":${secondValue}}}]}`;\n        }\n      } else {\n        return '';\n      }\n    }\n  }\n  return '';\n};\n","import type { RuleProcessor } from '../../types/index.noReact';\nimport { toArray, trimIfString } from '../arrayUtils';\nimport { parseNumber } from '../parseNumber';\nimport { nullOrUndefinedOrEmpty, shouldRenderAsNumber } from './utils';\n\nconst shouldNegate = (op: string) => /^(does)?not/i.test(op);\n\nconst wrapInNegation = (clause: string, negate: boolean) => (negate ? `!(${clause})` : `${clause}`);\n\nconst escapeSingleQuotes = (\n  v: string | number | boolean | object | null,\n  escapeQuotes?: boolean\n) => (typeof v !== 'string' || !escapeQuotes ? v : v.replaceAll(`'`, `\\\\'`));\n\n/**\n * Default rule processor used by {@link formatQuery} for \"spel\" format.\n */\nexport const defaultRuleProcessorSpEL: RuleProcessor = (\n  { field, operator, value, valueSource },\n  // istanbul ignore next\n  { escapeQuotes, parseNumbers } = {}\n) => {\n  const valueIsField = valueSource === 'field';\n  const operatorTL = operator.replace(/^=$/, '==');\n  const useBareValue =\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'bigint' ||\n    shouldRenderAsNumber(value, parseNumbers);\n\n  switch (operatorTL) {\n    case '<':\n    case '<=':\n    case '==':\n    case '!=':\n    case '>':\n    case '>=':\n      return `${field} ${operatorTL} ${\n        valueIsField || useBareValue\n          ? trimIfString(value)\n          : `'${escapeSingleQuotes(value, escapeQuotes)}'`\n      }`;\n\n    case 'contains':\n    case 'doesNotContain':\n      return wrapInNegation(\n        `${field} matches ${\n          valueIsField || useBareValue\n            ? trimIfString(value)\n            : `'${escapeSingleQuotes(value, escapeQuotes)}'`\n        }`,\n        shouldNegate(operatorTL)\n      );\n\n    case 'beginsWith':\n    case 'doesNotBeginWith': {\n      const valueTL = valueIsField\n        ? `'^'.concat(${trimIfString(value)})`\n        : `'${\n            (typeof value === 'string' && !value.startsWith('^')) || useBareValue ? '^' : ''\n          }${escapeSingleQuotes(value, escapeQuotes)}'`;\n      return wrapInNegation(`${field} matches ${valueTL}`, shouldNegate(operatorTL));\n    }\n\n    case 'endsWith':\n    case 'doesNotEndWith': {\n      const valueTL = valueIsField\n        ? `${trimIfString(value)}.concat('$')`\n        : `'${escapeSingleQuotes(value, escapeQuotes)}${\n            (typeof value === 'string' && !value.endsWith('$')) || useBareValue ? '$' : ''\n          }'`;\n      return wrapInNegation(`${field} matches ${valueTL}`, shouldNegate(operatorTL));\n    }\n\n    case 'null':\n      return `${field} == null`;\n\n    case 'notNull':\n      return `${field} != null`;\n\n    case 'in':\n    case 'notIn': {\n      const negate = shouldNegate(operatorTL) ? '!' : '';\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length > 0) {\n        return `${negate}(${valueAsArray\n          .map(\n            val =>\n              `${field} == ${\n                valueIsField || shouldRenderAsNumber(val, parseNumbers)\n                  ? `${trimIfString(val)}`\n                  : `'${escapeSingleQuotes(val, escapeQuotes)}'`\n              }`\n          )\n          .join(' or ')})`;\n      } else {\n        return '';\n      }\n    }\n\n    case 'between':\n    case 'notBetween': {\n      const valueAsArray = toArray(value);\n      if (\n        valueAsArray.length >= 2 &&\n        !nullOrUndefinedOrEmpty(valueAsArray[0]) &&\n        !nullOrUndefinedOrEmpty(valueAsArray[1])\n      ) {\n        const [first, second] = valueAsArray;\n        const firstNum = shouldRenderAsNumber(first, true)\n          ? parseNumber(first, { parseNumbers: true })\n          : NaN;\n        const secondNum = shouldRenderAsNumber(second, true)\n          ? parseNumber(second, { parseNumbers: true })\n          : NaN;\n        let firstValue = isNaN(firstNum)\n          ? valueIsField\n            ? `${first}`\n            : `'${escapeSingleQuotes(first, escapeQuotes)}'`\n          : firstNum;\n        let secondValue = isNaN(secondNum)\n          ? valueIsField\n            ? `${second}`\n            : `'${escapeSingleQuotes(second, escapeQuotes)}'`\n          : secondNum;\n        if (firstValue === firstNum && secondValue === secondNum && secondNum < firstNum) {\n          const tempNum = secondNum;\n          secondValue = firstNum;\n          firstValue = tempNum;\n        }\n        if (operator === 'between') {\n          return `(${field} >= ${firstValue} and ${field} <= ${secondValue})`;\n        } else {\n          return `(${field} < ${firstValue} or ${field} > ${secondValue})`;\n        }\n      } else {\n        return '';\n      }\n    }\n  }\n\n  return '';\n};\n","import type { ValueProcessorByRule } from '../../types/index.noReact';\nimport { toArray, trimIfString } from '../arrayUtils';\nimport { isValidValue, quoteFieldNamesWithArray, shouldRenderAsNumber } from './utils';\n\nconst escapeStringValueQuotes = (\n  v: string | number | boolean | object | null,\n  quoteChar: string,\n  escapeQuotes?: boolean\n) =>\n  escapeQuotes && typeof v === 'string'\n    ? v.replaceAll(`${quoteChar}`, `${quoteChar}${quoteChar}`)\n    : v;\n\n/**\n * Default value processor used by {@link formatQuery} for \"sql\" format.\n */\nexport const defaultValueProcessorByRule: ValueProcessorByRule = (\n  { operator, value, valueSource },\n  // istanbul ignore next\n  { escapeQuotes, parseNumbers, quoteFieldNamesWith, quoteValuesWith } = {}\n) => {\n  const valueIsField = valueSource === 'field';\n  const [qfnwPre, qfnwPost] = quoteFieldNamesWithArray(quoteFieldNamesWith);\n  const operatorLowerCase = operator.toLowerCase();\n  const quoteChar = quoteValuesWith || \"'\";\n\n  const escapeValue = (v: string | number | boolean | object | null) =>\n    escapeStringValueQuotes(v, quoteChar, escapeQuotes);\n  const wrapAndEscape = (v: string | number | boolean | object | null) =>\n    `${quoteChar}${escapeValue(v)}${quoteChar}`;\n  const wrapFieldName = (f: string) => `${qfnwPre}${f}${qfnwPost}`;\n\n  switch (operatorLowerCase) {\n    case 'null':\n    case 'notnull': {\n      return '';\n    }\n\n    case 'in':\n    case 'notin': {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length > 0) {\n        return `(${valueAsArray\n          .map(v =>\n            valueIsField\n              ? wrapFieldName(v)\n              : shouldRenderAsNumber(v, parseNumbers)\n                ? `${trimIfString(v)}`\n                : `${wrapAndEscape(v)}`\n          )\n          .join(', ')})`;\n      }\n      return '';\n    }\n\n    case 'between':\n    case 'notbetween': {\n      const valueAsArray = toArray(value);\n      if (\n        valueAsArray.length >= 2 &&\n        isValidValue(valueAsArray[0]) &&\n        isValidValue(valueAsArray[1])\n      ) {\n        const [first, second] = valueAsArray;\n        return valueIsField\n          ? `${wrapFieldName(first)} and ${wrapFieldName(second)}`\n          : shouldRenderAsNumber(first, parseNumbers) && shouldRenderAsNumber(second, parseNumbers)\n            ? `${trimIfString(first)} and ${trimIfString(second)}`\n            : `${wrapAndEscape(first)} and ${wrapAndEscape(second)}`;\n      }\n      return '';\n    }\n\n    case 'contains':\n    case 'doesnotcontain':\n      return valueIsField\n        ? `${quoteChar}%${quoteChar} || ${wrapFieldName(value)} || ${quoteChar}%${quoteChar}`\n        : `${quoteChar}%${escapeValue(value)}%${quoteChar}`;\n\n    case 'beginswith':\n    case 'doesnotbeginwith':\n      return valueIsField\n        ? `${wrapFieldName(value)} || ${quoteChar}%${quoteChar}`\n        : `${quoteChar}${escapeValue(value)}%${quoteChar}`;\n\n    case 'endswith':\n    case 'doesnotendwith':\n      return valueIsField\n        ? `${quoteChar}%${quoteChar} || ${wrapFieldName(value)}`\n        : `${quoteChar}%${escapeValue(value)}${quoteChar}`;\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'TRUE' : 'FALSE';\n  }\n\n  return valueIsField\n    ? wrapFieldName(value)\n    : shouldRenderAsNumber(value, parseNumbers)\n      ? `${trimIfString(value)}`\n      : `${wrapAndEscape(value)}`;\n};\n","import type { DefaultOperatorName, RuleProcessor } from '../../types/index.noReact';\nimport { toArray } from '../arrayUtils';\nimport { parseNumber } from '../parseNumber';\nimport { isValidValue, shouldRenderAsNumber } from './utils';\n\ntype RangeOperator = 'gt' | 'gte' | 'lt' | 'lte';\ntype RangeRule = (\n  | { gt: string | number }\n  | { gte: string | number }\n  | { lt: string | number }\n  | { lte: string | number }\n) & { [k in RangeOperator]?: string | number };\ntype ElasticSearchRule =\n  | { range: Record<string, RangeRule> }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  | { term: Record<string, any> }\n  | { exists: { field: string } }\n  | { regexp: { [k: string]: { value: string } } };\ntype ElasticSearchQuery = {\n  bool:\n    | { filter: { script: { script: string } } }\n    | { must: ElasticSearchRule | ElasticSearchQuery | (ElasticSearchRule | ElasticSearchQuery)[] }\n    | {\n        must_not:\n          | ElasticSearchRule\n          | ElasticSearchQuery\n          | (ElasticSearchRule | ElasticSearchQuery)[];\n      }\n    | {\n        should: ElasticSearchRule | ElasticSearchQuery | (ElasticSearchRule | ElasticSearchQuery)[];\n      };\n};\n\nconst rangeOperatorMap = { '<': 'lt', '<=': 'lte', '>': 'gt', '>=': 'gte' } satisfies Record<\n  '<' | '<=' | '>' | '>=',\n  RangeOperator\n>;\n\nconst negateIfNotOp = (\n  op: string,\n  elasticSearchRule: ElasticSearchRule\n): ElasticSearchQuery | ElasticSearchRule =>\n  /^(does)?not/i.test(op) ? { bool: { must_not: elasticSearchRule } } : elasticSearchRule;\n\nconst escapeSQ = (s: string) => s?.replace(/('|\\\\)/g, `\\\\$1`);\n\nconst textFunctionMap: Partial<Record<DefaultOperatorName, string>> = {\n  beginsWith: 'startsWith',\n  doesNotContain: 'contains',\n  doesNotBeginWith: 'startsWith',\n  doesNotEndWith: 'endsWith',\n};\nconst getTextScript = (f: string, o: DefaultOperatorName, v: string) => {\n  const script = `doc['${f}'].${textFunctionMap[o] ?? o}(doc['${v}'])`;\n  return o.startsWith('d') ? `!${script}` : script;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst valueRenderer = (v: any, parseNumbers?: boolean) =>\n  typeof v === 'boolean'\n    ? v\n    : shouldRenderAsNumber(v, parseNumbers)\n      ? parseNumber(v, { parseNumbers })\n      : v;\n\n/**\n * Default rule processor used by {@link formatQuery} for \"elasticsearch\" format.\n */\nexport const defaultRuleProcessorElasticSearch: RuleProcessor = (\n  { field, operator, value, valueSource },\n  { parseNumbers } = {}\n): ElasticSearchQuery | ElasticSearchRule | false => {\n  if (valueSource === 'field') {\n    // Bail out if not all values are strings\n    if (toArray(value).some(v => typeof v !== 'string')) return false;\n\n    const fieldForScript = escapeSQ(field);\n\n    switch (operator) {\n      case '=':\n      case '!=':\n      case '>':\n      case '>=':\n      case '<':\n      case '<=': {\n        const operatorForScript = operator === '=' ? '==' : operator;\n        const valueForScript = escapeSQ(value);\n        return !valueForScript\n          ? false\n          : {\n              bool: {\n                filter: {\n                  script: {\n                    script: `doc['${fieldForScript}'] ${operatorForScript} doc['${valueForScript}']`,\n                  },\n                },\n              },\n            };\n      }\n\n      case 'in':\n      case 'notIn': {\n        const valueAsArray = toArray(value);\n        if (valueAsArray.length > 0) {\n          const arr = valueAsArray.map(v => ({\n            bool: { filter: { script: { script: `doc['${fieldForScript}'] == doc['${v}']` } } },\n          }));\n          return { bool: operator === 'in' ? { should: arr } : { must_not: arr } };\n        }\n        return false;\n      }\n\n      case 'between':\n      case 'notBetween': {\n        const valueAsArray = toArray(value);\n        if (valueAsArray.length >= 2 && valueAsArray[0] && valueAsArray[1]) {\n          const script = `doc['${fieldForScript}'] >= doc['${valueAsArray[0]}'] && doc['${fieldForScript}'] <= doc['${valueAsArray[1]}']`;\n          return {\n            bool: {\n              filter: { script: { script: operator === 'notBetween' ? `!(${script})` : script } },\n            },\n          };\n        }\n        return false;\n      }\n\n      case 'contains':\n      case 'doesNotContain':\n      case 'beginsWith':\n      case 'doesNotBeginWith':\n      case 'endsWith':\n      case 'doesNotEndWith': {\n        const valueForScript = escapeSQ(value);\n        if (!valueForScript) return false;\n        const script = getTextScript(fieldForScript, operator, valueForScript);\n        return {\n          bool: {\n            filter: {\n              script: {\n                script,\n              },\n            },\n          },\n        };\n      }\n    }\n  }\n\n  switch (operator) {\n    case '<':\n    case '<=':\n    case '>':\n    case '>=':\n      return {\n        range: {\n          [field]: {\n            [rangeOperatorMap[operator]]: valueRenderer(value, parseNumbers),\n          } as RangeRule,\n        },\n      };\n\n    case '=':\n      return { term: { [field]: valueRenderer(value, parseNumbers) } };\n\n    case '!=':\n      return { bool: { must_not: { term: { [field]: valueRenderer(value, parseNumbers) } } } };\n\n    case 'null':\n      return { bool: { must_not: { exists: { field } } } };\n\n    case 'notNull':\n      return { exists: { field } };\n\n    case 'in':\n    case 'notIn': {\n      const valueAsArray = toArray(value).map(v => valueRenderer(v, parseNumbers));\n      if (valueAsArray.length > 0) {\n        const arr = valueAsArray.map(v => ({ term: { [field]: valueRenderer(v, parseNumbers) } }));\n        return { bool: operator === 'in' ? { should: arr } : { must_not: arr } };\n      }\n      return false;\n    }\n\n    case 'between':\n    case 'notBetween': {\n      const valueAsArray = toArray(value);\n      if (\n        valueAsArray.length >= 2 &&\n        isValidValue(valueAsArray[0]) &&\n        isValidValue(valueAsArray[1])\n      ) {\n        let [first, second] = valueAsArray;\n        if (shouldRenderAsNumber(first, true) && shouldRenderAsNumber(second, true)) {\n          const firstNum = parseNumber(first, { parseNumbers: true });\n          const secondNum = parseNumber(second, { parseNumbers: true });\n          if (secondNum < firstNum) {\n            const tempNum = secondNum;\n            second = firstNum;\n            first = tempNum;\n          } else {\n            first = firstNum;\n            second = secondNum;\n          }\n        }\n        return negateIfNotOp(operator, { range: { [field]: { gte: first, lte: second } } });\n      }\n      return false;\n    }\n\n    case 'contains':\n    case 'doesNotContain':\n      return negateIfNotOp(operator, { regexp: { [field]: { value } } });\n\n    case 'beginsWith':\n    case 'doesNotBeginWith':\n      return negateIfNotOp(operator, { regexp: { [field]: { value: `^${value}` } } });\n\n    case 'endsWith':\n    case 'doesNotEndWith':\n      return negateIfNotOp(operator, { regexp: { [field]: { value: `${value}$` } } });\n  }\n  return false;\n};\n","import type { RuleProcessor } from '../../types/index.noReact';\nimport { toArray, trimIfString } from '../arrayUtils';\nimport { parseNumber } from '../parseNumber';\nimport { nullOrUndefinedOrEmpty, quoteFieldNamesWithArray, shouldRenderAsNumber } from './utils';\n\nconst shouldNegate = (op: string) => /^(does)?not/i.test(op);\n\nconst quote = (v: string | number | boolean | object | null, escapeQuotes?: boolean) =>\n  `\"${typeof v !== 'string' || !escapeQuotes ? v : v.replaceAll(`\"`, `\\\\\"`)}\"`;\n\nconst negate = (clause: string, negate: boolean) => (negate ? `$not(${clause})` : `${clause}`);\n\nconst escapeStringRegex = (s: string) =>\n  `${s}`.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n\n/**\n * Default rule processor used by {@link formatQuery} for \"jsonata\" format.\n */\nexport const defaultRuleProcessorJSONata: RuleProcessor = (\n  { field, operator, value, valueSource },\n  // istanbul ignore next\n  { escapeQuotes, parseNumbers = true, quoteFieldNamesWith = ['', ''] as [string, string] } = {}\n) => {\n  const valueIsField = valueSource === 'field';\n  const useBareValue =\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'bigint' ||\n    shouldRenderAsNumber(value, parseNumbers);\n\n  const [qPre, qPost] = quoteFieldNamesWithArray(quoteFieldNamesWith);\n  const qfn = (f: string) => `${qPre}${f}${qPost}`;\n\n  switch (operator) {\n    case '<':\n    case '<=':\n    case '=':\n    case '!=':\n    case '>':\n    case '>=':\n      return `${qfn(field)} ${operator} ${\n        valueIsField\n          ? qfn(trimIfString(value))\n          : useBareValue\n            ? trimIfString(value)\n            : quote(value, escapeQuotes)\n      }`;\n\n    case 'contains':\n    case 'doesNotContain':\n      return negate(\n        `$contains(${qfn(field)}, ${valueIsField ? qfn(trimIfString(value)) : quote(value, escapeQuotes)})`,\n        shouldNegate(operator)\n      );\n\n    case 'beginsWith':\n    case 'doesNotBeginWith':\n      return negate(\n        valueIsField\n          ? `$substring(${qfn(field)}, 0, $length(${qfn(trimIfString(value))})) = ${qfn(trimIfString(value))}`\n          : `$contains(${qfn(field)}, /^${escapeStringRegex(value)}/)`,\n        shouldNegate(operator)\n      );\n\n    case 'endsWith':\n    case 'doesNotEndWith':\n      return negate(\n        valueIsField\n          ? `$substring(${qfn(field)}, $length(${qfn(field)}) - $length(${qfn(trimIfString(value))})) = ${qfn(trimIfString(value))}`\n          : `$contains(${qfn(field)}, /${escapeStringRegex(value)}$/)`,\n        shouldNegate(operator)\n      );\n\n    case 'null':\n      return `${qfn(field)} = null`;\n\n    case 'notNull':\n      return `${qfn(field)} != null`;\n\n    case 'in':\n    case 'notIn': {\n      const valueAsArray = toArray(value);\n      return negate(\n        `${qfn(field)} in [${valueAsArray\n          .map(val =>\n            valueIsField\n              ? `${qfn(trimIfString(val))}`\n              : shouldRenderAsNumber(val, parseNumbers)\n                ? `${trimIfString(val)}`\n                : quote(val, escapeQuotes)\n          )\n          .join(', ')}]`,\n        shouldNegate(operator)\n      );\n    }\n\n    case 'between':\n    case 'notBetween': {\n      const valueAsArray = toArray(value);\n      if (\n        valueAsArray.length >= 2 &&\n        !nullOrUndefinedOrEmpty(valueAsArray[0]) &&\n        !nullOrUndefinedOrEmpty(valueAsArray[1])\n      ) {\n        const [first, second] = valueAsArray;\n        const firstNum = shouldRenderAsNumber(first, true)\n          ? parseNumber(first, { parseNumbers: true })\n          : NaN;\n        const secondNum = shouldRenderAsNumber(second, true)\n          ? parseNumber(second, { parseNumbers: true })\n          : NaN;\n        let firstValue = isNaN(firstNum) ? (valueIsField ? `${first}` : first) : firstNum;\n        let secondValue = isNaN(secondNum) ? (valueIsField ? `${second}` : second) : secondNum;\n\n        if (firstValue === firstNum && secondValue === secondNum && secondNum < firstNum) {\n          const tempNum = secondNum;\n          secondValue = firstNum;\n          firstValue = tempNum;\n        }\n\n        const renderAsNumbers =\n          shouldRenderAsNumber(first, parseNumbers) && shouldRenderAsNumber(second, parseNumbers);\n\n        const expression = `${qfn(field)} >= ${valueIsField ? qfn(first) : renderAsNumbers ? firstValue : quote(firstValue, escapeQuotes)} and ${qfn(field)} <= ${valueIsField ? qfn(second) : renderAsNumbers ? secondValue : quote(secondValue, escapeQuotes)}`;\n\n        return operator === 'between' ? `(${expression})` : negate(expression, true);\n      } else {\n        return '';\n      }\n    }\n  }\n  return '';\n};\n","import type { JsonLogicVar, RQBJsonLogic, RuleProcessor } from '../../types/index.noReact';\nimport { toArray } from '../arrayUtils';\nimport { parseNumber } from '../parseNumber';\nimport { isValidValue, shouldRenderAsNumber } from './utils';\n\nconst convertOperator = (op: '<' | '<=' | '=' | '!=' | '>' | '>=') =>\n  op\n    .replace(/^(=)$/, '$1=')\n    .replace(/^notNull$/i, '!=')\n    .replace(/^null$/i, '==') as '<' | '<=' | '==' | '!=' | '===' | '!==' | '>' | '>=';\n\nconst negateIfNotOp = (op: string, jsonRule: RQBJsonLogic) =>\n  /^(does)?not/i.test(op) ? { '!': jsonRule } : jsonRule;\n\n/**\n * Default rule processor used by {@link formatQuery} for \"jsonlogic\" format.\n */\nexport const defaultRuleProcessorJsonLogic: RuleProcessor = (\n  { field, operator, value, valueSource },\n  { parseNumbers } = {}\n): RQBJsonLogic => {\n  const valueIsField = valueSource === 'field';\n  const fieldObject: JsonLogicVar = { var: field };\n  const fieldOrNumberRenderer = (v: string) =>\n    valueIsField\n      ? { var: `${v}` }\n      : shouldRenderAsNumber(v, parseNumbers)\n        ? parseNumber(v, { parseNumbers })\n        : v;\n\n  switch (operator) {\n    case '<':\n    case '<=':\n    case '=':\n    case '!=':\n    case '>':\n    case '>=':\n      return {\n        [convertOperator(operator)]: [fieldObject, fieldOrNumberRenderer(value)],\n      } as RQBJsonLogic;\n\n    case 'null':\n    case 'notNull': {\n      return {\n        [`${operator === 'notNull' ? '!' : '='}=`]: [fieldObject, null],\n      } as RQBJsonLogic;\n    }\n\n    case 'in':\n    case 'notIn': {\n      const valueAsArray = toArray(value).map(fieldOrNumberRenderer);\n      return negateIfNotOp(operator, { in: [fieldObject, valueAsArray] });\n    }\n\n    case 'between':\n    case 'notBetween': {\n      const valueAsArray = toArray(value);\n      if (\n        valueAsArray.length >= 2 &&\n        isValidValue(valueAsArray[0]) &&\n        isValidValue(valueAsArray[1])\n      ) {\n        let [first, second] = valueAsArray;\n        if (\n          !valueIsField &&\n          shouldRenderAsNumber(first, true) &&\n          shouldRenderAsNumber(second, true)\n        ) {\n          const firstNum = parseNumber(first, { parseNumbers: true });\n          const secondNum = parseNumber(second, { parseNumbers: true });\n          if (secondNum < firstNum) {\n            const tempNum = secondNum;\n            second = firstNum;\n            first = tempNum;\n          } else {\n            first = firstNum;\n            second = secondNum;\n          }\n        } else if (valueIsField) {\n          first = { var: first };\n          second = { var: second };\n        }\n        const jsonRule: RQBJsonLogic = { '<=': [first, fieldObject, second] };\n        return negateIfNotOp(operator, jsonRule);\n      }\n      return false;\n    }\n\n    case 'contains':\n    case 'doesNotContain': {\n      const jsonRule: RQBJsonLogic = {\n        in: [fieldOrNumberRenderer(value), fieldObject],\n      };\n      return negateIfNotOp(operator, jsonRule);\n    }\n\n    case 'beginsWith':\n    case 'doesNotBeginWith': {\n      const jsonRule: RQBJsonLogic = {\n        startsWith: [fieldObject, fieldOrNumberRenderer(value)],\n      };\n      return negateIfNotOp(operator, jsonRule);\n    }\n\n    case 'endsWith':\n    case 'doesNotEndWith': {\n      const jsonRule: RQBJsonLogic = {\n        endsWith: [fieldObject, fieldOrNumberRenderer(value)],\n      };\n      return negateIfNotOp(operator, jsonRule);\n    }\n  }\n  return false;\n};\n","import type { RuleProcessor } from '../../types/index.noReact';\nimport { toArray } from '../arrayUtils';\nimport { parseNumber } from '../parseNumber';\nimport { defaultValueProcessorByRule } from './defaultValueProcessorByRule';\nimport { mapSQLOperator, shouldRenderAsNumber } from './utils';\n\n/**\n * Default rule processor used by {@link formatQuery} for \"sql\" format.\n */\nexport const defaultRuleProcessorParameterized: RuleProcessor = (rule, opts, meta) => {\n  // TODO: test for this so we don't have to ignore it\n  // istanbul ignore next\n  const {\n    fieldData,\n    format,\n    getNextNamedParam,\n    parseNumbers,\n    paramPrefix,\n    paramsKeepPrefix,\n    numberedParams,\n    quoteFieldNamesWith = ['', ''] as [string, string],\n    valueProcessor = defaultValueProcessorByRule,\n  } = opts ?? {};\n\n  const { processedParams = [] } = meta ?? {};\n\n  const parameterized = format === 'parameterized';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const params: any[] = [];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const paramsNamed: Record<string, any> = {};\n\n  const finalize = (sql: string) => {\n    if (parameterized) {\n      return { sql, params };\n    }\n    return { sql, params: paramsNamed };\n  };\n\n  const value = valueProcessor(rule, {\n    parseNumbers,\n    quoteFieldNamesWith,\n    fieldData,\n    format,\n  });\n\n  const sqlOperator = mapSQLOperator(rule.operator);\n  const sqlOperatorLowerCase = sqlOperator.toLowerCase();\n\n  if (\n    (sqlOperatorLowerCase === 'in' ||\n      sqlOperatorLowerCase === 'not in' ||\n      sqlOperatorLowerCase === 'between' ||\n      sqlOperatorLowerCase === 'not between') &&\n    !value\n  ) {\n    return finalize('');\n  } else if (sqlOperatorLowerCase === 'is null' || sqlOperatorLowerCase === 'is not null') {\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator}`\n    );\n  } else if (rule.valueSource === 'field') {\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${value}`.trim()\n    );\n  }\n\n  if (sqlOperatorLowerCase === 'in' || sqlOperatorLowerCase === 'not in') {\n    const splitValue = toArray(rule.value);\n    if (parameterized) {\n      splitValue.forEach(v =>\n        params.push(shouldRenderAsNumber(v, parseNumbers) ? parseNumber(v, { parseNumbers }) : v)\n      );\n      return finalize(\n        `${quoteFieldNamesWith[0]}${rule.field}${\n          quoteFieldNamesWith[1]\n        } ${sqlOperator} (${splitValue\n          .map((_v, i) =>\n            numberedParams\n              ? `${paramPrefix}${processedParams.length + 1 + splitValue.length - (splitValue.length - i)}`\n              : '?'\n          )\n          .join(', ')})`\n      );\n    }\n    const inParams: string[] = [];\n    splitValue.forEach(v => {\n      const thisParamName = getNextNamedParam!(rule.field);\n      inParams.push(`${paramPrefix}${thisParamName}`);\n      paramsNamed[`${paramsKeepPrefix ? paramPrefix : ''}${thisParamName}`] = shouldRenderAsNumber(\n        v,\n        parseNumbers\n      )\n        ? parseNumber(v, { parseNumbers })\n        : v;\n    });\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${\n        quoteFieldNamesWith[1]\n      } ${sqlOperator} (${inParams.join(', ')})`\n    );\n  } else if (sqlOperatorLowerCase === 'between' || sqlOperatorLowerCase === 'not between') {\n    const valueAsArray = toArray(rule.value);\n    const [first, second] = valueAsArray\n      .slice(0, 2)\n      .map(v => (shouldRenderAsNumber(v, parseNumbers) ? parseNumber(v, { parseNumbers }) : v));\n    if (parameterized) {\n      params.push(first);\n      params.push(second);\n      return finalize(\n        `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${\n          numberedParams ? `${paramPrefix}${processedParams.length + 1}` : '?'\n        } and ${numberedParams ? `${paramPrefix}${processedParams.length + 2}` : '?'}`\n      );\n    }\n    const firstParamName = getNextNamedParam!(rule.field);\n    const secondParamName = getNextNamedParam!(rule.field);\n    paramsNamed[`${paramsKeepPrefix ? paramPrefix : ''}${firstParamName}`] = first;\n    paramsNamed[`${paramsKeepPrefix ? paramPrefix : ''}${secondParamName}`] = second;\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${paramPrefix}${firstParamName} and ${paramPrefix}${secondParamName}`\n    );\n  }\n  let paramValue = rule.value;\n  if (typeof rule.value === 'string') {\n    if (shouldRenderAsNumber(rule.value, parseNumbers)) {\n      paramValue = parseNumber(rule.value, { parseNumbers });\n    } else {\n      // Note that we're using `value` here, which has been processed through\n      // a `valueProcessor`, as opposed to `rule.value` which has not\n      paramValue = /^'.*'$/g.test(value)\n        ? value.replace(/(^'|'$)/g, '')\n        : /* istanbul ignore next */ value;\n    }\n  }\n  let paramName = '';\n  if (parameterized) {\n    params.push(paramValue);\n  } else {\n    paramName = getNextNamedParam!(rule.field);\n    paramsNamed[`${paramsKeepPrefix ? paramPrefix : ''}${paramName}`] = paramValue;\n  }\n  return finalize(\n    `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${\n      parameterized\n        ? numberedParams\n          ? `${paramPrefix}${processedParams.length + 1}`\n          : '?'\n        : `${paramPrefix}${paramName}`\n    }`.trim()\n  );\n};\n","import type { RuleProcessor } from '../../types/index.noReact';\nimport { defaultValueProcessorByRule } from './defaultValueProcessorByRule';\nimport { mapSQLOperator, quoteFieldNamesWithArray } from './utils';\n\n/**\n * Default rule processor used by {@link formatQuery} for \"sql\" format.\n */\nexport const defaultRuleProcessorSQL: RuleProcessor = (rule, opts) => {\n  const {\n    parseNumbers,\n    escapeQuotes,\n    quoteFieldNamesWith = ['', ''] as [string, string],\n    quoteValuesWith = `'`,\n    valueProcessor = defaultValueProcessorByRule,\n  } = opts ?? {};\n  const value = valueProcessor(rule, {\n    parseNumbers,\n    escapeQuotes,\n    quoteFieldNamesWith,\n    quoteValuesWith,\n  });\n  const operator = mapSQLOperator(rule.operator);\n\n  const operatorLowerCase = operator.toLowerCase();\n  if (\n    (operatorLowerCase === 'in' ||\n      operatorLowerCase === 'not in' ||\n      operatorLowerCase === 'between' ||\n      operatorLowerCase === 'not between') &&\n    !value\n  ) {\n    return '';\n  }\n\n  const [qPre, qPost] = quoteFieldNamesWithArray(quoteFieldNamesWith);\n\n  return `${qPre}${rule.field}${qPost} ${operator} ${value}`.trim();\n};\n","import type {\n  RuleGroupTypeAny,\n  RuleType,\n  RuleValidator,\n  ValidationResult,\n} from '../types/index.noReact';\nimport { isRuleGroup } from './isRuleGroup';\nimport { isPojo } from './misc';\n\n/**\n * Determines if an object is useful as a validation result.\n */\nexport const isValidationResult = (vr?: ValidationResult): vr is ValidationResult =>\n  isPojo(vr) && typeof vr.valid === 'boolean';\n\n/**\n * Determines if a rule or group is valid based on a validation result (if defined)\n * or a validator function. Returns `true` if neither are defined.\n */\nexport const isRuleOrGroupValid = (\n  rg: RuleType | RuleGroupTypeAny,\n  validationResult?: boolean | ValidationResult,\n  validator?: RuleValidator\n) => {\n  if (typeof validationResult === 'boolean') {\n    return validationResult;\n  }\n  if (isValidationResult(validationResult)) {\n    return validationResult.valid;\n  }\n  if (typeof validator === 'function' && !isRuleGroup(rg)) {\n    const vr = validator(rg);\n    if (typeof vr === 'boolean') {\n      return vr;\n    }\n    // istanbul ignore else\n    if (isValidationResult(vr)) {\n      return vr.valid;\n    }\n  }\n  return true;\n};\n","import { defaultPlaceholderFieldName, defaultPlaceholderOperatorName } from '../../defaults';\nimport type {\n  DefaultCombinatorName,\n  ExportFormat,\n  FormatQueryOptions,\n  FullField,\n  FullOptionList,\n  ParameterizedNamedSQL,\n  ParameterizedSQL,\n  QueryValidator,\n  RQBJsonLogic,\n  RuleGroupType,\n  RuleGroupTypeAny,\n  RuleProcessor,\n  RuleType,\n  RuleValidator,\n  ValidationMap,\n  ValidationResult,\n} from '../../types/index.noReact';\nimport { convertFromIC } from '../convertQuery';\nimport { isRuleGroup, isRuleGroupType } from '../isRuleGroup';\nimport { isRuleOrGroupValid } from '../isRuleOrGroupValid';\nimport { isPojo } from '../misc';\nimport { getOption, toFlatOptionArray } from '../optGroupUtils';\nimport { toFullOptionList } from '../toFullOption';\nimport { defaultRuleProcessorCEL } from './defaultRuleProcessorCEL';\nimport { defaultRuleProcessorElasticSearch } from './defaultRuleProcessorElasticSearch';\nimport { defaultRuleProcessorJSONata } from './defaultRuleProcessorJSONata';\nimport { defaultRuleProcessorJsonLogic } from './defaultRuleProcessorJsonLogic';\nimport { defaultRuleProcessorMongoDB } from './defaultRuleProcessorMongoDB';\nimport { defaultRuleProcessorParameterized } from './defaultRuleProcessorParameterized';\nimport { defaultRuleProcessorSpEL } from './defaultRuleProcessorSpEL';\nimport { defaultRuleProcessorSQL } from './defaultRuleProcessorSQL';\nimport { defaultValueProcessorByRule } from './defaultValueProcessorByRule';\nimport {\n  celCombinatorMap,\n  isValueProcessorLegacy,\n  numerifyValues,\n  quoteFieldNamesWithArray,\n} from './utils';\n\n/**\n * Generates a formatted (indented two spaces) JSON string from a query object.\n */\nfunction formatQuery(ruleGroup: RuleGroupTypeAny): string;\n/**\n * Generates a {@link ParameterizedSQL} object from a query object.\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options: 'parameterized' | (Omit<FormatQueryOptions, 'format'> & { format: 'parameterized' })\n): ParameterizedSQL;\n/**\n * Generates a {@link ParameterizedNamedSQL} object from a query object.\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options:\n    | 'parameterized_named'\n    | (Omit<FormatQueryOptions, 'format'> & { format: 'parameterized_named' })\n): ParameterizedNamedSQL;\n/**\n * Generates a {@link JsonLogic} object from a query object.\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options: 'jsonlogic' | (Omit<FormatQueryOptions, 'format'> & { format: 'jsonlogic' })\n): RQBJsonLogic;\n/**\n * Generates an ElasticSearch query object from an RQB query object.\n *\n * NOTE: Support for the ElasticSearch format is experimental.\n * You may have better results exporting \"sql\" format then using\n * [ElasticSearch SQL](https://www.elastic.co/guide/en/elasticsearch/reference/current/xpack-sql.html).\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options: 'elasticsearch' | (Omit<FormatQueryOptions, 'format'> & { format: 'elasticsearch' })\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): Record<string, any>;\n/**\n * Generates a JSONata query string from an RQB query object.\n *\n * NOTE: The `parseNumbers` option is recommended for this format.\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options: 'jsonata' | (Omit<FormatQueryOptions, 'format'> & { format: 'jsonata' })\n): string;\n/**\n * Generates a formatted (indented two spaces) JSON string from a query object.\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options: Omit<FormatQueryOptions, 'format'>\n): string;\n/**\n * Generates a query string in the requested format.\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options: Exclude<\n    ExportFormat,\n    'parameterized' | 'parameterized_named' | 'jsonlogic' | 'elasticsearch' | 'jsonata'\n  >\n): string;\n/**\n * Generates a query string in the requested format.\n */\nfunction formatQuery(\n  ruleGroup: RuleGroupTypeAny,\n  options: Omit<FormatQueryOptions, 'format'> & {\n    format: Exclude<\n      ExportFormat,\n      'parameterized' | 'parameterized_named' | 'jsonlogic' | 'elasticsearch' | 'jsonata'\n    >;\n  }\n): string;\nfunction formatQuery(ruleGroup: RuleGroupTypeAny, options: FormatQueryOptions | ExportFormat = {}) {\n  let format: ExportFormat = 'json';\n  let valueProcessorInternal = defaultValueProcessorByRule;\n  let ruleProcessorInternal: RuleProcessor | null = null;\n  let quoteFieldNamesWith: [string, string] = ['', ''];\n  let validator: QueryValidator = () => true;\n  let fields: FullOptionList<FullField> = [];\n  let validationMap: ValidationMap = {};\n  let fallbackExpression = '';\n  let paramPrefix = ':';\n  let paramsKeepPrefix = false;\n  let numberedParams = false;\n  let parseNumbers = false;\n  let placeholderFieldName = defaultPlaceholderFieldName;\n  let placeholderOperatorName = defaultPlaceholderOperatorName;\n  let quoteValuesWith = \"'\";\n\n  if (typeof options === 'string') {\n    format = options.toLowerCase() as ExportFormat;\n    if (format === 'mongodb') {\n      ruleProcessorInternal = defaultRuleProcessorMongoDB;\n    } else if (format === 'parameterized') {\n      ruleProcessorInternal = defaultRuleProcessorParameterized;\n    } else if (format === 'parameterized_named') {\n      ruleProcessorInternal = defaultRuleProcessorParameterized;\n    } else if (format === 'cel') {\n      ruleProcessorInternal = defaultRuleProcessorCEL;\n    } else if (format === 'spel') {\n      ruleProcessorInternal = defaultRuleProcessorSpEL;\n    } else if (format === 'jsonlogic') {\n      ruleProcessorInternal = defaultRuleProcessorJsonLogic;\n    } else if (format === 'elasticsearch') {\n      ruleProcessorInternal = defaultRuleProcessorElasticSearch;\n    } else if (format === 'jsonata') {\n      ruleProcessorInternal = defaultRuleProcessorJSONata;\n    }\n  } else {\n    format = (options.format ?? 'json').toLowerCase() as ExportFormat;\n    const { valueProcessor = null, ruleProcessor = null } = options;\n    if (typeof ruleProcessor === 'function') {\n      ruleProcessorInternal = ruleProcessor;\n    }\n    valueProcessorInternal =\n      typeof valueProcessor === 'function'\n        ? (r, opts) =>\n            isValueProcessorLegacy(valueProcessor)\n              ? valueProcessor(r.field, r.operator, r.value, r.valueSource)\n              : valueProcessor(r, opts)\n        : format === 'mongodb'\n          ? ruleProcessorInternal ?? defaultRuleProcessorMongoDB\n          : format === 'cel'\n            ? ruleProcessorInternal ?? defaultRuleProcessorCEL\n            : format === 'spel'\n              ? ruleProcessorInternal ?? defaultRuleProcessorSpEL\n              : format === 'jsonlogic'\n                ? ruleProcessorInternal ?? defaultRuleProcessorJsonLogic\n                : format === 'elasticsearch'\n                  ? ruleProcessorInternal ?? defaultRuleProcessorElasticSearch\n                  : format === 'jsonata'\n                    ? ruleProcessorInternal ?? defaultRuleProcessorJSONata\n                    : defaultValueProcessorByRule;\n    quoteFieldNamesWith = quoteFieldNamesWithArray(options.quoteFieldNamesWith);\n    validator = options.validator ?? (() => true);\n    fields = toFullOptionList(options.fields ?? []);\n    fallbackExpression = options.fallbackExpression ?? '';\n    paramPrefix = options.paramPrefix ?? ':';\n    paramsKeepPrefix = !!options.paramsKeepPrefix;\n    numberedParams = !!options.numberedParams;\n    parseNumbers = !!options.parseNumbers;\n    placeholderFieldName = options.placeholderFieldName ?? defaultPlaceholderFieldName;\n    placeholderOperatorName = options.placeholderOperatorName ?? defaultPlaceholderOperatorName;\n    quoteValuesWith = options.quoteValuesWith ?? \"'\";\n  }\n  if (!fallbackExpression) {\n    fallbackExpression =\n      format === 'mongodb'\n        ? '\"$and\":[{\"$expr\":true}]'\n        : format === 'cel' || format === 'spel'\n          ? '1 == 1'\n          : '(1 = 1)';\n  }\n\n  /**\n   * JSON\n   */\n  if (format === 'json' || format === 'json_without_ids') {\n    const rg = parseNumbers ? numerifyValues(ruleGroup) : ruleGroup;\n    if (format === 'json') {\n      return JSON.stringify(rg, null, 2);\n    }\n    return JSON.stringify(rg, (key, value) =>\n      // Remove `id` and `path` keys; leave everything else unchanged.\n      key === 'id' || key === 'path' ? undefined : value\n    );\n  }\n\n  // istanbul ignore else\n  if (typeof validator === 'function') {\n    const validationResult = validator(ruleGroup);\n    if (typeof validationResult === 'boolean') {\n      if (validationResult === false) {\n        return format === 'parameterized'\n          ? { sql: fallbackExpression, params: [] }\n          : format === 'parameterized_named'\n            ? { sql: fallbackExpression, params: {} }\n            : format === 'mongodb'\n              ? `{${fallbackExpression}}`\n              : format === 'jsonlogic'\n                ? false\n                : format === 'elasticsearch'\n                  ? {}\n                  : fallbackExpression;\n      }\n    } else {\n      validationMap = validationResult;\n    }\n  }\n\n  const validatorMap: Record<string, RuleValidator> = {};\n  const uniqueFields = toFlatOptionArray(fields) satisfies FullField[];\n  uniqueFields.forEach(f => {\n    // istanbul ignore else\n    if (typeof f.validator === 'function') {\n      validatorMap[(f.value ?? /* istanbul ignore next */ f.name)!] = f.validator;\n    }\n  });\n\n  const validateRule = (rule: RuleType) => {\n    let validationResult: boolean | ValidationResult | undefined = undefined;\n    let fieldValidator: RuleValidator | undefined = undefined;\n    if (rule.id) {\n      validationResult = validationMap[rule.id];\n    }\n    if (uniqueFields.length) {\n      const fieldArr = uniqueFields.filter(f => f.name === rule.field);\n      if (fieldArr.length) {\n        const field = fieldArr[0];\n        // istanbul ignore else\n        if (typeof field.validator === 'function') {\n          fieldValidator = field.validator;\n        }\n      }\n    }\n    return [validationResult, fieldValidator] as const;\n  };\n\n  /**\n   * SQL\n   */\n  if (format === 'sql') {\n    const processRuleGroup = (rg: RuleGroupTypeAny, outermostOrLonelyInGroup?: boolean): string => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        // TODO: test for the last case and remove \"ignore\" comment\n        return outermostOrLonelyInGroup ? fallbackExpression : /* istanbul ignore next */ '';\n      }\n\n      const processedRules = rg.rules.map(rule => {\n        // Independent combinators\n        if (typeof rule === 'string') {\n          return rule;\n        }\n\n        // Groups\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule, rg.rules.length === 1);\n        }\n\n        // Basic rule validation\n        const [validationResult, fieldValidator] = validateRule(rule);\n        if (\n          !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n          rule.field === placeholderFieldName ||\n          rule.operator === placeholderOperatorName\n        ) {\n          return '';\n        }\n\n        const escapeQuotes = (rule.valueSource ?? 'value') === 'value';\n\n        const fieldData = getOption(fields, rule.field);\n\n        // Use custom rule processor if provided...\n        if (typeof ruleProcessorInternal === 'function') {\n          return ruleProcessorInternal(rule, {\n            parseNumbers,\n            escapeQuotes,\n            quoteFieldNamesWith,\n            fieldData,\n            format,\n            quoteValuesWith,\n          });\n        }\n        // ...otherwise use default rule processor and pass in the value\n        // processor (which may be custom)\n        return defaultRuleProcessorSQL(rule, {\n          parseNumbers,\n          escapeQuotes,\n          valueProcessor: valueProcessorInternal,\n          quoteFieldNamesWith,\n          fieldData,\n          format,\n          quoteValuesWith,\n        });\n      });\n\n      if (processedRules.length === 0) {\n        return fallbackExpression;\n      }\n\n      return `${rg.not ? 'NOT ' : ''}(${processedRules\n        .filter(Boolean)\n        .join(isRuleGroupType(rg) ? ` ${rg.combinator} ` : ' ')})`;\n    };\n\n    return processRuleGroup(ruleGroup, true);\n  }\n\n  /**\n   * Parameterized SQL\n   */\n  if (format === 'parameterized' || format === 'parameterized_named') {\n    const parameterized = format === 'parameterized';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const params: any[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const paramsNamed: Record<string, any> = {};\n    const fieldParams: Map<string, Set<string>> = new Map();\n\n    const getNextNamedParam = (field: string) => {\n      if (!fieldParams.has(field)) {\n        fieldParams.set(field, new Set());\n      }\n      const nextNamedParam = `${field}_${fieldParams.get(field)!.size + 1}`;\n      fieldParams.get(field)!.add(nextNamedParam);\n      return nextNamedParam;\n    };\n\n    const processRule = (rule: RuleType) => {\n      const [validationResult, fieldValidator] = validateRule(rule);\n      if (\n        !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n        rule.field === placeholderFieldName ||\n        rule.operator === placeholderOperatorName\n      ) {\n        return '';\n      }\n\n      const fieldData = getOption(fields, rule.field);\n\n      const fieldParamNames = Object.fromEntries(\n        (Array.from(fieldParams.entries()) as [string, Set<string>][]).map(([f, s]) => [\n          f,\n          Array.from(s),\n        ])\n      );\n\n      const processedRule = (\n        typeof ruleProcessorInternal === 'function'\n          ? ruleProcessorInternal\n          : defaultRuleProcessorParameterized\n      )(\n        rule,\n        {\n          getNextNamedParam,\n          fieldParamNames,\n          parseNumbers,\n          quoteFieldNamesWith,\n          fieldData,\n          format,\n          paramPrefix,\n          paramsKeepPrefix,\n          numberedParams,\n          fallbackExpression,\n          valueProcessor: valueProcessorInternal,\n          fields,\n          placeholderFieldName,\n          placeholderOperatorName,\n          validator,\n        },\n        {\n          processedParams: params,\n        }\n      );\n\n      if (!isPojo(processedRule)) {\n        return '';\n      }\n\n      const { sql, params: customParams } = processedRule;\n\n      if (typeof sql !== 'string' || !sql) {\n        return '';\n      }\n\n      // istanbul ignore else\n      if (format === 'parameterized' && Array.isArray(customParams)) {\n        params.push(...customParams);\n      } else if (format === 'parameterized_named' && isPojo(customParams)) {\n        Object.assign(paramsNamed, customParams);\n        // `getNextNamedParam` already adds new params to the list, but a custom\n        // rule processor might not call it so we need to make sure we add\n        // any new params here.\n        Object.keys(customParams).forEach(p => fieldParams.get(rule.field)?.add(p));\n      }\n\n      return sql;\n    };\n\n    const processRuleGroup = (rg: RuleGroupTypeAny, outermostOrLonelyInGroup?: boolean): string => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        // TODO: test for the last case and remove \"ignore\" comment\n        return outermostOrLonelyInGroup ? fallbackExpression : /* istanbul ignore next */ '';\n      }\n\n      const processedRules = rg.rules.map(rule => {\n        if (typeof rule === 'string') {\n          return rule;\n        }\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule, rg.rules.length === 1);\n        }\n        return processRule(rule);\n      });\n\n      if (processedRules.length === 0) {\n        return fallbackExpression;\n      }\n\n      return `${rg.not ? 'NOT ' : ''}(${processedRules\n        .filter(Boolean)\n        .join(isRuleGroupType(rg) ? ` ${rg.combinator} ` : ' ')})`;\n    };\n\n    if (parameterized) {\n      return { sql: processRuleGroup(ruleGroup, true), params };\n    }\n    return { sql: processRuleGroup(ruleGroup, true), params: paramsNamed };\n  }\n\n  /**\n   * MongoDB\n   */\n  if (format === 'mongodb') {\n    const processRuleGroup = (rg: RuleGroupType, outermost?: boolean) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        return outermost ? fallbackExpression : '';\n      }\n\n      const combinator = `\"$${rg.combinator.toLowerCase()}\"`;\n      let hasChildRules = false;\n\n      const expressions: string[] = rg.rules\n        .map(rule => {\n          if (isRuleGroup(rule)) {\n            const processedRuleGroup = processRuleGroup(rule);\n            if (processedRuleGroup) {\n              hasChildRules = true;\n              // Don't wrap in curly braces if the result already is.\n              return /^\\{.+\\}$/.test(processedRuleGroup)\n                ? processedRuleGroup\n                : `{${processedRuleGroup}}`;\n            }\n            return '';\n          }\n          const [validationResult, fieldValidator] = validateRule(rule);\n          if (\n            !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n            rule.field === placeholderFieldName ||\n            rule.operator === placeholderOperatorName\n          ) {\n            return '';\n          }\n          const fieldData = getOption(fields, rule.field);\n          return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n            parseNumbers,\n            fieldData,\n            format,\n          });\n        })\n        .filter(Boolean);\n\n      return expressions.length > 0\n        ? expressions.length === 1 && !hasChildRules\n          ? expressions[0]\n          : `${combinator}:[${expressions.join(',')}]`\n        : fallbackExpression;\n    };\n\n    const rgStandard = isRuleGroupType(ruleGroup) ? ruleGroup : convertFromIC(ruleGroup);\n    const processedQuery = processRuleGroup(rgStandard, true);\n    return /^\\{.+\\}$/.test(processedQuery) ? processedQuery : `{${processedQuery}}`;\n  }\n\n  /**\n   * CEL\n   */\n  if (format === 'cel') {\n    const processRuleGroup = (rg: RuleGroupTypeAny, outermost?: boolean) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        return outermost ? fallbackExpression : '';\n      }\n\n      const expression: string = rg.rules\n        .map(rule => {\n          if (typeof rule === 'string') {\n            return celCombinatorMap[rule as DefaultCombinatorName];\n          }\n          if (isRuleGroup(rule)) {\n            return processRuleGroup(rule);\n          }\n          const [validationResult, fieldValidator] = validateRule(rule);\n          if (\n            !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n            rule.field === placeholderFieldName ||\n            rule.operator === placeholderOperatorName\n          ) {\n            return '';\n          }\n          const fieldData = getOption(fields, rule.field);\n          return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n            parseNumbers,\n            escapeQuotes: (rule.valueSource ?? 'value') === 'value',\n            fieldData,\n            format,\n          });\n        })\n        .filter(Boolean)\n        .join(\n          isRuleGroupType(rg)\n            ? ` ${celCombinatorMap[rg.combinator as DefaultCombinatorName]} `\n            : ' '\n        );\n\n      const [prefix, suffix] = rg.not || !outermost ? [`${rg.not ? '!' : ''}(`, ')'] : ['', ''];\n\n      return expression ? `${prefix}${expression}${suffix}` : fallbackExpression;\n    };\n\n    return processRuleGroup(ruleGroup, true);\n  }\n\n  /**\n   * SpEL\n   */\n  if (format === 'spel') {\n    const processRuleGroup = (rg: RuleGroupTypeAny, outermost?: boolean) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        return outermost ? fallbackExpression : '';\n      }\n\n      const expression: string = rg.rules\n        .map(rule => {\n          if (typeof rule === 'string') {\n            return rule;\n          }\n          if (isRuleGroup(rule)) {\n            return processRuleGroup(rule);\n          }\n          const [validationResult, fieldValidator] = validateRule(rule);\n          if (\n            !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n            rule.field === placeholderFieldName ||\n            rule.operator === placeholderOperatorName\n          ) {\n            return '';\n          }\n          const fieldData = getOption(fields, rule.field);\n          return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n            parseNumbers,\n            escapeQuotes: (rule.valueSource ?? 'value') === 'value',\n            fieldData,\n            format,\n          });\n        })\n        .filter(Boolean)\n        .join(isRuleGroupType(rg) ? ` ${rg.combinator} ` : ' ');\n\n      const [prefix, suffix] = rg.not || !outermost ? [`${rg.not ? '!' : ''}(`, ')'] : ['', ''];\n\n      return expression ? `${prefix}${expression}${suffix}` : fallbackExpression;\n    };\n\n    return processRuleGroup(ruleGroup, true);\n  }\n\n  /**\n   * JSONata\n   */\n  if (format === 'jsonata') {\n    const processRuleGroup = (rg: RuleGroupTypeAny, outermost?: boolean) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        return outermost ? fallbackExpression : '';\n      }\n\n      const expression: string = rg.rules\n        .map(rule => {\n          if (typeof rule === 'string') {\n            return rule;\n          }\n          if (isRuleGroup(rule)) {\n            return processRuleGroup(rule);\n          }\n          const [validationResult, fieldValidator] = validateRule(rule);\n          if (\n            !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n            rule.field === placeholderFieldName ||\n            rule.operator === placeholderOperatorName\n          ) {\n            return '';\n          }\n          const fieldData = getOption(fields, rule.field);\n          return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n            parseNumbers,\n            escapeQuotes: (rule.valueSource ?? 'value') === 'value',\n            fieldData,\n            format,\n            quoteFieldNamesWith,\n          });\n        })\n        .filter(Boolean)\n        .join(isRuleGroupType(rg) ? ` ${rg.combinator} ` : ' ');\n\n      const [prefix, suffix] = rg.not || !outermost ? [`${rg.not ? '$not' : ''}(`, ')'] : ['', ''];\n\n      return expression ? `${prefix}${expression}${suffix}` : fallbackExpression;\n    };\n\n    return processRuleGroup(ruleGroup, true);\n  }\n\n  /**\n   * JsonLogic\n   */\n  if (format === 'jsonlogic') {\n    const query = isRuleGroupType(ruleGroup) ? ruleGroup : convertFromIC(ruleGroup);\n\n    const processRuleGroup = (rg: RuleGroupType, _outermost?: boolean): RQBJsonLogic => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        return false;\n      }\n\n      const processedRules = rg.rules\n        .map(rule => {\n          if (isRuleGroup(rule)) {\n            return processRuleGroup(rule);\n          }\n          const [validationResult, fieldValidator] = validateRule(rule);\n          if (\n            !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n            rule.field === placeholderFieldName ||\n            rule.operator === placeholderOperatorName\n          ) {\n            return false;\n          }\n          const fieldData = getOption(fields, rule.field);\n          return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n            parseNumbers,\n            fieldData,\n            format,\n          });\n        })\n        .filter(Boolean);\n\n      if (processedRules.length === 0) {\n        return false;\n      }\n\n      const jsonRuleGroup: RQBJsonLogic = { [rg.combinator]: processedRules } as {\n        [k in DefaultCombinatorName]: [RQBJsonLogic, RQBJsonLogic, ...RQBJsonLogic[]];\n      };\n\n      return rg.not ? { '!': jsonRuleGroup } : jsonRuleGroup;\n    };\n\n    return processRuleGroup(query, true);\n  }\n\n  /**\n   * ElasticSearch\n   */\n  if (format === 'elasticsearch') {\n    const query = isRuleGroupType(ruleGroup) ? ruleGroup : convertFromIC(ruleGroup);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processRuleGroup = (rg: RuleGroupType): Record<string, any> | false => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */ ''])) {\n        return false;\n      }\n\n      const processedRules = rg.rules\n        .map(rule => {\n          if (isRuleGroup(rule)) {\n            return processRuleGroup(rule);\n          }\n          const [validationResult, fieldValidator] = validateRule(rule);\n          if (\n            !isRuleOrGroupValid(rule, validationResult, fieldValidator) ||\n            rule.field === placeholderFieldName ||\n            rule.operator === placeholderOperatorName\n          ) {\n            return false;\n          }\n          const fieldData = getOption(fields, rule.field);\n          return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n            parseNumbers,\n            fieldData,\n            format,\n          });\n        })\n        .filter(Boolean);\n\n      if (processedRules.length === 0) {\n        return false;\n      }\n\n      return {\n        bool: rg.not\n          ? {\n              must_not:\n                rg.combinator === 'or' ? { bool: { should: processedRules } } : processedRules,\n            }\n          : { [rg.combinator === 'or' ? 'should' : 'must']: processedRules },\n      };\n    };\n\n    const processedRuleGroup = processRuleGroup(query);\n    return processedRuleGroup === false ? {} : processedRuleGroup;\n  }\n\n  return '';\n}\n\nexport { formatQuery };\n","import type { ValueProcessorLegacy } from '../../types/index.noReact';\nimport { defaultRuleProcessorCEL } from './defaultRuleProcessorCEL';\nimport { defaultRuleProcessorMongoDB } from './defaultRuleProcessorMongoDB';\nimport { defaultRuleProcessorSpEL } from './defaultRuleProcessorSpEL';\nimport { defaultValueProcessorByRule } from './defaultValueProcessorByRule';\n\nconst internalValueProcessors = {\n  default: defaultValueProcessorByRule,\n  mongodb: defaultRuleProcessorMongoDB,\n  cel: defaultRuleProcessorCEL,\n  spel: defaultRuleProcessorSpEL,\n} as const;\n\nconst generateValueProcessor =\n  (format: 'default' | 'mongodb' | 'cel' | 'spel'): ValueProcessorLegacy =>\n  (field, operator, value, valueSource) =>\n    internalValueProcessors[format](\n      { field, operator, value, valueSource },\n      { parseNumbers: false }\n    );\n// TODO: Deprecate defaultValueProcessor.\n/**\n * Default value processor used by {@link formatQuery} for \"sql\" format.\n */\nexport const defaultValueProcessor = generateValueProcessor('default');\n/**\n * @deprecated Prefer {@link defaultRuleProcessorMongoDB}.\n */\nexport const defaultMongoDBValueProcessor = generateValueProcessor('mongodb');\n/**\n * @deprecated Prefer {@link defaultRuleProcessorCEL}.\n */\nexport const defaultCELValueProcessor = generateValueProcessor('cel');\n/**\n * @deprecated Prefer {@link defaultRuleProcessorSpEL}.\n */\nexport const defaultSpELValueProcessor = generateValueProcessor('spel');\n\nexport { defaultRuleProcessorElasticSearch } from './defaultRuleProcessorElasticSearch';\nexport { defaultRuleProcessorJSONata } from './defaultRuleProcessorJSONata';\nexport { defaultRuleProcessorJsonLogic } from './defaultRuleProcessorJsonLogic';\nexport { defaultRuleProcessorParameterized } from './defaultRuleProcessorParameterized';\nexport { defaultRuleProcessorSQL } from './defaultRuleProcessorSQL';\nexport * from './formatQuery';\nexport { jsonLogicAdditionalOperators } from './utils';\nexport {\n  defaultRuleProcessorCEL,\n  defaultRuleProcessorMongoDB,\n  defaultRuleProcessorSpEL,\n  defaultValueProcessorByRule,\n};\n/**\n * @deprecated Renamed to {@link defaultRuleProcessorCEL}.\n */\nexport const defaultValueProcessorCELByRule = defaultRuleProcessorCEL;\n/**\n * @deprecated Renamed to {@link defaultRuleProcessorMongoDB}.\n */\nexport const defaultValueProcessorMongoDBByRule = defaultRuleProcessorMongoDB;\n/**\n * @deprecated Renamed to {@link defaultRuleProcessorSpEL}.\n */\nexport const defaultValueProcessorSpELByRule = defaultRuleProcessorSpEL;\n","import type { Path, RuleGroupTypeAny, RuleType } from '../types/index.noReact';\nimport { isRuleGroup } from './isRuleGroup';\nimport { isPojo } from './misc';\n\n/**\n * Return type for {@link findPath}.\n */\nexport type FindPathReturnType = RuleGroupTypeAny | RuleType | null;\n\n/**\n * Returns the {@link RuleType} or {@link RuleGroupType}/{@link RuleGroupTypeIC}\n * at the given path within a query.\n */\nexport const findPath = (path: Path, query: RuleGroupTypeAny): FindPathReturnType => {\n  let target: FindPathReturnType = query;\n  let level = 0;\n  while (level < path.length && target && isRuleGroup(target)) {\n    const t: RuleGroupTypeAny | RuleType | string = target.rules[path[level]];\n    if (typeof t !== 'string') {\n      target = t;\n    } else {\n      target = null;\n    }\n    level++;\n  }\n\n  return target;\n};\n\n/**\n * Truncates the last element of an array and returns the result as a new array.\n */\nexport const getParentPath = (path: Path) => path.slice(0, path.length - 1);\n\n/**\n * Determines if two paths (each `Path`) are equivalent.\n */\nexport const pathsAreEqual = (path1: Path, path2: Path) =>\n  path1.length === path2.length && path1.every((val, idx) => val === path2[idx]);\n\n/**\n * Determines if the first path is an ancestor of the second path. The first path must\n * be shorter and exactly match the second path up through the length of the first path.\n */\nexport const isAncestor = (maybeAncestor: Path, path: Path) =>\n  maybeAncestor.length < path.length && RegExp(`^${maybeAncestor.join('-')}`).test(path.join('-'));\n\n/**\n * Finds the deepest/longest path that two paths have in common.\n */\nexport const getCommonAncestorPath = (path1: Path, path2: Path) => {\n  const commonAncestorPath: Path = [];\n  const parentPath1 = getParentPath(path1);\n  const parentPath2 = getParentPath(path2);\n  let i = 0;\n\n  while (i < parentPath1.length && i < parentPath2.length && parentPath1[i] === parentPath2[i]) {\n    commonAncestorPath.push(parentPath2[i]);\n    i++;\n  }\n\n  return commonAncestorPath;\n};\n\n/**\n * Determines if the rule or group at the specified path is either disabled itself\n * or disabled by an ancestor group.\n */\nexport const pathIsDisabled = (path: Path, query: RuleGroupTypeAny) => {\n  let disabled = !!query.disabled;\n  let target: RuleType | RuleGroupTypeAny = query;\n  let level = 0;\n  while (level < path.length && !disabled && isRuleGroup(target)) {\n    const t: RuleGroupTypeAny | RuleType | string = target.rules[path[level]];\n    if (isPojo(t) && (isRuleGroup(t) || ('field' in t && !!t.field))) {\n      disabled = !!t.disabled;\n      target = t;\n    }\n    level++;\n  }\n  return disabled;\n};\n","import type { AccessibleDescriptionGenerator as ADG } from '../types/index.noReact';\nimport { pathsAreEqual } from './pathUtils';\n\nexport const generateAccessibleDescription: ADG = params =>\n  pathsAreEqual([], params.path) ? `Query builder` : `Rule group at path ${params.path.join('-')}`;\n","const cryptoModule = globalThis.crypto;\n\n/**\n * Default `id` generator. Generates a valid v4 UUID. Uses `crypto.randomUUID()`\n * when available, otherwise uses an alternate method based on `getRandomValues`.\n * The returned string is guaranteed to match this regex:\n * ```\n * /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n * ```\n * @returns Valid v4 UUID\n */\n// Default implementation adapted from https://stackoverflow.com/a/68141099/217579\n// istanbul ignore next\nexport let generateID = () =>\n  '00-0-4-2-000'.replace(/[^-]/g, (s: string) =>\n    (((Math.random() + ~~s) * 0x10000) >> parseInt(s)).toString(16).padStart(4, '0')\n  );\n\n// Improve on the default implementation by using the crypto package if it's available\n// istanbul ignore else\nif (cryptoModule) {\n  // istanbul ignore else\n  if (typeof cryptoModule.randomUUID === 'function') {\n    generateID = () => cryptoModule.randomUUID();\n  } else if (typeof cryptoModule.getRandomValues === 'function') {\n    // `randomUUID` is much simpler and faster, but it's only guaranteed to be\n    // available in secure contexts (server-side, https, etc.). `generateID`\n    // doesn't really need to be cryptographically secure, it only needs a\n    // fairly low chance of collisions. We fall back to the always-available\n    // `getRandomValues` here (while still generating a valid v4 UUID) when\n    // `randomUUID` is not available.\n    const position19vals = '89ab';\n    const container = new Uint32Array(32);\n\n    generateID = () => {\n      cryptoModule.getRandomValues(container);\n      let id = (container[0] % 16).toString(16);\n      for (let i = 1; i < 32; i++) {\n        if (i === 12) {\n          id = `${id}${'4'}`;\n        } else if (i === 16) {\n          id = `${id}${position19vals[container[17] % 4]}`;\n        } else {\n          id = `${id}${(container[i] % 16).toString(16)}`;\n        }\n\n        if (i === 7 || i === 11 || i === 15 || i === 19) {\n          id = `${id}${'-'}`;\n        }\n      }\n      return id;\n    };\n  }\n}\n","import * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { QueryBuilderContext } from '../components';\nimport type { FullField, QueryBuilderContextProps, QueryBuilderContextProvider } from '../types';\nimport { mergeClassnames } from './mergeClassnames';\nimport { mergeTranslations } from './mergeTranslations';\n\nexport type GetCompatContextProviderProps = Pick<\n  QueryBuilderContextProps<FullField, string>,\n  'controlClassnames' | 'controlElements' | 'translations'\n> & { key: string };\n\n/**\n * Generates a context provider for a compatibility package.\n */\nexport const getCompatContextProvider = (\n  gccpProps: GetCompatContextProviderProps\n): QueryBuilderContextProvider => {\n  const {\n    key,\n    controlClassnames: compatClassnames,\n    controlElements: compatElements,\n    translations: compatTranslations,\n  } = gccpProps;\n\n  return props => {\n    const rqbContext = useContext(QueryBuilderContext);\n\n    const classnamesObject = useMemo(\n      () =>\n        compatClassnames\n          ? {\n              controlClassnames: mergeClassnames(\n                rqbContext.controlClassnames,\n                props.controlClassnames,\n                compatClassnames\n              ),\n            }\n          : {},\n      [props.controlClassnames, rqbContext.controlClassnames]\n    );\n\n    const newTranslations = useMemo(\n      () => mergeTranslations(rqbContext.translations, compatTranslations, props.translations),\n      [props.translations, rqbContext.translations]\n    );\n\n    const newContextProps = useMemo(\n      (): QueryBuilderContextProps<FullField, string> => ({\n        ...rqbContext,\n        ...classnamesObject,\n        controlElements: {\n          ...rqbContext.controlElements,\n          ...compatElements,\n          ...props.controlElements,\n        },\n        translations: newTranslations,\n      }),\n      [classnamesObject, newTranslations, props.controlElements, rqbContext]\n    );\n\n    return (\n      <QueryBuilderContext.Provider value={newContextProps} key={key}>\n        {props.children}\n      </QueryBuilderContext.Provider>\n    );\n  };\n};\n","import clsx from 'clsx';\nimport type { Classnames } from '../types';\n\n/**\n * Merges a list of partial {@link Classnames} definitions into a single definition.\n */\nexport const mergeClassnames = (...args: (Partial<Classnames> | undefined)[]): Classnames => {\n  const joinClassnamesByName = (name: keyof Classnames) =>\n    clsx((args.filter(Boolean) as Partial<Classnames>[]).map(c => clsx(c[name])));\n  return {\n    queryBuilder: joinClassnamesByName('queryBuilder'),\n    ruleGroup: joinClassnamesByName('ruleGroup'),\n    header: joinClassnamesByName('header'),\n    body: joinClassnamesByName('body'),\n    combinators: joinClassnamesByName('combinators'),\n    addRule: joinClassnamesByName('addRule'),\n    addGroup: joinClassnamesByName('addGroup'),\n    cloneRule: joinClassnamesByName('cloneRule'),\n    cloneGroup: joinClassnamesByName('cloneGroup'),\n    removeGroup: joinClassnamesByName('removeGroup'),\n    rule: joinClassnamesByName('rule'),\n    fields: joinClassnamesByName('fields'),\n    operators: joinClassnamesByName('operators'),\n    value: joinClassnamesByName('value'),\n    removeRule: joinClassnamesByName('removeRule'),\n    notToggle: joinClassnamesByName('notToggle'),\n    shiftActions: joinClassnamesByName('shiftActions'),\n    dragHandle: joinClassnamesByName('dragHandle'),\n    lockRule: joinClassnamesByName('lockRule'),\n    lockGroup: joinClassnamesByName('lockGroup'),\n    valueSource: joinClassnamesByName('valueSource'),\n    actionElement: joinClassnamesByName('actionElement'),\n    valueSelector: joinClassnamesByName('valueSelector'),\n  };\n};\n","import { produce } from 'immer';\nimport type { Translations } from '../types';\nimport { objectKeys } from './objectUtils';\n\nconst defaultTranslationsBase: Partial<Translations> = {};\n\n/**\n * Merges any number of partial {@link Translations} into a single definition.\n */\nexport const mergeTranslations = (\n  ...args: (Partial<Translations> | undefined)[]\n): Partial<Translations> => {\n  const [base, ...otherTranslations] = args;\n\n  return produce(base ?? defaultTranslationsBase, draft => {\n    for (const translations of otherTranslations) {\n      if (!translations) continue;\n      objectKeys(translations).forEach(t => {\n        draft[t] = { ...draft[t], ...translations[t] };\n      });\n    }\n  });\n};\n","// All code in this file is adapted from:\n// npm: https://www.npmjs.com/package/ts-extras\n// src: https://github.com/sindresorhus/ts-extras\n\n/**\n * Original looked like this (not sure why template string is used):\n * ```\n * type ObjectKeys<T extends object> = `${Exclude<keyof T, symbol>}`;\n * ```\n */\ntype ObjectKeys<T extends object> = Exclude<keyof T, symbol>;\n\n/**\n * A strongly-typed version of `Object.keys()`.\n *\n * [Original source](https://github.com/sindresorhus/ts-extras/blob/44f57392c5f027268330771996c4fdf9260b22d6/source/object-keys.ts)\n */\nexport const objectKeys = Object.keys as <Type extends object>(\n  value: Type\n) => Array<ObjectKeys<Type>>;\n\n/**\n * A strongly-typed version of `Object.entries()`.\n *\n * [Original source](https://github.com/sindresorhus/ts-extras/blob/44f57392c5f027268330771996c4fdf9260b22d6/source/object-entries.ts)\n */\nexport const objectEntries = Object.entries as <Type extends Record<PropertyKey, unknown>>(\n  value: Type\n) => Array<[ObjectKeys<Type>, Type[ObjectKeys<Type>]]>;\n","import { standardClassnames } from '../defaults';\nimport type { ValidationResult } from '../types/index.noReact';\n\n/**\n * Gets the standard classname for valid or invalid components\n * based on the given validation result.\n */\nexport const getValidationClassNames = (validationResult: boolean | ValidationResult) => {\n  const valid =\n    typeof validationResult === 'boolean'\n      ? validationResult\n      : typeof validationResult === 'object' && validationResult !== null\n        ? validationResult.valid\n        : null;\n  return typeof valid === 'boolean'\n    ? valid\n      ? standardClassnames.valid\n      : standardClassnames.invalid\n    : '';\n};\n","import type { FullField, GetOptionIdentifierType, ValueSources } from '../types/index.noReact';\nimport { toFullOption } from './toFullOption';\n\nconst defaultValueSourcesArray: ValueSources = ['value'];\n\nconst dummyFD = {\n  name: 'name',\n  value: 'name',\n  valueSources: null,\n  label: 'label',\n};\n\n/**\n * Utility function to get the value sources array for the given\n * field and operator. If the field definition does not define a\n * `valueSources` property, the `getValueSources` prop is used.\n * Returns `[\"value\"]` by default.\n */\nexport const getValueSourcesUtil = <F extends FullField, O extends string>(\n  fieldData: F,\n  operator: string,\n  getValueSources?: (\n    field: GetOptionIdentifierType<F>,\n    operator: O,\n    misc: { fieldData: F }\n  ) => ValueSources\n): ValueSources => {\n  // TypeScript doesn't allow it directly, but in practice\n  // `fieldData` can end up being undefined or null. The nullish\n  // coalescing assignment below avoids errors like\n  // \"TypeError: Cannot read properties of undefined (reading 'name')\"\n  const fd = fieldData ? toFullOption(fieldData) : /* istanbul ignore else */ dummyFD;\n\n  if (fd.valueSources) {\n    if (typeof fd.valueSources === 'function') {\n      return fd.valueSources(operator as O);\n    }\n    return fd.valueSources;\n  }\n  if (getValueSources) {\n    const vals = getValueSources(fd.value as GetOptionIdentifierType<F>, operator as O, {\n      fieldData: toFullOption(fd) as F,\n    });\n    /* istanbul ignore else */\n    if (vals) return vals;\n  }\n\n  return defaultValueSourcesArray;\n};\n","import { produce } from 'immer';\nimport type {\n  RuleGroupArray,\n  RuleGroupICArray,\n  RuleGroupTypeAny,\n  RuleType,\n} from '../types/index.noReact';\nimport { generateID } from './generateID';\nimport { isRuleGroup } from './isRuleGroup';\n\n/**\n * Options for {@link prepareRule}/{@link prepareRuleGroup}.\n */\nexport interface PreparerOptions {\n  idGenerator?: () => string;\n}\n\n/**\n * Ensures that a rule is valid by adding an `id` property if it does not already exist.\n */\nexport const prepareRule = (rule: RuleType, { idGenerator = generateID }: PreparerOptions = {}) =>\n  produce(rule, draft => {\n    if (!draft.id) {\n      draft.id = idGenerator();\n    }\n  });\n\n/**\n * Ensures that a rule group is valid by recursively adding an `id` property to the group itself\n * and all its rules and subgroups where one does not already exist.\n */\nexport const prepareRuleGroup = <RG extends RuleGroupTypeAny>(\n  queryObject: RG,\n  { idGenerator = generateID }: PreparerOptions = {}\n): RG =>\n  produce(queryObject, draft => {\n    if (!draft.id) {\n      draft.id = idGenerator();\n    }\n    draft.rules = draft.rules.map(r =>\n      typeof r === 'string'\n        ? r\n        : isRuleGroup(r)\n          ? prepareRuleGroup(r, { idGenerator })\n          : prepareRule(r, { idGenerator })\n    ) as RuleGroupArray | RuleGroupICArray;\n  });\n\n/**\n * Ensures that a rule or group is valid. See {@link prepareRule} and {@link prepareRuleGroup}.\n */\nexport const prepareRuleOrGroup = <RG extends RuleGroupTypeAny>(\n  rg: RG | RuleType,\n  { idGenerator = generateID }: PreparerOptions = {}\n) => (isRuleGroup(rg) ? prepareRuleGroup(rg, { idGenerator }) : prepareRule(rg, { idGenerator }));\n","import { produce } from 'immer';\nimport { defaultCombinators } from '../defaults';\nimport type {\n  OptionList,\n  Path,\n  RuleGroupTypeAny,\n  RuleType,\n  UpdateableProperties,\n  ValueSources,\n} from '../types/index.noReact';\nimport { generateID } from './generateID';\nimport { isRuleGroup, isRuleGroupType, isRuleGroupTypeIC } from './isRuleGroup';\nimport { getFirstOption } from './optGroupUtils';\nimport { findPath, getCommonAncestorPath, getParentPath, pathsAreEqual } from './pathUtils';\nimport { prepareRuleOrGroup } from './prepareQueryObjects';\nimport { regenerateID, regenerateIDs } from './regenerateIDs';\n\n/**\n * Options object for {@link add}.\n */\nexport interface AddOptions {\n  /**\n   * If the query extends `RuleGroupTypeIC` (i.e. the query has independent\n   * combinators), then the first combinator in this list will be  inserted\n   * before the new rule/group if the parent group is not empty. This option\n   * is overridden by `combinatorPreceding`.\n   */\n  combinators?: OptionList;\n  /**\n   * If the query extends `RuleGroupTypeIC` (i.e. the query has independent\n   * combinators), then this combinator will be inserted before  the new rule/group\n   * if the parent group is not empty. This option will supersede `combinators`.\n   */\n  combinatorPreceding?: string;\n  /**\n   * ID generator.\n   */\n  idGenerator?: () => string;\n}\n/**\n * Adds a rule or group to a query.\n * @returns The new query with the rule or group added.\n */\nexport const add = <RG extends RuleGroupTypeAny>(\n  /** The query to update. */\n  query: RG,\n  /** The rule or group to add. */\n  ruleOrGroup: RG | RuleType,\n  /** Path of the group to add to. */\n  parentPath: Path,\n  /** Options object. */\n  {\n    combinators = defaultCombinators,\n    combinatorPreceding,\n    idGenerator = generateID,\n  }: AddOptions = {}\n) =>\n  produce(query, draft => {\n    const parent = findPath(parentPath, draft);\n\n    if (!parent || !isRuleGroup(parent)) return;\n\n    if (!isRuleGroupType(parent) && parent.rules.length > 0) {\n      const prevCombinator = parent.rules[parent.rules.length - 2];\n      parent.rules.push(\n        // @ts-expect-error This is technically a type violation until the next push\n        // to the rules array, but that happens immediately and unconditionally so\n        // there's no significant risk.\n        combinatorPreceding ??\n          (typeof prevCombinator === 'string' ? prevCombinator : getFirstOption(combinators))\n      );\n    }\n    // The \"as RuleType\" here just avoids the ambiguity with RuleGroupTypeAny\n    parent.rules.push(prepareRuleOrGroup(ruleOrGroup, { idGenerator }) as RuleType);\n  });\n\n/**\n * Options object for {@link update}.\n */\nexport interface UpdateOptions {\n  /**\n   * When updating the `field` of a rule, the rule's `operator`, `value`, and `valueSource`\n   * will be reset to their respective defaults. Defaults to `true`.\n   */\n  resetOnFieldChange?: boolean;\n  /**\n   * When updating the `operator` of a rule, the rule's `value` and `valueSource`\n   * will be reset to their respective defaults. Defaults to `false`.\n   */\n  resetOnOperatorChange?: boolean;\n  /**\n   * Determines the default operator name for a given field.\n   */\n  getRuleDefaultOperator?: (field: string) => string;\n  /**\n   * Determines the valid value sources for a given field and operator.\n   */\n  getValueSources?: (field: string, operator: string) => ValueSources;\n  /**\n   * Gets the default value for a given rule, in case the value needs to be reset.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getRuleDefaultValue?: (rule: RuleType) => any;\n}\n/**\n * Updates a property of a rule or group within a query.\n * @returns The new query with the rule or group property updated.\n */\nexport const update = <RG extends RuleGroupTypeAny>(\n  /** The query to update. */\n  query: RG,\n  /** The name of the property to update. */\n  prop: UpdateableProperties,\n  /** The new value of the property. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n  /** The path of the rule or group to update. */\n  path: Path,\n  /** Options object. */\n  {\n    resetOnFieldChange = true,\n    resetOnOperatorChange = false,\n    getRuleDefaultOperator = () => '=',\n    getValueSources = () => ['value'],\n    getRuleDefaultValue = () => '',\n  }: UpdateOptions = {}\n) =>\n  produce(query, draft => {\n    if (prop === 'combinator' && !isRuleGroupType(draft)) {\n      // Independent combinators\n      const parentRules = (findPath(getParentPath(path), draft) as RG).rules;\n      // Only update an independent combinator if it occupies an odd index\n      if (path[path.length - 1] % 2 === 1) {\n        parentRules[path[path.length - 1]] = value;\n      }\n      return;\n    }\n\n    const ruleOrGroup = findPath(path, draft);\n\n    // Ignore invalid paths\n    if (!ruleOrGroup) return;\n\n    const isGroup = isRuleGroup(ruleOrGroup);\n\n    // Only update if there is actually a change\n    // @ts-expect-error prop can refer to rule or group properties\n    if (ruleOrGroup[prop] === value) return;\n\n    // Handle valueSource updates later\n    if (prop !== 'valueSource') {\n      // @ts-expect-error prop can refer to rule or group properties\n      ruleOrGroup[prop] = value;\n    }\n\n    // If this is a group, there's no more to do\n    if (isGroup) return;\n\n    let resetValueSource = false;\n    let resetValue = false;\n\n    // Set default operator, valueSource, and value for field change\n    if (resetOnFieldChange && prop === 'field') {\n      ruleOrGroup.operator = getRuleDefaultOperator(value);\n      resetValueSource = true;\n      resetValue = true;\n    }\n\n    // Set default valueSource and value for operator change\n    if (resetOnOperatorChange && prop === 'operator') {\n      resetValueSource = true;\n      resetValue = true;\n    }\n\n    const defaultValueSource = getValueSources(ruleOrGroup.field, ruleOrGroup.operator)[0];\n    if (\n      (resetValueSource &&\n        ruleOrGroup.valueSource &&\n        defaultValueSource !== ruleOrGroup.valueSource) ||\n      (prop === 'valueSource' && value !== ruleOrGroup.valueSource)\n    ) {\n      // Only reset the value if we're changing the valueSource either\n      // 1) from `undefined` to something that is _not_ the default, or\n      // 2) from the current (defined) value to something else\n      resetValue =\n        !!ruleOrGroup.valueSource || (!ruleOrGroup.valueSource && value !== defaultValueSource);\n      ruleOrGroup.valueSource = resetValueSource ? defaultValueSource : value;\n    }\n\n    if (resetValue) {\n      // The default value should be a valid field name if defaultValueSource is 'field'\n      ruleOrGroup.value = getRuleDefaultValue(ruleOrGroup);\n    }\n  });\n\n/**\n * Removes a rule or group from a query.\n * @returns The new query with the rule or group removed.\n */\nexport const remove = <RG extends RuleGroupTypeAny>(\n  /** The query to update. */\n  query: RG,\n  /** Path of the rule or group to remove. */\n  path: Path\n) => {\n  if (\n    // Can't remove the root group\n    path.length === 0 ||\n    // Can't independently remove independent combinators\n    (!isRuleGroupType(query) && !findPath(path, query))\n  ) {\n    return query;\n  }\n\n  return produce(query, draft => {\n    const index = path[path.length - 1];\n    const parent = findPath(getParentPath(path), draft);\n    if (parent && isRuleGroup(parent)) {\n      if (!isRuleGroupType(parent) && parent.rules.length > 1) {\n        const idxStartDelete = index === 0 ? 0 : index - 1;\n        parent.rules.splice(idxStartDelete, 2);\n      } else {\n        parent.rules.splice(index, 1);\n      }\n    }\n  });\n};\n\nconst getNextPath = (\n  query: RuleGroupTypeAny,\n  currentPath: Path,\n  newPathOrShiftDirection: Path | 'up' | 'down'\n): Path => {\n  if (Array.isArray(newPathOrShiftDirection)) {\n    return newPathOrShiftDirection;\n  }\n\n  const ic = isRuleGroupTypeIC(query);\n\n  if (newPathOrShiftDirection === 'up') {\n    if (pathsAreEqual(currentPath, [0])) {\n      return currentPath;\n    } else if (currentPath.at(-1) === 0) {\n      const parentPath = getParentPath(currentPath);\n      return [...getParentPath(parentPath), Math.max(0, parentPath.at(-1)! - (ic ? 1 : 0))];\n    } else {\n      const evaluationPath = [\n        ...getParentPath(currentPath),\n        Math.max(0, currentPath.at(-1)! - (ic ? 2 : 1)),\n      ];\n      const entityAtTarget = findPath(evaluationPath, query);\n      if (isRuleGroup(entityAtTarget)) {\n        return [...evaluationPath, entityAtTarget.rules.length];\n      } else {\n        const targetPath = [\n          ...getParentPath(currentPath),\n          Math.max(0, currentPath.at(-1)! - (ic ? 3 : 1)),\n        ];\n        return targetPath;\n      }\n    }\n  } else if (newPathOrShiftDirection === 'down') {\n    if (pathsAreEqual([query.rules.length - 1], currentPath)) {\n      return currentPath;\n    } else if (\n      currentPath.at(-1) ===\n      (findPath(getParentPath(currentPath), query) as RuleGroupTypeAny).rules.length - 1\n    ) {\n      const parentPath = getParentPath(currentPath);\n      return [...getParentPath(parentPath), parentPath.at(-1)! + 1];\n    } else {\n      const evaluationPath = [...getParentPath(currentPath), currentPath.at(-1)! + (ic ? 2 : 1)];\n      const entityToEvaluate = findPath(evaluationPath, query);\n      if (isRuleGroup(entityToEvaluate)) {\n        return [...evaluationPath, 0];\n      } else {\n        const targetPath = [...getParentPath(currentPath), currentPath.at(-1)! + (ic ? 3 : 2)];\n        return targetPath;\n      }\n    }\n  }\n\n  return currentPath;\n};\n\n/**\n * Options object for {@link move}.\n */\nexport interface MoveOptions {\n  /**\n   * When `true`, the source rule/group will not be removed from its original path.\n   */\n  clone?: boolean;\n  /**\n   * If the query extends `RuleGroupTypeIC` (i.e. the query is using independent\n   * combinators), then the first combinator in this list will be inserted before\n   * the rule/group if necessary.\n   */\n  combinators?: OptionList;\n  /**\n   * ID generator.\n   */\n  idGenerator?: () => string;\n}\n/**\n * Moves a rule or group from one path to another. In the options parameter, pass\n * `{ clone: true }` to copy instead of move.\n * @returns The new query with the rule or group moved or cloned.\n */\nexport const move = <RG extends RuleGroupTypeAny>(\n  /** The query to update. */\n  query: RG,\n  /** Original path of the rule or group to move. */\n  oldPath: Path,\n  /** Path to move the rule or group to, or a shift direction. */\n  newPath: Path | 'up' | 'down',\n  /** Options object. */\n  { clone = false, combinators = defaultCombinators, idGenerator = generateID }: MoveOptions = {}\n) => {\n  const nextPath = getNextPath(query, oldPath, newPath);\n\n  // Don't move to the same location or a path that doesn't exist yet\n  if (\n    oldPath.length === 0 ||\n    pathsAreEqual(oldPath, nextPath) ||\n    !findPath(getParentPath(nextPath), query)\n  ) {\n    return query;\n  }\n\n  const ruleOrGroupOriginal = findPath(oldPath, query);\n  if (!ruleOrGroupOriginal) {\n    return query;\n  }\n  const ruleOrGroup = clone\n    ? isRuleGroup(ruleOrGroupOriginal)\n      ? regenerateIDs(ruleOrGroupOriginal, { idGenerator })\n      : regenerateID(ruleOrGroupOriginal, { idGenerator })\n    : ruleOrGroupOriginal;\n\n  return produce(query, draft => {\n    const independentCombinators = isRuleGroupTypeIC(draft);\n    const parentOfRuleToRemove = findPath(getParentPath(oldPath), draft) as RG;\n    const ruleToRemoveIndex = oldPath[oldPath.length - 1];\n    const oldPrevCombinator =\n      independentCombinators && ruleToRemoveIndex > 0\n        ? (parentOfRuleToRemove.rules[ruleToRemoveIndex - 1] as string)\n        : null;\n    const oldNextCombinator =\n      independentCombinators && ruleToRemoveIndex < parentOfRuleToRemove.rules.length - 1\n        ? (parentOfRuleToRemove.rules[ruleToRemoveIndex + 1] as string)\n        : null;\n\n    // Remove the source item if not cloning\n    if (!clone) {\n      const idxStartDelete = independentCombinators\n        ? Math.max(0, ruleToRemoveIndex - 1)\n        : ruleToRemoveIndex;\n      const deleteLength = independentCombinators ? 2 : 1;\n      parentOfRuleToRemove.rules.splice(idxStartDelete, deleteLength);\n    }\n\n    const newNewPath = [...nextPath];\n    const commonAncestorPath = getCommonAncestorPath(oldPath, nextPath);\n    if (\n      !clone &&\n      oldPath.length === commonAncestorPath.length + 1 &&\n      nextPath[commonAncestorPath.length] > oldPath[commonAncestorPath.length]\n    ) {\n      // Getting here means there will be a shift of paths upward at the common\n      // ancestor level because the object at `oldPath` will be spliced out. The\n      // real new path should therefore be one or two higher than `newPathCalc`.\n      newNewPath[commonAncestorPath.length] -= independentCombinators ? 2 : 1;\n    }\n    const newNewParentPath = getParentPath(newNewPath);\n    const parentToInsertInto = findPath(newNewParentPath, draft) as RG;\n    const newIndex = newNewPath[newNewPath.length - 1];\n\n    /**\n     * This function 1) glosses over the need for type assertions to splice directly\n     * into `parentToInsertInto.rules`, and 2) shortens the actual insertion code.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const insertRuleOrGroup = (...args: any[]) =>\n      parentToInsertInto.rules.splice(newIndex, 0, ...args);\n\n    // Insert the source item at the target path\n    if (parentToInsertInto.rules.length === 0 || !independentCombinators) {\n      insertRuleOrGroup(ruleOrGroup);\n    } else {\n      if (newIndex === 0) {\n        if (ruleToRemoveIndex === 0 && oldNextCombinator) {\n          insertRuleOrGroup(ruleOrGroup, oldNextCombinator);\n        } else {\n          const newNextCombinator =\n            parentToInsertInto.rules[1] || oldPrevCombinator || getFirstOption(combinators);\n          insertRuleOrGroup(ruleOrGroup, newNextCombinator);\n        }\n      } else {\n        if (oldPrevCombinator) {\n          insertRuleOrGroup(oldPrevCombinator, ruleOrGroup);\n        } else {\n          const newPrevCombinator =\n            parentToInsertInto.rules[newIndex - 2] ||\n            oldNextCombinator ||\n            getFirstOption(combinators);\n          insertRuleOrGroup(newPrevCombinator, ruleOrGroup);\n        }\n      }\n    }\n  });\n};\n","import type {\n  RuleGroupArray,\n  RuleGroupICArray,\n  RuleGroupType,\n  RuleGroupTypeIC,\n  RuleType,\n} from '../types/index.noReact';\nimport { generateID } from './generateID';\nimport { isRuleGroup, isRuleGroupType } from './isRuleGroup';\nimport { isPojo } from './misc';\n\n/**\n * Options object for {@link regenerateID}/{@link regenerateIDs}.\n */\nexport interface RegenerateIdOptions {\n  idGenerator?: () => string;\n}\n\n/**\n * Generates a new `id` property for a rule.\n */\nexport const regenerateID = (\n  rule: RuleType,\n  { idGenerator = generateID }: RegenerateIdOptions = {}\n): RuleType => JSON.parse(JSON.stringify({ ...rule, id: idGenerator() }));\n\n/**\n * Recursively generates new `id` properties for a group and all its rules and subgroups.\n */\nexport const regenerateIDs = (\n  ruleOrGroup: RuleGroupType | RuleGroupTypeIC,\n  { idGenerator = generateID }: RegenerateIdOptions = {}\n): RuleGroupType | RuleGroupTypeIC => {\n  if (!isPojo(ruleOrGroup)) return ruleOrGroup;\n\n  if (!isRuleGroup(ruleOrGroup)) {\n    return JSON.parse(JSON.stringify({ ...(ruleOrGroup as RuleType), id: idGenerator() }));\n  }\n\n  if (isRuleGroupType(ruleOrGroup)) {\n    const rules = ruleOrGroup.rules.map(r =>\n      isRuleGroup(r) ? regenerateIDs(r, { idGenerator }) : regenerateID(r, { idGenerator })\n    ) as RuleGroupArray;\n    return { ...ruleOrGroup, id: idGenerator(), rules };\n  }\n\n  const rules = ruleOrGroup.rules.map(r =>\n    typeof r === 'string'\n      ? r\n      : isRuleGroup(r)\n        ? regenerateIDs(r, { idGenerator })\n        : regenerateID(r, { idGenerator })\n  ) as RuleGroupICArray;\n  return { ...ruleOrGroup, id: idGenerator(), rules };\n};\n","import * as React from 'react';\nimport type { OptionList } from '../types/index.noReact';\nimport { isOptionGroupArray } from './optGroupUtils';\n\n/**\n * Generates an array of `<option>` or `<optgroup>` elements\n * from a given {@link OptionList}.\n */\nexport const toOptions = (arr?: OptionList) =>\n  isOptionGroupArray(arr)\n    ? arr.map(og => (\n        <optgroup key={og.label} label={og.label}>\n          {og.options.map(opt => (\n            <option key={opt.name} value={opt.name} disabled={opt.disabled}>\n              {opt.label}\n            </option>\n          ))}\n        </optgroup>\n      ))\n    : Array.isArray(arr)\n      ? arr.map(opt => (\n          <option key={opt.name} value={opt.name} disabled={opt.disabled}>\n            {opt.label}\n          </option>\n        ))\n      : null;\n","import { produce } from 'immer';\nimport type {\n  RuleGroupType,\n  RuleGroupTypeAny,\n  RuleGroupTypeIC,\n  RuleType,\n} from '../types/index.noReact';\nimport { isRuleGroup, isRuleGroupType } from './isRuleGroup';\n\nconst remapProperties = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  obj: Record<string, any>,\n  propertyMap: Record<string, string | false>,\n  deleteRemappedProperties: boolean\n) =>\n  produce(obj, draft => {\n    for (const [k, v] of Object.entries(propertyMap)) {\n      if (v === false) {\n        delete draft[k];\n      } else if (!!v && k !== v && k in draft) {\n        draft[v] = draft[k];\n        if (deleteRemappedProperties) {\n          delete draft[k];\n        }\n      }\n    }\n  });\n\n/**\n * Options object for {@link transformQuery}.\n */\nexport interface TransformQueryOptions<RG extends RuleGroupTypeAny = RuleGroupType> {\n  /**\n   * When a rule is encountered in the hierarchy, it will be replaced\n   * with the result of this function.\n   *\n   * @defaultValue `r => r`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ruleProcessor?: (rule: RuleType) => any;\n  /**\n   * When a group is encountered in the hierarchy (including the root group, the\n   * query itself), it will be replaced with the result of this function.\n   *\n   * @defaultValue `rg => rg`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ruleGroupProcessor?: (ruleGroup: RG) => Record<string, any>;\n  /**\n   * For each rule and group in the query, any properties matching a key\n   * in this object will be renamed to the corresponding value. To retain both\n   * the new _and_ the original properties, set `deleteRemappedProperties`\n   * to `false`.\n   *\n   * If a key has a value of `false`, the corresponding property will be removed\n   * without being copied to a new property name. (Warning: `{ rules: false }`\n   * will prevent recursion and only return the processed root group.)\n   *\n   * @defaultValue `{}`\n   *\n   * @example\n   * ```\n   *   transformQuery(\n   *     { combinator: 'and', not: true, rules: [] },\n   *     { propertyMap: { combinator: 'AndOr', not: false } }\n   *   )\n   *   // Returns: { AndOr: 'and', rules: [] }\n   * ```\n   */\n  propertyMap?: Record<string, string | false>;\n  /**\n   * Any combinator values (including independent combinators) will be translated\n   * from the key in this object to the value.\n   *\n   * @defaultValue `{}`\n   *\n   * @example\n   * ```\n   *   transformQuery(\n   *     { combinator: 'and', rules: [] },\n   *     { combinatorMap: { and: '&&', or: '||' } }\n   *   )\n   *   // Returns: { combinator: '&&', rules: [] }\n   * ```\n   */\n  combinatorMap?: Record<string, string>;\n  /**\n   * Any operator values will be translated from the key in this object to the value.\n   *\n   * @defaultValue `{}`\n   *\n   * @example\n   * ```\n   *   transformQuery(\n   *     { combinator: 'and', rules: [{ field: 'name', operator: '=', value: 'Steve Vai' }] },\n   *     { operatorMap: { '=': 'is' } }\n   *   )\n   *   // Returns:\n   *   // {\n   *   //   combinator: 'and',\n   *   //   rules: [{ field: 'name', operator: 'is', value: 'Steve Vai' }]\n   *   // }\n   * ```\n   */\n  operatorMap?: Record<string, string>;\n  /**\n   * Prevents the `path` property (see {@link Path}) from being added to each\n   * rule and group in the hierarchy.\n   *\n   * @defaultValue `false`\n   */\n  omitPath?: boolean;\n  /**\n   * Original properties remapped according to the `propertyMap` option will be removed.\n   *\n   * @defaultValue `true`\n   *\n   * @example\n   * ```\n   *   transformQuery(\n   *     { combinator: 'and', rules: [] },\n   *     { propertyMap: { combinator: 'AndOr' }, deleteRemappedProperties: false }\n   *   )\n   *   // Returns: { combinator: 'and', AndOr: 'and', rules: [] }\n   * ```\n   */\n  deleteRemappedProperties?: boolean;\n}\n\n/**\n * Recursively process a query heirarchy using this versatile utility function.\n *\n * [Documentation](https://react-querybuilder.js.org/docs/utils/misc#transformquery)\n */\nexport function transformQuery(\n  query: RuleGroupType,\n  options?: TransformQueryOptions<RuleGroupType>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any;\n/**\n * Recursively process a query heirarchy with independent combinators using this\n * versatile utility function.\n *\n * [Documentation](https://react-querybuilder.js.org/docs/utils/misc#transformquery)\n */\nexport function transformQuery(\n  query: RuleGroupTypeIC,\n  options?: TransformQueryOptions<RuleGroupTypeIC>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any;\nexport function transformQuery<RG extends RuleGroupTypeAny>(\n  query: RG,\n  options: TransformQueryOptions<RG> = {}\n) {\n  const {\n    ruleProcessor = r => r,\n    ruleGroupProcessor = rg => rg,\n    propertyMap = {},\n    combinatorMap = {},\n    operatorMap = {},\n    omitPath = false,\n    deleteRemappedProperties = true,\n  } = options;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const processGroup = (rg: RuleGroupTypeAny): any => ({\n    ...ruleGroupProcessor(\n      remapProperties(\n        {\n          ...rg,\n          ...(isRuleGroupType(rg)\n            ? { combinator: combinatorMap[rg.combinator] ?? rg.combinator }\n            : {}),\n        },\n        propertyMap,\n        deleteRemappedProperties\n      ) as RG\n    ),\n    ...(propertyMap['rules'] === false\n      ? null\n      : {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          [propertyMap['rules'] ?? 'rules']: rg.rules.map((r: any, idx) => {\n            const pathObject = omitPath ? null : { path: [...rg.path!, idx] };\n            if (typeof r === 'string') {\n              // independent combinators\n              return combinatorMap[r] ?? r;\n            } else if (isRuleGroup(r)) {\n              // sub-groups\n              return processGroup({ ...r, ...pathObject });\n            }\n            // rules\n            return ruleProcessor(\n              remapProperties(\n                {\n                  ...{ ...r, ...pathObject },\n                  ...('operator' in r ? { operator: operatorMap[r.operator] ?? r.operator } : {}),\n                },\n                propertyMap,\n                deleteRemappedProperties\n              ) as RuleType\n            );\n          }),\n        }),\n  });\n\n  return processGroup({ ...query, ...(omitPath ? null : { path: [] }) });\n}\n","import { useMemo } from 'react';\n\nconst preferPropDefaultTrue = (prop?: boolean, context?: boolean) =>\n  prop === false ? false : prop ? true : context === false ? false : true;\n\nconst preferPropDefaultFalse = (prop?: boolean, context?: boolean) =>\n  prop ? true : prop === false ? false : context ? true : false;\n\nconst preferProp = (def: boolean, prop?: boolean, context?: boolean) =>\n  def ? preferPropDefaultTrue(prop, context) : preferPropDefaultFalse(prop, context);\n\n/**\n * For given default, prop, and context values, return the first provided of prop,\n * context, and default, in that order.\n */\nexport const usePreferProp = (def: boolean, prop?: boolean, context?: boolean) =>\n  useMemo(() => preferProp(def, prop, context), [context, def, prop]);\n\n/**\n * For given default, prop, and context values, return the first provided of prop,\n * context, and default, in that order.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const usePreferAnyProp = (def?: any, prop?: any, context?: any) =>\n  useMemo(\n    () =>\n      typeof prop !== 'undefined' && prop != null\n        ? prop\n        : typeof context !== 'undefined' && context != null\n          ? context\n          : def,\n    [context, def, prop]\n  );\n","import { clsx } from 'clsx';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { LogType, standardClassnames } from '../defaults';\nimport {\n  _RQB_INTERNAL_dispatchThunk,\n  useRQB_INTERNAL_QueryBuilderDispatch,\n  useRQB_INTERNAL_QueryBuilderStore,\n} from '../redux/_internal';\nimport { getQuerySelectorById, useQueryBuilderSelector } from '../redux';\nimport type {\n  FullCombinator,\n  FullField,\n  FullOperator,\n  FullOptionMap,\n  GetOptionIdentifierType,\n  GetRuleTypeFromGroupWithFieldAndOperator,\n  Path,\n  QueryActions,\n  QueryBuilderProps,\n  QueryValidator,\n  RuleGroupProps,\n  RuleGroupTypeAny,\n  RuleGroupTypeIC,\n  RuleType,\n  Schema,\n  UpdateableProperties,\n  ValidationMap,\n  ValueSources,\n} from '../types';\nimport {\n  add,\n  findPath,\n  generateAccessibleDescription,\n  isRuleGroupType,\n  isRuleGroupTypeIC,\n  move,\n  pathIsDisabled,\n  prepareRuleGroup,\n  remove,\n  update,\n} from '../utils';\nimport { useDeprecatedProps } from './useDeprecatedProps';\nimport type { useQueryBuilderSetup } from './useQueryBuilderSetup';\nimport { useControlledOrUncontrolled } from './useControlledOrUncontrolled';\n\nconst defaultValidationResult: ReturnType<QueryValidator> = {};\nconst defaultValidationMap: ValidationMap = {};\nconst defaultGetValueEditorSeparator = () => null;\nconst defaultGetRuleClassname = () => '';\nconst defaultGetRuleGroupClassname = () => '';\nconst defaultOnAddRule = (r: RuleType) => r;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultOnAddGroup = (rg: any) => rg;\nconst defaultOnRemove = () => true;\n// istanbul ignore next\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultOnLog = (...params: any[]) => {\n  console.log(...params);\n};\n\n/**\n * For given {@link QueryBuilderProps} and setup values from {@link useQueryBuilderSetup},\n * prepares and returns all values required to render a query builder.\n */\nexport function useQueryBuilderSchema<\n  RG extends RuleGroupTypeAny,\n  F extends FullField,\n  O extends FullOperator,\n  C extends FullCombinator,\n>(\n  props: QueryBuilderProps<RG, F, O, C>,\n  setup: ReturnType<typeof useQueryBuilderSetup<RG, F, O, C>>\n) {\n  type R = GetRuleTypeFromGroupWithFieldAndOperator<RG, F, O>;\n\n  const {\n    query: queryProp,\n    defaultQuery: defaultQueryProp,\n    getValueEditorSeparator = defaultGetValueEditorSeparator,\n    getRuleClassname = defaultGetRuleClassname,\n    getRuleGroupClassname = defaultGetRuleGroupClassname,\n    onAddRule = defaultOnAddRule,\n    onAddGroup = defaultOnAddGroup,\n    onRemove = defaultOnRemove,\n    onQueryChange,\n    showCombinatorsBetweenRules: showCombinatorsBetweenRulesProp = false,\n    showNotToggle: showNotToggleProp = false,\n    showShiftActions: showShiftActionsProp = false,\n    showCloneButtons: showCloneButtonsProp = false,\n    showLockButtons: showLockButtonsProp = false,\n    resetOnFieldChange: resetOnFieldChangeProp = true,\n    resetOnOperatorChange: resetOnOperatorChangeProp = false,\n    autoSelectField: autoSelectFieldProp = true,\n    autoSelectOperator: autoSelectOperatorProp = true,\n    addRuleToNewGroups: addRuleToNewGroupsProp = false,\n    listsAsArrays: listsAsArraysProp = false,\n    parseNumbers = false,\n    disabled = false,\n    validator,\n    onLog = defaultOnLog,\n    idGenerator,\n    accessibleDescriptionGenerator = generateAccessibleDescription,\n  } = props;\n\n  const {\n    qbId,\n    rqbContext,\n    fields,\n    fieldMap,\n    combinators,\n    getOperatorsMain,\n    getRuleDefaultOperator,\n    getValueEditorTypeMain,\n    getValueSourcesMain,\n    getValuesMain,\n    getRuleDefaultValue,\n    getInputTypeMain,\n    createRule,\n    createRuleGroup,\n  } = setup;\n\n  const {\n    controlClassnames,\n    controlElements: controls,\n    debugMode,\n    enableDragAndDrop,\n    enableMountQueryChange,\n    translations,\n  } = rqbContext;\n\n  // #region Boolean coercion\n  const showCombinatorsBetweenRules = !!showCombinatorsBetweenRulesProp;\n  const showNotToggle = !!showNotToggleProp;\n  const showShiftActions = !!showShiftActionsProp;\n  const showCloneButtons = !!showCloneButtonsProp;\n  const showLockButtons = !!showLockButtonsProp;\n  const resetOnFieldChange = !!resetOnFieldChangeProp;\n  const resetOnOperatorChange = !!resetOnOperatorChangeProp;\n  const autoSelectField = !!autoSelectFieldProp;\n  const autoSelectOperator = !!autoSelectOperatorProp;\n  const addRuleToNewGroups = !!addRuleToNewGroupsProp;\n  const listsAsArrays = !!listsAsArraysProp;\n  // #endregion\n\n  useControlledOrUncontrolled({\n    defaultQuery: defaultQueryProp,\n    queryProp,\n  });\n\n  // #region Handle controlled mode vs uncontrolled mode\n  const queryBuilderStore = useRQB_INTERNAL_QueryBuilderStore();\n  const queryBuilderDispatch = useRQB_INTERNAL_QueryBuilderDispatch();\n\n  const querySelector = useMemo(() => getQuerySelectorById(setup.qbId), [setup.qbId]);\n  const storeQuery = useQueryBuilderSelector(querySelector);\n  const getQuery = useCallback(\n    () => querySelector(queryBuilderStore.getState()),\n    [queryBuilderStore, querySelector]\n  );\n\n  const fallbackQuery = useMemo(() => createRuleGroup(), [createRuleGroup]);\n\n  // We assume here that if the query has an `id` property, the query has already\n  // been prepared. If `candidateQuery === query`, the user is probably just\n  // passing back the parameter from the `onQueryChange` callback.\n  const candidateQuery = queryProp ?? storeQuery ?? defaultQueryProp ?? fallbackQuery;\n  const rootGroup = (\n    !candidateQuery.id ? prepareRuleGroup(candidateQuery, { idGenerator }) : candidateQuery\n  ) as RuleGroupTypeAny<R>;\n\n  // If a new `query` prop is passed in that doesn't match the query in the store,\n  // update the store to match the prop _without_ calling `onQueryChange`.\n  useEffect(() => {\n    if (!!queryProp && queryProp !== storeQuery) {\n      queryBuilderDispatch(\n        _RQB_INTERNAL_dispatchThunk({\n          payload: { qbId, query: queryProp },\n          onQueryChange: undefined,\n        })\n      );\n    }\n  }, [queryProp, qbId, storeQuery, queryBuilderDispatch]);\n\n  const independentCombinators = useMemo(() => isRuleGroupTypeIC(rootGroup), [rootGroup]);\n  const invalidIC = !!props.independentCombinators && !independentCombinators;\n  useDeprecatedProps(\n    'independentCombinators',\n    invalidIC || (!invalidIC && (props.independentCombinators ?? 'not present') !== 'not present'),\n    invalidIC ? 'invalid' : 'unnecessary'\n    // 'invalid'\n  );\n\n  const hasRunMountQueryChange = useRef(false);\n  useEffect(() => {\n    if (hasRunMountQueryChange.current) return;\n    hasRunMountQueryChange.current = true;\n    queryBuilderDispatch(\n      _RQB_INTERNAL_dispatchThunk({\n        payload: { qbId, query: rootGroup },\n        onQueryChange:\n          // Leave `onQueryChange` undefined if `enableMountQueryChange` is disabled\n          enableMountQueryChange && typeof onQueryChange === 'function' ? onQueryChange : undefined,\n      })\n    );\n  }, [enableMountQueryChange, onQueryChange, qbId, queryBuilderDispatch, rootGroup]);\n\n  /**\n   * Updates the redux-based query, then calls `onQueryChange` with the updated\n   * query object. NOTE: `useCallback` is only effective here when the user's\n   * `onQueryChange` handler is undefined or has a stable reference, which usually\n   * means that it's wrapped in its own `useCallback`.\n   */\n  const dispatchQuery = useCallback(\n    (newQuery: RuleGroupTypeAny) => {\n      queryBuilderDispatch(\n        _RQB_INTERNAL_dispatchThunk({ payload: { qbId, query: newQuery }, onQueryChange })\n      );\n    },\n    [onQueryChange, qbId, queryBuilderDispatch]\n  );\n  // #endregion\n\n  // #region Query update methods\n  const disabledPaths = useMemo(() => (Array.isArray(disabled) && disabled) || [], [disabled]);\n  const queryDisabled = disabled === true;\n  const rootGroupDisabled = useMemo(\n    () => rootGroup.disabled || disabledPaths.some(p => p.length === 0),\n    [disabledPaths, rootGroup.disabled]\n  );\n\n  const onRuleAdd = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (rule: R, parentPath: Path, context?: any) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore.getState()) as RG;\n      // istanbul ignore if\n      if (!queryLocal) return;\n      if (pathIsDisabled(parentPath, queryLocal) || queryDisabled) {\n        // istanbul ignore else\n        if (debugMode) {\n          onLog({ type: LogType.parentPathDisabled, rule, parentPath, query: queryLocal });\n        }\n        return;\n      }\n      // @ts-expect-error `queryLocal` is type `RuleGroupTypeAny`, but it doesn't matter here\n      const newRule = onAddRule(rule, parentPath, queryLocal, context);\n      if (!newRule) {\n        // istanbul ignore else\n        if (debugMode) {\n          onLog({ type: LogType.onAddRuleFalse, rule, parentPath, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = add(queryLocal, newRule, parentPath, {\n        combinators,\n        combinatorPreceding: newRule.combinatorPreceding ?? undefined,\n      });\n      if (debugMode) {\n        onLog({ type: LogType.add, query: queryLocal, newQuery, newRule, parentPath });\n      }\n      dispatchQuery(newQuery);\n    },\n    [\n      combinators,\n      debugMode,\n      dispatchQuery,\n      onAddRule,\n      onLog,\n      qbId,\n      queryDisabled,\n      queryBuilderStore,\n    ]\n  );\n\n  const onGroupAdd = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ruleGroup: RG, parentPath: Path, context?: any) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore.getState()) as RG;\n      // istanbul ignore if\n      if (!queryLocal) return;\n      if (pathIsDisabled(parentPath, queryLocal) || queryDisabled) {\n        // istanbul ignore else\n        if (debugMode) {\n          onLog({\n            type: LogType.parentPathDisabled,\n            ruleGroup,\n            parentPath,\n            query: queryLocal,\n          });\n        }\n        return;\n      }\n      // @ts-expect-error `queryLocal` is type `RuleGroupTypeAny`, but it doesn't matter here\n      const newGroup = onAddGroup(ruleGroup, parentPath, queryLocal, context);\n      if (!newGroup) {\n        // istanbul ignore else\n        if (debugMode) {\n          onLog({ type: LogType.onAddGroupFalse, ruleGroup, parentPath, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = add(queryLocal, newGroup, parentPath, {\n        combinators,\n        combinatorPreceding: (newGroup as RuleGroupTypeIC).combinatorPreceding ?? undefined,\n      });\n      if (debugMode) {\n        onLog({ type: LogType.add, query: queryLocal, newQuery, newGroup, parentPath });\n      }\n      dispatchQuery(newQuery);\n    },\n    [\n      combinators,\n      debugMode,\n      dispatchQuery,\n      onAddGroup,\n      onLog,\n      qbId,\n      queryDisabled,\n      queryBuilderStore,\n    ]\n  );\n\n  const onPropChange = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (prop: UpdateableProperties, value: any, path: Path) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore.getState());\n      // istanbul ignore if\n      if (!queryLocal) return;\n      if ((pathIsDisabled(path, queryLocal) && prop !== 'disabled') || queryDisabled) {\n        if (debugMode) {\n          onLog({ type: LogType.pathDisabled, path, prop, value, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = update(queryLocal, prop, value, path, {\n        resetOnFieldChange,\n        resetOnOperatorChange,\n        getRuleDefaultOperator: getRuleDefaultOperator as unknown as (field: string) => string,\n        getValueSources: getValueSourcesMain as (field: string) => ValueSources,\n        getRuleDefaultValue,\n      });\n      if (debugMode) {\n        onLog({ type: LogType.update, query: queryLocal, newQuery, prop, value, path });\n      }\n      dispatchQuery(newQuery);\n    },\n    [\n      debugMode,\n      dispatchQuery,\n      getRuleDefaultOperator,\n      getRuleDefaultValue,\n      getValueSourcesMain,\n      onLog,\n      qbId,\n      queryDisabled,\n      queryBuilderStore,\n      resetOnFieldChange,\n      resetOnOperatorChange,\n    ]\n  );\n\n  const onRuleOrGroupRemove = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (path: Path, context?: any) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore.getState()) as RG;\n      // istanbul ignore if\n      if (!queryLocal) return;\n      if (pathIsDisabled(path, queryLocal) || queryDisabled) {\n        // istanbul ignore else\n        if (debugMode) {\n          onLog({ type: LogType.pathDisabled, path, query: queryLocal });\n        }\n        return;\n      }\n      const ruleOrGroup = findPath(path, queryLocal) as RG | R;\n      // istanbul ignore else\n      if (ruleOrGroup) {\n        // @ts-expect-error `ruleOrGroup` and `queryLocal` are type `RuleGroupTypeAny`,\n        // but it doesn't matter here\n        if (onRemove(ruleOrGroup, path, queryLocal, context)) {\n          const newQuery = remove(queryLocal, path);\n          if (debugMode) {\n            onLog({ type: LogType.remove, query: queryLocal, newQuery, path, ruleOrGroup });\n          }\n          dispatchQuery(newQuery);\n        } else {\n          if (debugMode) {\n            onLog({ type: LogType.onRemoveFalse, ruleOrGroup, path, query: queryLocal });\n          }\n        }\n      }\n    },\n    [debugMode, dispatchQuery, onLog, onRemove, qbId, queryDisabled, queryBuilderStore]\n  );\n\n  const moveRule = useCallback(\n    (oldPath: Path, newPath: Path, clone?: boolean) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore.getState());\n      // istanbul ignore if\n      if (!queryLocal) return;\n      if (pathIsDisabled(oldPath, queryLocal) || queryDisabled) {\n        // istanbul ignore else\n        if (debugMode) {\n          onLog({ type: LogType.pathDisabled, oldPath, newPath, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = move(queryLocal, oldPath, newPath, { clone, combinators });\n      if (debugMode) {\n        onLog({ type: LogType.move, query: queryLocal, newQuery, oldPath, newPath, clone });\n      }\n      dispatchQuery(newQuery);\n    },\n    [combinators, debugMode, dispatchQuery, onLog, qbId, queryDisabled, queryBuilderStore]\n  );\n  // #endregion\n\n  const dndEnabledAttr = useMemo(\n    () => (enableDragAndDrop ? 'enabled' : 'disabled'),\n    [enableDragAndDrop]\n  );\n  const inlineCombinatorsAttr = useMemo(\n    () => (independentCombinators || showCombinatorsBetweenRules ? 'enabled' : 'disabled'),\n    [independentCombinators, showCombinatorsBetweenRules]\n  );\n  const combinatorPropObject: Pick<RuleGroupProps, 'combinator'> = useMemo(\n    () => (isRuleGroupType(rootGroup) ? { combinator: rootGroup.combinator } : {}),\n    [rootGroup]\n  );\n\n  const { validationResult, validationMap } = useMemo(() => {\n    const validationResult =\n      typeof validator === 'function' && rootGroup ? validator(rootGroup) : defaultValidationResult;\n    const validationMap =\n      typeof validationResult === 'boolean' ? defaultValidationMap : validationResult;\n    return { validationResult, validationMap };\n  }, [rootGroup, validator]);\n\n  const schema = useMemo(\n    (): Schema<F, GetOptionIdentifierType<O>> => ({\n      addRuleToNewGroups,\n      accessibleDescriptionGenerator,\n      autoSelectField,\n      autoSelectOperator,\n      classNames: controlClassnames,\n      combinators,\n      controls,\n      createRule,\n      createRuleGroup,\n      disabledPaths,\n      enableDragAndDrop,\n      fieldMap: fieldMap as FullOptionMap<F>,\n      fields,\n      dispatchQuery,\n      getQuery,\n      getInputType: getInputTypeMain,\n      getOperators: getOperatorsMain,\n      getRuleClassname,\n      getRuleGroupClassname,\n      getValueEditorSeparator,\n      getValueEditorType: getValueEditorTypeMain,\n      getValues: getValuesMain,\n      getValueSources: getValueSourcesMain,\n      independentCombinators,\n      listsAsArrays,\n      parseNumbers,\n      qbId,\n      showCloneButtons,\n      showCombinatorsBetweenRules,\n      showLockButtons,\n      showNotToggle,\n      showShiftActions,\n      validationMap,\n    }),\n    [\n      addRuleToNewGroups,\n      accessibleDescriptionGenerator,\n      autoSelectField,\n      autoSelectOperator,\n      combinators,\n      controlClassnames,\n      controls,\n      createRule,\n      createRuleGroup,\n      disabledPaths,\n      enableDragAndDrop,\n      fieldMap,\n      fields,\n      dispatchQuery,\n      getQuery,\n      getInputTypeMain,\n      getOperatorsMain,\n      getRuleClassname,\n      getRuleGroupClassname,\n      getValueEditorTypeMain,\n      getValuesMain,\n      getValueSourcesMain,\n      getValueEditorSeparator,\n      independentCombinators,\n      listsAsArrays,\n      parseNumbers,\n      qbId,\n      showCloneButtons,\n      showCombinatorsBetweenRules,\n      showLockButtons,\n      showNotToggle,\n      showShiftActions,\n      validationMap,\n    ]\n  );\n\n  const actions = useMemo(\n    (): QueryActions => ({\n      moveRule,\n      onGroupAdd,\n      onGroupRemove: onRuleOrGroupRemove,\n      onPropChange,\n      onRuleAdd,\n      onRuleRemove: onRuleOrGroupRemove,\n    }),\n    [moveRule, onGroupAdd, onPropChange, onRuleAdd, onRuleOrGroupRemove]\n  );\n\n  const wrapperClassName = useMemo(\n    () =>\n      clsx(standardClassnames.queryBuilder, clsx(controlClassnames.queryBuilder), {\n        [standardClassnames.disabled]: queryDisabled,\n        [standardClassnames.valid]: typeof validationResult === 'boolean' && validationResult,\n        [standardClassnames.invalid]: typeof validationResult === 'boolean' && !validationResult,\n      }),\n    [controlClassnames.queryBuilder, queryDisabled, validationResult]\n  );\n\n  return {\n    ...props,\n    actions,\n    rootGroup,\n    rootGroupDisabled,\n    queryDisabled,\n    rqbContext,\n    schema,\n    translations,\n    wrapperClassName,\n    dndEnabledAttr,\n    inlineCombinatorsAttr,\n    combinatorPropObject,\n  };\n}\n","import { useCallback, useMemo, useState } from 'react';\nimport { defaultCombinators, defaultOperators } from '../defaults';\nimport { useMergedContext } from '../hooks';\nimport type {\n  FlexibleOptionList,\n  FullCombinator,\n  FullField,\n  FullOperator,\n  FullOption,\n  FullOptionList,\n  FullOptionMap,\n  FullOptionRecord,\n  GetOptionIdentifierType,\n  GetRuleTypeFromGroupWithFieldAndOperator,\n  QueryBuilderProps,\n  RuleGroupTypeAny,\n  RuleType,\n} from '../types';\nimport {\n  filterFieldsByComparator,\n  generateID,\n  getFirstOption,\n  getValueSourcesUtil,\n  isFlexibleOptionGroupArray,\n  joinWith,\n  objectKeys,\n  toFullOption,\n  toFullOptionList,\n  toFullOptionMap,\n  uniqByIdentifier,\n  uniqOptGroups,\n  uniqOptList,\n} from '../utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getFirstOptionsFrom = (opts: any[], r: RuleType, listsAsArrays?: boolean) => {\n  const firstOption = getFirstOption(opts);\n\n  if (r.operator === 'between' || r.operator === 'notBetween') {\n    const valueAsArray = [firstOption, firstOption];\n    return listsAsArrays\n      ? valueAsArray\n      : joinWith(\n          valueAsArray.map(v => v ?? /* istanbul ignore next */ ''),\n          ','\n        );\n  }\n\n  return firstOption;\n};\n\n/**\n * Massages the props as necessary and prepares the basic update/generate methods\n * for use by the {@link QueryBuilder} component.\n */\nexport const useQueryBuilderSetup = <\n  RG extends RuleGroupTypeAny,\n  F extends FullField,\n  O extends FullOperator,\n  C extends FullCombinator,\n>(\n  props: QueryBuilderProps<RG, F, O, C>\n) => {\n  type R = GetRuleTypeFromGroupWithFieldAndOperator<RG, F, O>;\n  type FieldName = GetOptionIdentifierType<F>;\n  type OperatorName = GetOptionIdentifierType<O>;\n\n  const [qbId] = useState(generateID);\n\n  const {\n    fields: fieldsPropOriginal,\n    baseField,\n    operators: operatorsProp,\n    baseOperator,\n    combinators: combinatorsProp = defaultCombinators,\n    baseCombinator,\n    translations: translationsProp,\n    enableMountQueryChange: enableMountQueryChangeProp = true,\n    controlClassnames: controlClassnamesProp,\n    controlElements: controlElementsProp,\n    getDefaultField,\n    getDefaultOperator,\n    getDefaultValue,\n    getOperators,\n    getValueEditorType,\n    getValueSources,\n    getInputType,\n    getValues,\n    autoSelectField = true,\n    autoSelectOperator = true,\n    addRuleToNewGroups = false,\n    enableDragAndDrop: enableDragAndDropProp,\n    listsAsArrays = false,\n    debugMode: debugModeProp = false,\n    idGenerator = generateID,\n  } = props;\n\n  const operators = (operatorsProp ?? defaultOperators) as FlexibleOptionList<O>;\n\n  const rqbContext = useMergedContext({\n    controlClassnames: controlClassnamesProp,\n    controlElements: controlElementsProp,\n    debugMode: debugModeProp,\n    enableDragAndDrop: enableDragAndDropProp,\n    enableMountQueryChange: enableMountQueryChangeProp,\n    translations: translationsProp,\n  });\n\n  const { translations } = rqbContext;\n\n  // #region Set up `fields`\n  const defaultField = useMemo(\n    () =>\n      ({\n        id: translations.fields.placeholderName,\n        name: translations.fields.placeholderName,\n        value: translations.fields.placeholderName,\n        label: translations.fields.placeholderLabel,\n      }) as FullField,\n    [translations.fields.placeholderLabel, translations.fields.placeholderName]\n  );\n  const fieldsProp = useMemo(\n    () => fieldsPropOriginal ?? ([defaultField] as FlexibleOptionList<F>),\n    [defaultField, fieldsPropOriginal]\n  );\n\n  const fields = useMemo((): FullOptionList<F> => {\n    const flds = (\n      Array.isArray(fieldsProp)\n        ? toFullOptionList(fieldsProp, baseField)\n        : objectKeys(toFullOptionMap(fieldsProp, baseField))\n            .map(fld => ({ ...fieldsProp[fld as unknown as FieldName], name: fld, value: fld }))\n            .sort((a, b) => a.label.localeCompare(b.label))\n    ) as FullOptionList<F>;\n    if (isFlexibleOptionGroupArray(flds)) {\n      if (autoSelectField) {\n        return uniqOptGroups(flds) as FullOptionList<F>;\n      } else {\n        return uniqOptGroups([\n          {\n            label: translations.fields.placeholderGroupLabel,\n            options: [defaultField],\n          },\n          ...flds,\n        ]) as FullOptionList<F>;\n      }\n    } else {\n      if (autoSelectField) {\n        return uniqByIdentifier(flds as F[]) as FullOptionList<F>;\n      } else {\n        return uniqByIdentifier([defaultField, ...(flds as F[])]) as FullOptionList<F>;\n      }\n    }\n  }, [\n    autoSelectField,\n    baseField,\n    defaultField,\n    fieldsProp,\n    translations.fields.placeholderGroupLabel,\n  ]);\n\n  const fieldMap = useMemo(() => {\n    if (!Array.isArray(fieldsProp)) {\n      const fp = toFullOptionMap(fieldsProp, baseField) as FullOptionMap<FullField, FieldName>;\n      if (autoSelectField) {\n        return fp;\n      } else {\n        return { ...fp, [translations.fields.placeholderName]: defaultField };\n      }\n    }\n    const fm: Partial<FullOptionRecord<FullField>> = {};\n    if (isFlexibleOptionGroupArray(fields)) {\n      fields.forEach(f =>\n        f.options.forEach(opt => {\n          fm[(opt.value ?? /* istanbul ignore next */ opt.name) as FieldName] = toFullOption(\n            opt,\n            baseField\n          ) as FullField;\n        })\n      );\n    } else {\n      fields.forEach(f => {\n        fm[(f.value ?? /* istanbul ignore next */ f.name) as FieldName] = toFullOption(\n          f,\n          baseField\n        ) as FullField;\n      });\n    }\n    return fm;\n  }, [\n    autoSelectField,\n    baseField,\n    defaultField,\n    fields,\n    fieldsProp,\n    translations.fields.placeholderName,\n  ]);\n  // #endregion\n\n  const combinators = useMemo(\n    () => toFullOptionList(combinatorsProp, baseCombinator),\n    [baseCombinator, combinatorsProp]\n  );\n\n  // #region Set up `operators`\n  const defaultOperator = useMemo(\n    (): FullOption<OperatorName> => ({\n      id: translations.operators.placeholderName,\n      name: translations.operators.placeholderName as OperatorName,\n      value: translations.operators.placeholderName as OperatorName,\n      label: translations.operators.placeholderLabel,\n    }),\n    [translations.operators.placeholderLabel, translations.operators.placeholderName]\n  );\n\n  const getOperatorsMain = useCallback(\n    (field: FieldName, { fieldData }: { fieldData: F }): FullOptionList<O> => {\n      let opsFinal = toFullOptionList(operators as FlexibleOptionList<O>, baseOperator);\n\n      if (fieldData?.operators) {\n        opsFinal = toFullOptionList(fieldData.operators, baseOperator);\n      } else if (getOperators) {\n        const ops = getOperators(field, { fieldData }) as null | FlexibleOptionList<O>;\n        if (ops) {\n          opsFinal = toFullOptionList(ops, baseOperator);\n        }\n      }\n\n      if (!autoSelectOperator) {\n        if (isFlexibleOptionGroupArray(opsFinal)) {\n          opsFinal = [\n            {\n              label: translations.operators.placeholderGroupLabel,\n              options: [defaultOperator],\n            },\n            ...opsFinal,\n          ];\n        } else {\n          opsFinal = [defaultOperator, ...opsFinal];\n        }\n      }\n\n      return uniqOptList(opsFinal) as FullOptionList<O>;\n    },\n    [\n      autoSelectOperator,\n      baseOperator,\n      defaultOperator,\n      getOperators,\n      operators,\n      translations.operators.placeholderGroupLabel,\n    ]\n  );\n\n  const getRuleDefaultOperator = useCallback(\n    (field: FieldName): OperatorName => {\n      const fieldData = fieldMap[field] as F;\n\n      if (fieldData?.defaultOperator) {\n        return fieldData.defaultOperator as OperatorName;\n      }\n\n      if (getDefaultOperator) {\n        if (typeof getDefaultOperator === 'function') {\n          return getDefaultOperator(field, { fieldData }) as OperatorName;\n        } else {\n          return getDefaultOperator;\n        }\n      }\n\n      const ops = getOperatorsMain(field, { fieldData }) ?? /* istanbul ignore next */ [];\n      return (getFirstOption(ops) ?? /* istanbul ignore next */ '') as OperatorName;\n    },\n    [fieldMap, getDefaultOperator, getOperatorsMain]\n  );\n  // #endregion\n\n  // #region Rule property getters\n  const getValueEditorTypeMain = useCallback(\n    (field: FieldName, operator: OperatorName, { fieldData }: { fieldData: F }) => {\n      if (fieldData.valueEditorType) {\n        if (typeof fieldData.valueEditorType === 'function') {\n          return fieldData.valueEditorType(operator);\n        }\n        return fieldData.valueEditorType;\n      }\n\n      return getValueEditorType?.(field, operator, { fieldData }) ?? 'text';\n    },\n    [getValueEditorType]\n  );\n\n  const getValueSourcesMain = useCallback(\n    (field: FieldName, operator: OperatorName) =>\n      getValueSourcesUtil<F, OperatorName>(fieldMap[field] as F, operator, getValueSources),\n    [fieldMap, getValueSources]\n  );\n\n  const getValuesMain = useCallback(\n    (field: FieldName, operator: OperatorName, { fieldData }: { fieldData: F }) => {\n      // Ignore this in tests because Rule already checks for\n      // the presence of the values property in fieldData.\n      /* istanbul ignore if */\n      if (fieldData?.values) {\n        return toFullOptionList(fieldData.values);\n      }\n      if (getValues) {\n        return toFullOptionList(getValues(field, operator, { fieldData }));\n      }\n\n      return [];\n    },\n    [getValues]\n  );\n\n  const getRuleDefaultValue = useCallback(\n    <RT extends RuleType = R>(r: RT) => {\n      const fieldData = (fieldMap[r.field as FieldName] ?? {}) as F;\n      if (fieldData?.defaultValue !== undefined && fieldData.defaultValue !== null) {\n        return fieldData.defaultValue;\n      } else if (getDefaultValue) {\n        return getDefaultValue(r, { fieldData });\n      }\n\n      let value: string | string[] | boolean = '';\n\n      const values = getValuesMain(r.field as FieldName, r.operator as OperatorName, {\n        fieldData,\n      });\n\n      if (r.valueSource === 'field') {\n        const filteredFields = filterFieldsByComparator(fieldData, fields, r.operator);\n        if (filteredFields.length > 0) {\n          value = getFirstOptionsFrom(filteredFields, r, listsAsArrays);\n        } else {\n          value = '';\n        }\n      } else if (values.length) {\n        const editorType = getValueEditorTypeMain(\n          r.field as FieldName,\n          r.operator as OperatorName,\n          { fieldData }\n        );\n        if (editorType === 'multiselect') {\n          value = listsAsArrays ? [] : '';\n        } else if (editorType === 'select' || editorType === 'radio') {\n          value = getFirstOptionsFrom(values, r, listsAsArrays);\n        }\n      } else {\n        const editorType = getValueEditorTypeMain(\n          r.field as FieldName,\n          r.operator as OperatorName,\n          { fieldData }\n        );\n        if (editorType === 'checkbox') {\n          value = false;\n        }\n      }\n\n      return value;\n    },\n    [fieldMap, fields, getDefaultValue, getValueEditorTypeMain, getValuesMain, listsAsArrays]\n  );\n\n  const getInputTypeMain = useCallback(\n    (field: FieldName, operator: OperatorName, { fieldData }: { fieldData: F }) => {\n      if (getInputType) {\n        const inputType = getInputType(field, operator, { fieldData });\n        if (inputType) return inputType;\n      }\n\n      return 'text';\n    },\n    [getInputType]\n  );\n  // #endregion\n\n  // #region Rule/group creators\n  const createRule = useCallback((): R => {\n    let field = '' as FieldName;\n    const flds = fields as FullOptionList<F>;\n    /* istanbul ignore else */\n    if (flds?.length > 0 && flds[0]) {\n      const fo = getFirstOption(flds) as FieldName;\n      /* istanbul ignore else */\n      if (fo) field = fo;\n    }\n    if (getDefaultField) {\n      if (typeof getDefaultField === 'function') {\n        const df = getDefaultField(flds) as FieldName;\n        /* istanbul ignore else */\n        if (df) field = df;\n      } else {\n        field = getDefaultField;\n      }\n    }\n\n    const operator = getRuleDefaultOperator(field);\n\n    const valueSource = getValueSourcesMain(field, operator)[0] ?? 'value';\n\n    const newRule = {\n      id: idGenerator(),\n      field,\n      operator,\n      valueSource,\n      value: '',\n    } as unknown as R;\n\n    const value = getRuleDefaultValue(newRule);\n\n    return { ...newRule, value };\n  }, [\n    fields,\n    getDefaultField,\n    getRuleDefaultOperator,\n    getRuleDefaultValue,\n    getValueSourcesMain,\n    idGenerator,\n  ]);\n\n  const createRuleGroup = useCallback(\n    (independentCombinators?: boolean): RG => {\n      if (independentCombinators) {\n        return {\n          id: idGenerator(),\n          rules: addRuleToNewGroups ? [createRule() as RuleType] : [],\n          not: false,\n        } as RG;\n      }\n      // TODO: Avoid `@ts-expect-error`\n      // @ts-expect-error TS can't tell that RG is necessarily RuleGroupType\n      return {\n        id: idGenerator(),\n        rules: addRuleToNewGroups ? [createRule()] : [],\n        combinator: getFirstOption(combinators) ?? /* istanbul ignore next */ '',\n        not: false,\n      };\n    },\n    [addRuleToNewGroups, combinators, createRule, idGenerator]\n  );\n  // #endregion\n\n  return {\n    qbId,\n    rqbContext,\n    fields,\n    fieldMap,\n    combinators,\n    getOperatorsMain,\n    getRuleDefaultOperator,\n    getValueEditorTypeMain,\n    getValueSourcesMain,\n    getValuesMain,\n    getRuleDefaultValue,\n    getInputTypeMain,\n    createRule,\n    createRuleGroup,\n  };\n};\n","import { messages } from '../messages';\n\nlet didWarnEnabledDndWithoutReactDnD = false;\n\n/**\n * Logs a warning if drag-and-drop is enabled but the required dependencies\n * (`react-dnd` and `react-dnd-html5-backend`) were not detected.\n */\nexport const useReactDndWarning = (enableDragAndDrop: boolean, dndRefs: boolean) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    !didWarnEnabledDndWithoutReactDnD &&\n    enableDragAndDrop &&\n    !dndRefs\n  ) {\n    console.error(messages.errorEnabledDndWithoutReactDnD);\n    didWarnEnabledDndWithoutReactDnD = true;\n  }\n};\n","import { clsx } from 'clsx';\nimport type { MouseEvent } from 'react';\nimport { useCallback, useMemo } from 'react';\nimport { standardClassnames } from '../defaults';\nimport { useDeprecatedProps, useReactDndWarning } from '../hooks';\nimport type { FullField, RuleProps, RuleType } from '../types';\nimport {\n  filterFieldsByComparator,\n  getOption,\n  getParentPath,\n  getValidationClassNames,\n} from '../utils';\n\n/**\n * Prepares all values and methods used by the {@link Rule} component.\n */\nexport const useRule = (props: RuleProps) => {\n  const {\n    id,\n    path,\n    rule: ruleProp,\n    schema,\n    actions: { moveRule, onPropChange, onRuleRemove },\n    disabled: disabledProp,\n    parentDisabled,\n    shiftUpDisabled,\n    shiftDownDisabled,\n    field: fieldProp,\n    operator: operatorProp,\n    value: valueProp,\n    valueSource: valueSourceProp,\n    dragMonitorId = '',\n    dropMonitorId = '',\n    dndRef = null,\n    dragRef = null,\n    isDragging = false,\n    isOver = false,\n  } = props;\n\n  const {\n    classNames: classNamesProp,\n    fields,\n    fieldMap,\n    getInputType,\n    getOperators,\n    getValueEditorType,\n    getValueEditorSeparator,\n    getValueSources,\n    getValues,\n    validationMap,\n    enableDragAndDrop,\n    getRuleClassname,\n  } = schema;\n\n  useDeprecatedProps('rule', !ruleProp);\n\n  useReactDndWarning(enableDragAndDrop, !!(dragMonitorId || dropMonitorId || dndRef || dragRef));\n\n  const disabled = !!parentDisabled || !!disabledProp;\n\n  const rule = useMemo(\n    () =>\n      ruleProp\n        ? ruleProp\n        : {\n            id,\n            field: fieldProp ?? /* istanbul ignore next */ '',\n            operator: operatorProp ?? /* istanbul ignore next */ '',\n            value: valueProp,\n            valueSource: valueSourceProp,\n          },\n    [fieldProp, id, operatorProp, ruleProp, valueProp, valueSourceProp]\n  );\n\n  const classNames = useMemo(\n    () => ({\n      shiftActions: clsx(standardClassnames.shiftActions, classNamesProp.shiftActions),\n      dragHandle: clsx(standardClassnames.dragHandle, classNamesProp.dragHandle),\n      fields: clsx(standardClassnames.fields, classNamesProp.valueSelector, classNamesProp.fields),\n      operators: clsx(\n        standardClassnames.operators,\n        classNamesProp.valueSelector,\n        classNamesProp.operators\n      ),\n      valueSource: clsx(\n        standardClassnames.valueSource,\n        classNamesProp.valueSelector,\n        classNamesProp.valueSource\n      ),\n      value: clsx(standardClassnames.value, classNamesProp.value),\n      cloneRule: clsx(\n        standardClassnames.cloneRule,\n        classNamesProp.actionElement,\n        classNamesProp.cloneRule\n      ),\n      lockRule: clsx(\n        standardClassnames.lockRule,\n        classNamesProp.actionElement,\n        classNamesProp.lockRule\n      ),\n      removeRule: clsx(\n        standardClassnames.removeRule,\n        classNamesProp.actionElement,\n        classNamesProp.removeRule\n      ),\n    }),\n    [\n      classNamesProp.shiftActions,\n      classNamesProp.dragHandle,\n      classNamesProp.valueSelector,\n      classNamesProp.fields,\n      classNamesProp.operators,\n      classNamesProp.valueSource,\n      classNamesProp.value,\n      classNamesProp.actionElement,\n      classNamesProp.cloneRule,\n      classNamesProp.lockRule,\n      classNamesProp.removeRule,\n    ]\n  );\n\n  const generateOnChangeHandler = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (prop: Exclude<keyof RuleType, 'id' | 'path'>) => (value: any, _context?: any) => {\n      if (!disabled) {\n        onPropChange(prop, value, path);\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n\n  const cloneRule = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, _context?: any) => {\n      if (!disabled) {\n        const newPath = [...getParentPath(path), path[path.length - 1] + 1];\n        moveRule(path, newPath, true);\n      }\n    },\n    [disabled, moveRule, path]\n  );\n\n  const toggleLockRule = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, _context?: any) => {\n      onPropChange('disabled', !disabled, path);\n    },\n    [disabled, onPropChange, path]\n  );\n\n  const removeRule = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, _context?: any) => {\n      if (!disabled) {\n        onRuleRemove(path);\n      }\n    },\n    [disabled, onRuleRemove, path]\n  );\n\n  const shiftRuleUp = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event?: MouseEvent, _context?: any) => {\n      if (!disabled && !shiftUpDisabled) {\n        moveRule(path, 'up', event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftUpDisabled]\n  );\n\n  const shiftRuleDown = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event?: MouseEvent, _context?: any) => {\n      if (!disabled && !shiftDownDisabled) {\n        moveRule(path, 'down', event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftDownDisabled]\n  );\n\n  const fieldData: FullField = useMemo(\n    () => fieldMap?.[rule.field] ?? { name: rule.field, value: rule.field, label: rule.field },\n    [fieldMap, rule.field]\n  );\n  const inputType = useMemo(\n    () => fieldData.inputType ?? getInputType(rule.field, rule.operator, { fieldData }),\n    [fieldData, getInputType, rule.field, rule.operator]\n  );\n  const operators = useMemo(\n    () => getOperators(rule.field, { fieldData }),\n    [fieldData, getOperators, rule.field]\n  );\n  const operatorObject = useMemo(\n    () => getOption(operators, rule.operator),\n    [operators, rule.operator]\n  );\n  const arity = operatorObject?.arity;\n  const hideValueControls =\n    (typeof arity === 'string' && arity === 'unary') || (typeof arity === 'number' && arity < 2);\n  const valueSources = useMemo(\n    () =>\n      typeof fieldData.valueSources === 'function'\n        ? fieldData.valueSources(rule.operator)\n        : fieldData.valueSources ?? getValueSources(rule.field, rule.operator, { fieldData }),\n    [fieldData, getValueSources, rule.field, rule.operator]\n  );\n  const valueEditorType = useMemo(\n    () =>\n      rule.valueSource === 'field'\n        ? 'select'\n        : getValueEditorType(rule.field, rule.operator, { fieldData }),\n    [fieldData, getValueEditorType, rule.field, rule.operator, rule.valueSource]\n  );\n  const valueEditorSeparator = useMemo(\n    () => getValueEditorSeparator(rule.field, rule.operator, { fieldData }),\n    [fieldData, getValueEditorSeparator, rule.field, rule.operator]\n  );\n  const values = useMemo(\n    () =>\n      rule.valueSource === 'field'\n        ? filterFieldsByComparator(fieldData, fields, rule.operator)\n        : fieldData.values ?? getValues(rule.field, rule.operator, { fieldData }),\n    [fieldData, fields, getValues, rule.field, rule.operator, rule.valueSource]\n  );\n  const valueSourceOptions = useMemo(\n    () => valueSources.map(vs => ({ name: vs, value: vs, label: vs })),\n    [valueSources]\n  );\n\n  const validationResult = useMemo(\n    () =>\n      validationMap[id ?? /* istanbul ignore next */ ''] ??\n      (typeof fieldData.validator === 'function' ? fieldData.validator(rule) : null),\n    [fieldData, id, rule, validationMap]\n  );\n  const validationClassName = useMemo(\n    () => getValidationClassNames(validationResult),\n    [validationResult]\n  );\n  const fieldBasedClassName = useMemo(() => fieldData?.className ?? '', [fieldData?.className]);\n  const operatorBasedClassName = useMemo(\n    () => operatorObject?.className ?? '',\n    [operatorObject?.className]\n  );\n\n  const outerClassName = clsx(\n    getRuleClassname(rule, { fieldData }),\n    fieldBasedClassName,\n    operatorBasedClassName,\n    standardClassnames.rule,\n    classNamesProp.rule,\n    {\n      [standardClassnames.disabled]: disabled,\n      [standardClassnames.dndDragging]: isDragging,\n      [standardClassnames.dndOver]: isOver,\n    },\n    validationClassName\n  );\n\n  return {\n    ...props,\n    classNames,\n    cloneRule,\n    disabled,\n    dndRef,\n    dragMonitorId,\n    dragRef,\n    dropMonitorId,\n    fieldData,\n    generateOnChangeHandler,\n    hideValueControls,\n    inputType,\n    operators,\n    outerClassName,\n    removeRule,\n    rule,\n    shiftRuleUp,\n    shiftRuleDown,\n    toggleLockRule,\n    validationResult,\n    valueEditorSeparator,\n    valueEditorType,\n    values,\n    valueSourceOptions,\n    valueSources,\n  };\n};\n","import { clsx } from 'clsx';\nimport type { MouseEvent } from 'react';\nimport { useCallback, useMemo } from 'react';\nimport { standardClassnames } from '../defaults';\nimport { useDeprecatedProps, useReactDndWarning } from '../hooks';\nimport type { Path, RuleGroupProps, RuleGroupTypeAny } from '../types';\nimport {\n  getFirstOption,\n  getOption,\n  getParentPath,\n  getValidationClassNames,\n  isRuleGroupType,\n  pathsAreEqual,\n} from '../utils';\n\n/**\n * Prepares all values and methods used by the {@link RuleGroup} component.\n */\nexport const useRuleGroup = (props: RuleGroupProps) => {\n  const {\n    id,\n    path,\n    ruleGroup: ruleGroupProp,\n    schema: {\n      qbId,\n      accessibleDescriptionGenerator,\n      classNames: classNamesProp,\n      combinators,\n      createRule,\n      createRuleGroup,\n      disabledPaths,\n      independentCombinators,\n      validationMap,\n      enableDragAndDrop,\n      getRuleGroupClassname,\n    },\n    actions: { onGroupAdd, onGroupRemove, onPropChange, onRuleAdd, moveRule },\n    disabled: disabledProp,\n    parentDisabled,\n    shiftUpDisabled,\n    shiftDownDisabled,\n    combinator: combinatorProp,\n    rules: rulesProp,\n    not: notProp,\n    // Drag-and-drop\n    dragMonitorId = '',\n    dropMonitorId = '',\n    previewRef = null,\n    dragRef = null,\n    dropRef = null,\n    isDragging = false,\n    isOver = false,\n  } = props;\n\n  useDeprecatedProps('ruleGroup', !ruleGroupProp);\n\n  useReactDndWarning(\n    enableDragAndDrop,\n    !!(dragMonitorId || dropMonitorId || previewRef || dragRef || dropRef)\n  );\n\n  const disabled = !!parentDisabled || !!disabledProp;\n\n  const combinator = useMemo(\n    () =>\n      ruleGroupProp && isRuleGroupType(ruleGroupProp)\n        ? ruleGroupProp.combinator\n        : !ruleGroupProp\n          ? combinatorProp ?? getFirstOption(combinators)!\n          : getFirstOption(combinators)!,\n    [combinatorProp, combinators, ruleGroupProp]\n  );\n\n  const ruleGroup = useMemo(\n    () =>\n      ruleGroupProp\n        ? { ...ruleGroupProp, ...(!independentCombinators ? { combinator } : {}) }\n        : ({ rules: rulesProp, not: notProp } as RuleGroupTypeAny),\n    [combinator, independentCombinators, notProp, ruleGroupProp, rulesProp]\n  );\n\n  const classNames = useMemo(\n    () => ({\n      header: clsx(standardClassnames.header, classNamesProp.header, {\n        [standardClassnames.dndOver]: isOver,\n      }),\n      shiftActions: clsx(standardClassnames.shiftActions, classNamesProp.shiftActions),\n      dragHandle: clsx(standardClassnames.dragHandle, classNamesProp.dragHandle),\n      combinators: clsx(\n        standardClassnames.combinators,\n        classNamesProp.valueSelector,\n        classNamesProp.combinators\n      ),\n      notToggle: clsx(standardClassnames.notToggle, classNamesProp.notToggle),\n      addRule: clsx(\n        standardClassnames.addRule,\n        classNamesProp.actionElement,\n        classNamesProp.addRule\n      ),\n      addGroup: clsx(\n        standardClassnames.addGroup,\n        classNamesProp.actionElement,\n        classNamesProp.addGroup\n      ),\n      cloneGroup: clsx(\n        standardClassnames.cloneGroup,\n        classNamesProp.actionElement,\n        classNamesProp.cloneGroup\n      ),\n      lockGroup: clsx(\n        standardClassnames.lockGroup,\n        classNamesProp.actionElement,\n        classNamesProp.lockGroup\n      ),\n      removeGroup: clsx(\n        standardClassnames.removeGroup,\n        classNamesProp.actionElement,\n        classNamesProp.removeGroup\n      ),\n      body: clsx(standardClassnames.body, classNamesProp.body),\n    }),\n    [\n      classNamesProp.actionElement,\n      classNamesProp.addGroup,\n      classNamesProp.addRule,\n      classNamesProp.body,\n      classNamesProp.cloneGroup,\n      classNamesProp.combinators,\n      classNamesProp.dragHandle,\n      classNamesProp.header,\n      classNamesProp.lockGroup,\n      classNamesProp.notToggle,\n      classNamesProp.removeGroup,\n      classNamesProp.shiftActions,\n      classNamesProp.valueSelector,\n      isOver,\n    ]\n  );\n\n  const onCombinatorChange = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (value: any, _context?: any) => {\n      if (!disabled) {\n        onPropChange('combinator', value, path);\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n\n  const onIndependentCombinatorChange = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (value: any, index: number, _context?: any) => {\n      if (!disabled) {\n        onPropChange('combinator', value, path.concat([index]));\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n\n  const onNotToggleChange = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (checked: boolean, _context?: any) => {\n      if (!disabled) {\n        onPropChange('not', checked, path);\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n\n  const addRule = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, context?: any) => {\n      if (!disabled) {\n        const newRule = createRule();\n        onRuleAdd(newRule, path, context);\n      }\n    },\n    [createRule, disabled, onRuleAdd, path]\n  );\n\n  const addGroup = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, context?: any) => {\n      if (!disabled) {\n        const newGroup = createRuleGroup(independentCombinators);\n        onGroupAdd(newGroup, path, context);\n      }\n    },\n    [createRuleGroup, disabled, independentCombinators, onGroupAdd, path]\n  );\n\n  const cloneGroup = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, _context?: any) => {\n      if (!disabled) {\n        const newPath = [...getParentPath(path), path[path.length - 1] + 1];\n        moveRule(path, newPath, true);\n      }\n    },\n    [disabled, moveRule, path]\n  );\n\n  const shiftGroupUp = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event?: MouseEvent, _context?: any) => {\n      if (!disabled && !shiftUpDisabled) {\n        moveRule(path, 'up', event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftUpDisabled]\n  );\n\n  const shiftGroupDown = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event?: MouseEvent, _context?: any) => {\n      if (!disabled && !shiftDownDisabled) {\n        moveRule(path, 'down', event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftDownDisabled]\n  );\n\n  const toggleLockGroup = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, _context?: any) => {\n      onPropChange('disabled', !disabled, path);\n    },\n    [disabled, onPropChange, path]\n  );\n\n  const removeGroup = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event?: any, _context?: any) => {\n      if (!disabled) {\n        onGroupRemove(path);\n      }\n    },\n    [disabled, onGroupRemove, path]\n  );\n\n  const validationResult = useMemo(\n    () => validationMap[id ?? /* istanbul ignore next */ ''],\n    [id, validationMap]\n  );\n  const validationClassName = useMemo(\n    () => getValidationClassNames(validationResult),\n    [validationResult]\n  );\n  const combinatorBasedClassName = useMemo(\n    () => (independentCombinators ? null : getOption(combinators, combinator)?.className ?? ''),\n    [combinator, combinators, independentCombinators]\n  );\n\n  const ruleGroupClassname = useMemo(\n    () => getRuleGroupClassname(ruleGroup as RuleGroupTypeAny),\n    [getRuleGroupClassname, ruleGroup]\n  );\n\n  const outerClassName = useMemo(\n    () =>\n      clsx(\n        ruleGroupClassname,\n        combinatorBasedClassName,\n        standardClassnames.ruleGroup,\n        classNamesProp.ruleGroup,\n        {\n          [standardClassnames.disabled]: disabled,\n          [standardClassnames.dndDragging]: isDragging,\n        },\n        validationClassName\n      ),\n    [\n      classNamesProp.ruleGroup,\n      combinatorBasedClassName,\n      disabled,\n      ruleGroupClassname,\n      isDragging,\n      validationClassName,\n    ]\n  );\n\n  // Memoize the path info so every render doesn't generate a new array\n  const pathsMemo = useMemo(() => {\n    const paths: { path: Path; disabled: boolean }[] = [];\n    for (let i = 0; i < ruleGroup.rules.length; i++) {\n      const thisPath = [...path, i];\n      paths[i] = {\n        path: thisPath,\n        disabled: disabled || disabledPaths.some(p => pathsAreEqual(thisPath, p)),\n      };\n    }\n    return paths;\n  }, [disabled, path, ruleGroup.rules.length, disabledPaths]);\n\n  const accessibleDescription = useMemo(\n    () => accessibleDescriptionGenerator({ path, qbId }),\n    [accessibleDescriptionGenerator, path, qbId]\n  );\n\n  return {\n    ...props,\n    addGroup,\n    addRule,\n    accessibleDescription,\n    classNames,\n    cloneGroup,\n    combinator,\n    disabled,\n    dragMonitorId,\n    dragRef,\n    dropMonitorId,\n    dropRef,\n    isDragging,\n    isOver,\n    onCombinatorChange,\n    onGroupAdd,\n    onIndependentCombinatorChange,\n    onNotToggleChange,\n    outerClassName,\n    parentDisabled,\n    pathsMemo,\n    previewRef,\n    removeGroup,\n    ruleGroup,\n    shiftGroupUp,\n    shiftGroupDown,\n    toggleLockGroup,\n    validationClassName,\n    validationResult,\n  };\n};\n","import type { ChangeEvent } from 'react';\nimport { useMemo } from 'react';\n\nexport interface UseSelectElementChangeHandlerParams {\n  onChange: (v: string | string[]) => void;\n  multiple?: boolean;\n}\n\n/**\n * Returns a memoized change handler for HTML `<select>` elements.\n */\nexport const useSelectElementChangeHandler = (params: UseSelectElementChangeHandlerParams) => {\n  const { multiple, onChange } = params;\n  const selectElementChangeHandler = useMemo(\n    () =>\n      multiple\n        ? (e: ChangeEvent<HTMLSelectElement>) =>\n            onChange(Array.from(e.target.selectedOptions).map(o => o.value))\n        : (e: ChangeEvent<HTMLSelectElement>) => onChange(e.target.value),\n    [multiple, onChange]\n  );\n\n  return selectElementChangeHandler;\n};\n","import type { MouseEvent } from 'react';\nimport { useCallback } from 'react';\n\ninterface RQBMouseEventHandler {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (event?: MouseEvent, context?: any): void;\n}\n\n/**\n * Wraps an event handler function in another function that calls\n * `event.preventDefault()` and `event.stopPropagation()` first. The\n * returned function accepts and forwards a second `context` argument.\n */\nexport const useStopEventPropagation = (method: RQBMouseEventHandler): RQBMouseEventHandler =>\n  useCallback(\n    (event, context) => {\n      event?.preventDefault();\n      event?.stopPropagation();\n      method(event, context);\n    },\n    [method]\n  );\n","import { produce } from 'immer';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport type { ValueEditorProps } from '../types';\nimport { getFirstOption, joinWith, parseNumber, toArray } from '../utils';\n\nexport type UseValueEditorParams = Pick<\n  ValueEditorProps,\n  | 'handleOnChange'\n  | 'inputType'\n  | 'operator'\n  | 'value'\n  | 'listsAsArrays'\n  | 'type'\n  | 'values'\n  | 'parseNumbers'\n  | 'skipHook'\n>;\n\n/**\n * This hook is primarily concerned with multi-value editors like date range\n * pickers, editors for 'in' and 'between' operators, etc.\n *\n * @returns The value as an array (`valueAsArray`) and a change handler for\n * series of editors (`multiValueHandler`).\n *\n * **NOTE:** The following logic only applies if `skipHook` is not `true`. To avoid\n * automatically updating the `value`, pass `{ skipHook: true }`.\n *\n * If the `value` is an array of non-zero length, the `operator` is _not_ one of\n * the known multi-value operators (\"between\", \"notBetween\", \"in\", \"notIn\"), and\n * the `type` is not \"multiselect\", then the `value` will be set to the first\n * element of the array (i.e., `value[0]`).\n *\n * The same thing will happen if `inputType` is \"number\" and `value` is a string\n * containing a comma, since `<input type=\"number\">` doesn't handle commas.\n *\n * @example\n * // Consider the following rule:\n * `{ field: \"f1\", operator: \"in\", value: [\"twelve\",\"fourteen\"] }`\n * // If `operator` changes to \"=\", the value will be reset to \"twelve\".\n *\n * @example\n * // Consider the following rule:\n * `{ field: \"f1\", operator: \"between\", value: \"12,14\" }`\n * // If `operator` changes to \"=\", the value will be reset to \"12\".\n */\nexport const useValueEditor = (props: UseValueEditorParams) => {\n  const {\n    handleOnChange,\n    inputType,\n    operator,\n    value,\n    listsAsArrays,\n    parseNumbers,\n    values,\n    type,\n    skipHook,\n  } = props;\n\n  useEffect(() => {\n    if (\n      !skipHook &&\n      type !== 'multiselect' &&\n      !['between', 'notBetween', 'in', 'notIn'].includes(operator) &&\n      (Array.isArray(value) ||\n        (inputType === 'number' && typeof value === 'string' && value.includes(',')))\n    ) {\n      handleOnChange(toArray(value)[0] ?? '');\n    }\n  }, [handleOnChange, inputType, operator, skipHook, type, value]);\n\n  const valueAsArray = useMemo(() => toArray(value), [value]);\n\n  const multiValueHandler = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (v: any, i: number) => {\n      const val = produce(valueAsArray, va => {\n        va[i] = parseNumber(v, { parseNumbers });\n        // Enforce an array length of (at least) two for \"between\"/\"notBetween\"\n        if (\n          i === 0 &&\n          (operator === 'between' || operator === 'notBetween') &&\n          (va.length < 2 || typeof va[1] === 'undefined')\n        ) {\n          va[1] = getFirstOption(values);\n        }\n      });\n      handleOnChange(listsAsArrays ? val : joinWith(val, ','));\n    },\n    [handleOnChange, listsAsArrays, operator, parseNumbers, valueAsArray, values]\n  );\n\n  return {\n    /**\n     * Array of values for when the main value represents a list, e.g. when operator\n     * is \"between\" or \"in\".\n     */\n    valueAsArray,\n    /**\n     * An update handler for a series of value editors, e.g. when operator is \"between\".\n     * Calling this function will update a single element of the value array and leave\n     * the rest of the array as is.\n     *\n     * @param {string} val The new value for the editor\n     * @param {number} idx The index of the editor (and the array element to update)\n     */\n    multiValueHandler,\n  };\n};\n","import { useCallback, useMemo } from 'react';\nimport type { ValueSelectorProps } from '../types';\nimport { joinWith, toArray } from '../utils';\n\nexport type UseValueSelectorParams = Pick<\n  ValueSelectorProps,\n  'handleOnChange' | 'listsAsArrays' | 'multiple' | 'value'\n>;\n\n/**\n * Transforms a value into an array when appropriate and provides\n * a memoized change handler.\n */\nexport const useValueSelector = (props: UseValueSelectorParams) => {\n  const { handleOnChange, listsAsArrays = false, multiple = false, value } = props;\n\n  const onChange = useCallback(\n    (v: string | string[]) => {\n      if (multiple) {\n        const valueAsArray = toArray(v);\n        handleOnChange(listsAsArrays ? valueAsArray : joinWith(valueAsArray, ','));\n      } else {\n        handleOnChange(v);\n      }\n    },\n    [handleOnChange, listsAsArrays, multiple]\n  );\n\n  const val = useMemo(() => (multiple ? toArray(value) : value), [multiple, value]);\n\n  return {\n    /**\n     * Memoized change handler for value selectors\n     */\n    onChange,\n    /**\n     * The value as provided or, if appropriate, as an array\n     */\n    val,\n  };\n};\n","import { createContext } from 'react';\nimport type { QueryBuilderContextProps } from '../types';\n\n/**\n * Context provider for {@link QueryBuilder}. Any descendant query builders\n * will inherit the props from a context provider.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const QueryBuilderContext = createContext<QueryBuilderContextProps<any, any>>({});\n","import * as React from 'react';\nimport { TestID } from '../defaults';\nimport { useRule, useStopEventPropagation } from '../hooks';\nimport type { RuleProps } from '../types';\n\n/**\n * Default component to display {@link RuleType} objects. This is\n * actually a small wrapper around {@link RuleComponents}.\n */\nexport const Rule = React.memo((props: RuleProps) => {\n  const r = useRule(props);\n\n  const cloneRule = useStopEventPropagation(r.cloneRule);\n  const toggleLockRule = useStopEventPropagation(r.toggleLockRule);\n  const removeRule = useStopEventPropagation(r.removeRule);\n  const shiftRuleUp = useStopEventPropagation(r.shiftRuleUp);\n  const shiftRuleDown = useStopEventPropagation(r.shiftRuleDown);\n\n  return (\n    <div\n      ref={r.dndRef}\n      data-testid={TestID.rule}\n      data-dragmonitorid={r.dragMonitorId}\n      data-dropmonitorid={r.dropMonitorId}\n      className={r.outerClassName}\n      data-rule-id={r.id}\n      data-level={r.path.length}\n      data-path={JSON.stringify(r.path)}>\n      <RuleComponents\n        {...r}\n        cloneRule={cloneRule}\n        toggleLockRule={toggleLockRule}\n        removeRule={removeRule}\n        shiftRuleUp={shiftRuleUp}\n        shiftRuleDown={shiftRuleDown}\n      />\n    </div>\n  );\n});\n\n/**\n * Renders a `React.Fragment` containing an array of form controls for managing\n * a {@link RuleType}.\n */\nexport const RuleComponents = React.memo((r: RuleProps & ReturnType<typeof useRule>) => {\n  const {\n    schema: {\n      controls: {\n        shiftActions: ShiftActionsControlElement,\n        dragHandle: DragHandleControlElement,\n        fieldSelector: FieldSelectorControlElement,\n        operatorSelector: OperatorSelectorControlElement,\n        valueSourceSelector: ValueSourceSelectorControlElement,\n        valueEditor: ValueEditorControlElement,\n        cloneRuleAction: CloneRuleActionControlElement,\n        lockRuleAction: LockRuleActionControlElement,\n        removeRuleAction: RemoveRuleActionControlElement,\n      },\n    },\n    combinator,\n  } = r;\n\n  return (\n    <>\n      {r.schema.showShiftActions && (\n        <ShiftActionsControlElement\n          testID={TestID.shiftActions}\n          level={r.path.length}\n          path={r.path}\n          titles={{\n            shiftUp: r.translations.shiftActionUp.title,\n            shiftDown: r.translations.shiftActionDown.title,\n          }}\n          labels={{\n            shiftUp: r.translations.shiftActionUp.label,\n            shiftDown: r.translations.shiftActionDown.label,\n          }}\n          className={r.classNames.shiftActions}\n          disabled={r.disabled}\n          shiftUp={r.shiftRuleUp}\n          shiftDown={r.shiftRuleDown}\n          shiftUpDisabled={r.shiftUpDisabled}\n          shiftDownDisabled={r.shiftDownDisabled}\n          context={r.context}\n          validation={r.validationResult}\n          schema={r.schema}\n          ruleOrGroup={r.rule}\n        />\n      )}\n      {r.schema.enableDragAndDrop && (\n        <DragHandleControlElement\n          testID={TestID.dragHandle}\n          ref={r.dragRef}\n          level={r.path.length}\n          path={r.path}\n          title={r.translations.dragHandle.title}\n          label={r.translations.dragHandle.label}\n          className={r.classNames.dragHandle}\n          disabled={r.disabled}\n          context={r.context}\n          validation={r.validationResult}\n          schema={r.schema}\n          ruleOrGroup={r.rule}\n        />\n      )}\n      {combinator}\n      <FieldSelectorControlElement\n        testID={TestID.fields}\n        options={r.schema.fields}\n        title={r.translations.fields.title}\n        value={r.rule.field}\n        operator={r.rule.operator}\n        className={r.classNames.fields}\n        handleOnChange={r.generateOnChangeHandler('field')}\n        level={r.path.length}\n        path={r.path}\n        disabled={r.disabled}\n        context={r.context}\n        validation={r.validationResult}\n        schema={r.schema}\n        rule={r.rule}\n      />\n      {(r.schema.autoSelectField || r.rule.field !== r.translations.fields.placeholderName) && (\n        <>\n          <OperatorSelectorControlElement\n            testID={TestID.operators}\n            field={r.rule.field}\n            fieldData={r.fieldData}\n            title={r.translations.operators.title}\n            options={r.operators}\n            value={r.rule.operator}\n            className={r.classNames.operators}\n            handleOnChange={r.generateOnChangeHandler('operator')}\n            level={r.path.length}\n            path={r.path}\n            disabled={r.disabled}\n            context={r.context}\n            validation={r.validationResult}\n            schema={r.schema}\n            rule={r.rule}\n          />\n          {(r.schema.autoSelectOperator ||\n            r.rule.operator !== r.translations.operators.placeholderName) &&\n            !r.hideValueControls && (\n              <>\n                {!['null', 'notNull'].includes(r.rule.operator) && r.valueSources.length > 1 && (\n                  <ValueSourceSelectorControlElement\n                    testID={TestID.valueSourceSelector}\n                    field={r.rule.field}\n                    fieldData={r.fieldData}\n                    title={r.translations.valueSourceSelector.title}\n                    options={r.valueSourceOptions}\n                    value={r.rule.valueSource ?? 'value'}\n                    className={r.classNames.valueSource}\n                    handleOnChange={r.generateOnChangeHandler('valueSource')}\n                    level={r.path.length}\n                    path={r.path}\n                    disabled={r.disabled}\n                    context={r.context}\n                    validation={r.validationResult}\n                    schema={r.schema}\n                    rule={r.rule}\n                  />\n                )}\n                <ValueEditorControlElement\n                  testID={TestID.valueEditor}\n                  field={r.rule.field}\n                  fieldData={r.fieldData}\n                  title={r.translations.value.title}\n                  operator={r.rule.operator}\n                  value={r.rule.value}\n                  valueSource={r.rule.valueSource ?? 'value'}\n                  type={r.valueEditorType}\n                  inputType={r.inputType}\n                  values={r.values}\n                  listsAsArrays={r.schema.listsAsArrays}\n                  parseNumbers={r.schema.parseNumbers}\n                  separator={r.valueEditorSeparator}\n                  className={r.classNames.value}\n                  handleOnChange={r.generateOnChangeHandler('value')}\n                  level={r.path.length}\n                  path={r.path}\n                  disabled={r.disabled}\n                  context={r.context}\n                  validation={r.validationResult}\n                  schema={r.schema}\n                  rule={r.rule}\n                />\n              </>\n            )}\n        </>\n      )}\n      {r.schema.showCloneButtons && (\n        <CloneRuleActionControlElement\n          testID={TestID.cloneRule}\n          label={r.translations.cloneRule.label}\n          title={r.translations.cloneRule.title}\n          className={r.classNames.cloneRule}\n          handleOnClick={r.cloneRule}\n          level={r.path.length}\n          path={r.path}\n          disabled={r.disabled}\n          context={r.context}\n          validation={r.validationResult}\n          ruleOrGroup={r.rule}\n          schema={r.schema}\n        />\n      )}\n      {r.schema.showLockButtons && (\n        <LockRuleActionControlElement\n          testID={TestID.lockRule}\n          label={r.translations.lockRule.label}\n          title={r.translations.lockRule.title}\n          className={r.classNames.lockRule}\n          handleOnClick={r.toggleLockRule}\n          level={r.path.length}\n          path={r.path}\n          disabled={r.disabled}\n          disabledTranslation={r.parentDisabled ? undefined : r.translations.lockRuleDisabled}\n          context={r.context}\n          validation={r.validationResult}\n          ruleOrGroup={r.rule}\n          schema={r.schema}\n        />\n      )}\n      <RemoveRuleActionControlElement\n        testID={TestID.removeRule}\n        label={r.translations.removeRule.label}\n        title={r.translations.removeRule.title}\n        className={r.classNames.removeRule}\n        handleOnClick={r.removeRule}\n        level={r.path.length}\n        path={r.path}\n        disabled={r.disabled}\n        context={r.context}\n        validation={r.validationResult}\n        ruleOrGroup={r.rule}\n        schema={r.schema}\n      />\n    </>\n  );\n});\n","import * as React from 'react';\nimport { Fragment } from 'react';\nimport { TestID } from '../defaults';\nimport { useRuleGroup, useStopEventPropagation } from '../hooks';\nimport type { RuleGroupArray, RuleGroupICArray, RuleGroupProps } from '../types';\nimport { isRuleGroup, isRuleGroupType, pathsAreEqual } from '../utils';\n\n/**\n * Default component to display {@link RuleGroupType} and {@link RuleGroupTypeIC}\n * objects. This is actually a small wrapper around {@link RuleGroupHeaderComponents}\n * and {@link RuleGroupBodyComponents}.\n */\nexport const RuleGroup = React.memo((props: RuleGroupProps) => {\n  const rg = useRuleGroup(props);\n\n  const addRule = useStopEventPropagation(rg.addRule);\n  const addGroup = useStopEventPropagation(rg.addGroup);\n  const cloneGroup = useStopEventPropagation(rg.cloneGroup);\n  const toggleLockGroup = useStopEventPropagation(rg.toggleLockGroup);\n  const removeGroup = useStopEventPropagation(rg.removeGroup);\n  const shiftGroupUp = useStopEventPropagation(rg.shiftGroupUp);\n  const shiftGroupDown = useStopEventPropagation(rg.shiftGroupDown);\n\n  return (\n    <div\n      ref={rg.previewRef}\n      title={rg.accessibleDescription}\n      className={rg.outerClassName}\n      data-testid={TestID.ruleGroup}\n      data-dragmonitorid={rg.dragMonitorId}\n      data-dropmonitorid={rg.dropMonitorId}\n      data-rule-group-id={rg.id}\n      data-level={rg.path.length}\n      data-path={JSON.stringify(rg.path)}>\n      <div ref={rg.dropRef} className={rg.classNames.header}>\n        <RuleGroupHeaderComponents\n          {...(rg as Parameters<typeof RuleGroupHeaderComponents>[0])}\n          addRule={addRule}\n          addGroup={addGroup}\n          cloneGroup={cloneGroup}\n          toggleLockGroup={toggleLockGroup}\n          removeGroup={removeGroup}\n          shiftGroupUp={shiftGroupUp}\n          shiftGroupDown={shiftGroupDown}\n        />\n      </div>\n      <div className={rg.classNames.body}>\n        <RuleGroupBodyComponents\n          {...(rg as Parameters<typeof RuleGroupBodyComponents>[0])}\n          addRule={addRule}\n          addGroup={addGroup}\n          cloneGroup={cloneGroup}\n          toggleLockGroup={toggleLockGroup}\n          removeGroup={removeGroup}\n          shiftGroupUp={shiftGroupUp}\n          shiftGroupDown={shiftGroupDown}\n        />\n      </div>\n    </div>\n  );\n});\n\n/**\n * Renders a `React.Fragment` containing an array of form controls for managing\n * a {@link RuleGroupType} or {@link RuleGroupTypeIC}.\n */\nexport const RuleGroupHeaderComponents = React.memo(\n  (rg: RuleGroupProps & ReturnType<typeof useRuleGroup>) => {\n    const {\n      schema: {\n        controls: {\n          shiftActions: ShiftActionsControlElement,\n          dragHandle: DragHandleControlElement,\n          combinatorSelector: CombinatorSelectorControlElement,\n          notToggle: NotToggleControlElement,\n          addRuleAction: AddRuleActionControlElement,\n          addGroupAction: AddGroupActionControlElement,\n          cloneGroupAction: CloneGroupActionControlElement,\n          lockGroupAction: LockGroupActionControlElement,\n          removeGroupAction: RemoveGroupActionControlElement,\n        },\n      },\n    } = rg;\n\n    return (\n      <>\n        {rg.schema.showShiftActions && rg.path.length > 0 && (\n          <ShiftActionsControlElement\n            key={TestID.shiftActions}\n            testID={TestID.shiftActions}\n            level={rg.path.length}\n            path={rg.path}\n            titles={{\n              shiftUp: rg.translations.shiftActionUp.title,\n              shiftDown: rg.translations.shiftActionDown.title,\n            }}\n            labels={{\n              shiftUp: rg.translations.shiftActionUp.label,\n              shiftDown: rg.translations.shiftActionDown.label,\n            }}\n            className={rg.classNames.shiftActions}\n            disabled={rg.disabled}\n            shiftUp={rg.shiftGroupUp}\n            shiftDown={rg.shiftGroupDown}\n            shiftUpDisabled={rg.shiftUpDisabled}\n            shiftDownDisabled={rg.shiftDownDisabled}\n            context={rg.context}\n            validation={rg.validationResult}\n            schema={rg.schema}\n            ruleOrGroup={rg.ruleGroup}\n          />\n        )}\n        {rg.path.length > 0 && rg.schema.enableDragAndDrop && (\n          <DragHandleControlElement\n            key={TestID.dragHandle}\n            testID={TestID.dragHandle}\n            ref={rg.dragRef}\n            level={rg.path.length}\n            path={rg.path}\n            title={rg.translations.dragHandle.title}\n            label={rg.translations.dragHandle.label}\n            className={rg.classNames.dragHandle}\n            disabled={rg.disabled}\n            context={rg.context}\n            validation={rg.validationResult}\n            schema={rg.schema}\n            ruleOrGroup={rg.ruleGroup}\n          />\n        )}\n        {rg.path.length > 0 && <span className=\"statement\">Any of the following are true...</span>}\n        {!rg.schema.showCombinatorsBetweenRules && !rg.schema.independentCombinators && (\n          <CombinatorSelectorControlElement\n            key={TestID.combinators}\n            testID={TestID.combinators}\n            options={rg.schema.combinators}\n            value={rg.combinator}\n            title={rg.translations.combinators.title}\n            className={rg.classNames.combinators}\n            handleOnChange={rg.onCombinatorChange}\n            rules={rg.ruleGroup.rules}\n            level={rg.path.length}\n            path={rg.path}\n            disabled={rg.disabled}\n            context={rg.context}\n            validation={rg.validationResult}\n            schema={rg.schema}\n          />\n        )}\n        {rg.schema.showNotToggle && (\n          <NotToggleControlElement\n            key={TestID.notToggle}\n            testID={TestID.notToggle}\n            className={rg.classNames.notToggle}\n            title={rg.translations.notToggle.title}\n            label={rg.translations.notToggle.label}\n            checked={rg.ruleGroup.not}\n            handleOnChange={rg.onNotToggleChange}\n            level={rg.path.length}\n            disabled={rg.disabled}\n            path={rg.path}\n            context={rg.context}\n            validation={rg.validationResult}\n            schema={rg.schema}\n            ruleGroup={rg.ruleGroup}\n          />\n        )}\n        <AddRuleActionControlElement\n          key={TestID.addRule}\n          testID={TestID.addRule}\n          label={rg.translations.addRule.label}\n          title={rg.translations.addRule.title}\n          className={rg.classNames.addRule}\n          handleOnClick={rg.addRule}\n          rules={rg.ruleGroup.rules}\n          level={rg.path.length}\n          path={rg.path}\n          disabled={rg.disabled}\n          context={rg.context}\n          validation={rg.validationResult}\n          ruleOrGroup={rg.ruleGroup}\n          schema={rg.schema}\n        />\n        <AddGroupActionControlElement\n          key={TestID.addGroup}\n          testID={TestID.addGroup}\n          label={rg.translations.addGroup.label}\n          title={rg.translations.addGroup.title}\n          className={rg.classNames.addGroup}\n          handleOnClick={rg.addGroup}\n          rules={rg.ruleGroup.rules}\n          level={rg.path.length}\n          path={rg.path}\n          disabled={rg.disabled}\n          context={rg.context}\n          validation={rg.validationResult}\n          ruleOrGroup={rg.ruleGroup}\n          schema={rg.schema}\n        />\n        {rg.schema.showCloneButtons && rg.path.length >= 1 && (\n          <CloneGroupActionControlElement\n            key={TestID.cloneGroup}\n            testID={TestID.cloneGroup}\n            label={rg.translations.cloneRuleGroup.label}\n            title={rg.translations.cloneRuleGroup.title}\n            className={rg.classNames.cloneGroup}\n            handleOnClick={rg.cloneGroup}\n            rules={rg.ruleGroup.rules}\n            level={rg.path.length}\n            path={rg.path}\n            disabled={rg.disabled}\n            context={rg.context}\n            validation={rg.validationResult}\n            ruleOrGroup={rg.ruleGroup}\n            schema={rg.schema}\n          />\n        )}\n        {rg.schema.showLockButtons && (\n          <LockGroupActionControlElement\n            key={TestID.lockGroup}\n            testID={TestID.lockGroup}\n            label={rg.translations.lockGroup.label}\n            title={rg.translations.lockGroup.title}\n            className={rg.classNames.lockGroup}\n            handleOnClick={rg.toggleLockGroup}\n            rules={rg.ruleGroup.rules}\n            level={rg.path.length}\n            path={rg.path}\n            disabled={rg.disabled}\n            disabledTranslation={rg.parentDisabled ? undefined : rg.translations.lockGroupDisabled}\n            context={rg.context}\n            validation={rg.validationResult}\n            ruleOrGroup={rg.ruleGroup}\n            schema={rg.schema}\n          />\n        )}\n        {rg.path.length > 0 && (\n          <RemoveGroupActionControlElement\n            key={TestID.removeGroup}\n            testID={TestID.removeGroup}\n            label={rg.translations.removeGroup.label}\n            title={rg.translations.removeGroup.title}\n            className={rg.classNames.removeGroup}\n            handleOnClick={rg.removeGroup}\n            rules={rg.ruleGroup.rules}\n            level={rg.path.length}\n            path={rg.path}\n            disabled={rg.disabled}\n            context={rg.context}\n            validation={rg.validationResult}\n            ruleOrGroup={rg.ruleGroup}\n            schema={rg.schema}\n          />\n        )}\n      </>\n    );\n  }\n);\n\n/**\n * Renders a `React.Fragment` containing an array of either (1) {@link Rule} and\n * {@link RuleGroup}, or (2) {@link Rule}, {@link RuleGroup}, and {@link InlineCombinator}.\n */\nexport const RuleGroupBodyComponents = React.memo(\n  (rg: RuleGroupProps & ReturnType<typeof useRuleGroup>) => {\n    const {\n      schema: {\n        controls: {\n          combinatorSelector: CombinatorSelectorControlElement,\n          inlineCombinator: InlineCombinatorControlElement,\n          ruleGroup: RuleGroupControlElement,\n          rule: RuleControlElement,\n        },\n      },\n    } = rg;\n\n    return (\n      <>\n        {(rg.ruleGroup.rules as RuleGroupICArray | RuleGroupArray).map(\n          (r, idx, { length: ruleArrayLength }) => {\n            const thisPathMemo = rg.pathsMemo[idx];\n            const thisPath = thisPathMemo.path;\n            const thisPathDisabled = thisPathMemo.disabled || (typeof r !== 'string' && r.disabled);\n            const shiftUpDisabled = pathsAreEqual([0], thisPath);\n            const shiftDownDisabled = rg.path.length === 0 && idx === ruleArrayLength - 1;\n            const key = typeof r === 'string' ? [...thisPath, r].join('-') : r.id;\n            const showCombinatorBetweenRules =\n              !rg.schema.independentCombinators && rg.schema.showCombinatorsBetweenRules;\n            return (\n              <Fragment key={key}>\n                {typeof r === 'string' ? (\n                  <InlineCombinatorControlElement\n                    key={`${TestID.inlineCombinator}-independent`}\n                    options={rg.schema.combinators}\n                    value={r}\n                    title={rg.translations.combinators.title}\n                    className={rg.classNames.combinators}\n                    handleOnChange={val => rg.onIndependentCombinatorChange(val, idx)}\n                    rules={rg.ruleGroup.rules}\n                    level={rg.path.length}\n                    context={rg.context}\n                    validation={rg.validationResult}\n                    component={CombinatorSelectorControlElement}\n                    path={thisPath}\n                    disabled={thisPathDisabled}\n                    schema={rg.schema}\n                  />\n                ) : isRuleGroup(r) ? (\n                  <RuleGroupControlElement\n                    key={TestID.ruleGroup}\n                    id={r.id}\n                    schema={rg.schema}\n                    actions={rg.actions}\n                    path={thisPath}\n                    translations={rg.translations}\n                    ruleGroup={r}\n                    rules={r.rules}\n                    combinator={isRuleGroupType(r) ? r.combinator : undefined}\n                    not={!!r.not}\n                    disabled={thisPathDisabled}\n                    parentDisabled={rg.parentDisabled || rg.disabled}\n                    shiftUpDisabled={shiftUpDisabled}\n                    shiftDownDisabled={shiftDownDisabled}\n                    context={rg.context}\n                  />\n                ) : (\n                  <RuleControlElement\n                    key={TestID.rule}\n                    id={r.id!}\n                    rule={r}\n                    field={r.field}\n                    operator={r.operator}\n                    value={r.value}\n                    valueSource={r.valueSource}\n                    schema={rg.schema}\n                    actions={rg.actions}\n                    path={thisPath}\n                    disabled={thisPathDisabled}\n                    parentDisabled={rg.parentDisabled || rg.disabled}\n                    translations={rg.translations}\n                    shiftUpDisabled={shiftUpDisabled}\n                    shiftDownDisabled={shiftDownDisabled}\n                    context={rg.context}\n                    combinator={\n                      idx === 1 && showCombinatorBetweenRules ? (\n                        <InlineCombinatorControlElement\n                          key={TestID.inlineCombinator}\n                          options={rg.schema.combinators}\n                          value={rg.combinator}\n                          title={rg.translations.combinators.title}\n                          className={rg.classNames.combinators}\n                          handleOnChange={rg.onCombinatorChange}\n                          rules={rg.ruleGroup.rules}\n                          level={rg.path.length}\n                          context={rg.context}\n                          validation={rg.validationResult}\n                          component={CombinatorSelectorControlElement}\n                          path={thisPath}\n                          disabled={rg.disabled}\n                          schema={rg.schema}\n                        />\n                      ) : idx > 1 && showCombinatorBetweenRules ? (\n                        <span className={rg.classNames.combinators}>{rg.combinator}</span>\n                      ) : rg.path.length === 0 && showCombinatorBetweenRules ? (\n                        <span className={rg.classNames.combinators}>Where</span>\n                      ) : (\n                        <span className={rg.classNames.combinators} />\n                      )\n                    }\n                  />\n                )}\n              </Fragment>\n            );\n          }\n        )}\n      </>\n    );\n  }\n);\n","import * as React from 'react';\nimport type { ShiftActionsProps } from '../types';\n\n/**\n * Default \"shift up\"/\"shift down\" buttons used by {@link QueryBuilder}.\n */\nexport const ShiftActions = (props: ShiftActionsProps) => (\n  <div data-testid={props.testID} className={props.className}>\n    <button\n      disabled={props.disabled || props.shiftUpDisabled}\n      onClick={props.shiftUp}\n      title={props.titles?.shiftUp}>\n      {props.labels?.shiftUp}\n    </button>\n    <button\n      disabled={props.disabled || props.shiftDownDisabled}\n      onClick={props.shiftDown}\n      title={props.titles?.shiftDown}>\n      {props.labels?.shiftDown}\n    </button>\n  </div>\n);\n","import * as React from 'react';\nimport { standardClassnames } from '../defaults';\nimport { useValueEditor } from '../hooks';\nimport type { FullField, Schema, ValueEditorProps } from '../types';\nimport { getFirstOption, parseNumber } from '../utils';\n\n/**\n * Default `valueEditor` component used by {@link QueryBuilder}.\n */\nexport const ValueEditor = <F extends FullField>(allProps: ValueEditorProps<F>) => {\n  const {\n    operator,\n    value,\n    handleOnChange,\n    title,\n    className,\n    type = 'text',\n    inputType = 'text',\n    values = [],\n    listsAsArrays,\n    parseNumbers,\n    fieldData,\n    disabled,\n    separator = null,\n    testID,\n    selectorComponent: SelectorComponent = allProps.schema.controls.valueSelector,\n    ...props\n  } = allProps;\n\n  const { valueAsArray, multiValueHandler } = useValueEditor(allProps);\n\n  if (operator === 'null' || operator === 'notNull') {\n    return null;\n  }\n\n  const placeHolderText = fieldData?.placeholder ?? '';\n  const inputTypeCoerced = ['in', 'notIn'].includes(operator) ? 'text' : inputType || 'text';\n\n  if (\n    (operator === 'between' || operator === 'notBetween') &&\n    (type === 'select' || type === 'text')\n  ) {\n    const editors = ['from', 'to'].map((key, i) => {\n      if (type === 'text') {\n        return (\n          <input\n            key={key}\n            type={inputTypeCoerced}\n            placeholder={placeHolderText}\n            value={valueAsArray[i] ?? ''}\n            className={standardClassnames.valueListItem}\n            disabled={disabled}\n            onChange={e => multiValueHandler(e.target.value, i)}\n          />\n        );\n      }\n      return (\n        <SelectorComponent\n          {...props}\n          schema={allProps.schema as unknown as Schema<FullField, string>}\n          key={key}\n          className={standardClassnames.valueListItem}\n          handleOnChange={v => multiValueHandler(v, i)}\n          disabled={disabled}\n          value={valueAsArray[i] ?? getFirstOption(values)}\n          options={values}\n          listsAsArrays={listsAsArrays}\n        />\n      );\n    });\n\n    return (\n      <span data-testid={testID} className={className} title={title}>\n        {editors[0]}\n        {separator}\n        {editors[1]}\n      </span>\n    );\n  }\n\n  switch (type) {\n    case 'select':\n    case 'multiselect':\n      return (\n        <SelectorComponent\n          {...props}\n          schema={allProps.schema as unknown as Schema<FullField, string>}\n          testID={testID}\n          className={className}\n          title={title}\n          handleOnChange={handleOnChange}\n          disabled={disabled}\n          value={value}\n          options={values}\n          multiple={type === 'multiselect'}\n          listsAsArrays={listsAsArrays}\n        />\n      );\n\n    case 'textarea':\n      return (\n        <textarea\n          data-testid={testID}\n          placeholder={placeHolderText}\n          value={value}\n          title={title}\n          className={className}\n          disabled={disabled}\n          onChange={e => handleOnChange(e.target.value)}\n        />\n      );\n\n    case 'switch':\n    case 'checkbox':\n      return (\n        <input\n          data-testid={testID}\n          type=\"checkbox\"\n          className={className}\n          title={title}\n          onChange={e => handleOnChange(e.target.checked)}\n          checked={!!value}\n          disabled={disabled}\n        />\n      );\n\n    case 'radio':\n      return (\n        <span data-testid={testID} className={className} title={title}>\n          {values.map(v => (\n            <label key={v.name}>\n              <input\n                type=\"radio\"\n                value={v.name}\n                disabled={disabled}\n                checked={value === v.name}\n                onChange={e => handleOnChange(e.target.value)}\n              />\n              {v.label}\n            </label>\n          ))}\n        </span>\n      );\n  }\n\n  return (\n    <input\n      data-testid={testID}\n      type={inputTypeCoerced}\n      placeholder={placeHolderText}\n      value={value}\n      title={title}\n      className={className}\n      disabled={disabled}\n      onChange={e => handleOnChange(parseNumber(e.target.value, { parseNumbers }))}\n    />\n  );\n};\n","import * as React from 'react';\nimport { useSelectElementChangeHandler, useValueSelector } from '../hooks';\nimport type { FullOption, ValueSelectorProps } from '../types';\nimport { toOptions } from '../utils';\n\n/**\n * Default `<select>` component used by {@link QueryBuilder}.\n */\nexport const ValueSelector = <Opt extends FullOption = FullOption>(\n  props: ValueSelectorProps<Opt>\n) => {\n  const { onChange, val } = useValueSelector(props);\n\n  const selectElementChangeHandler = useSelectElementChangeHandler({\n    multiple: props.multiple,\n    onChange,\n  });\n\n  return (\n    <select\n      data-testid={props.testID}\n      className={props.className}\n      value={val}\n      title={props.title}\n      disabled={props.disabled}\n      multiple={!!props.multiple}\n      onChange={selectElementChangeHandler}>\n      {toOptions(props.options)}\n    </select>\n  );\n};\n","import type { Controls, FullField } from '../types';\nimport { ActionElement } from './ActionElement';\nimport { DragHandle } from './DragHandle';\nimport { InlineCombinator } from './InlineCombinator';\nimport { NotToggle } from './NotToggle';\nimport { Rule } from './Rule';\nimport { RuleGroup } from './RuleGroup';\nimport { ShiftActions } from './ShiftActions';\nimport { ValueEditor } from './ValueEditor';\nimport { ValueSelector } from './ValueSelector';\n\n/**\n * Default components used by {@link QueryBuilder}.\n */\nexport const defaultControlElements = {\n  actionElement: ActionElement,\n  addGroupAction: ActionElement,\n  addRuleAction: ActionElement,\n  cloneGroupAction: ActionElement,\n  cloneRuleAction: ActionElement,\n  combinatorSelector: ValueSelector,\n  dragHandle: DragHandle,\n  fieldSelector: ValueSelector,\n  inlineCombinator: InlineCombinator,\n  lockGroupAction: ActionElement,\n  lockRuleAction: ActionElement,\n  notToggle: NotToggle,\n  operatorSelector: ValueSelector,\n  removeGroupAction: ActionElement,\n  removeRuleAction: ActionElement,\n  rule: Rule,\n  ruleGroup: RuleGroup,\n  shiftActions: ShiftActions,\n  valueEditor: ValueEditor,\n  valueSelector: ValueSelector,\n  valueSourceSelector: ValueSelector,\n} satisfies Controls<FullField, string>;\n"],"mappings":"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","names":["src_exports","__export","ActionElement","DragHandle","InlineCombinator","LogType","NotToggle","QueryBuilder","QueryBuilderContext","QueryBuilderStateContext","QueryBuilderStateProvider","Rule","RuleComponents","RuleGroup","RuleGroupBodyComponents","RuleGroupHeaderComponents","ShiftActions","TestID","ValueEditor","ValueSelector","add","convertFromIC","convertQuery","convertToIC","defaultCELValueProcessor","defaultCombinators","defaultCombinatorsExtended","defaultControlClassnames","defaultControlElements","defaultJoinChar","defaultMongoDBValueProcessor","defaultOperatorNegationMap","defaultOperators","defaultPlaceholderFieldGroupLabel","defaultPlaceholderFieldLabel","defaultPlaceholderFieldName","defaultPlaceholderOperatorGroupLabel","defaultPlaceholderOperatorLabel","defaultPlaceholderOperatorName","defaultRuleProcessorCEL","defaultRuleProcessorElasticSearch","defaultRuleProcessorJSONata","defaultRuleProcessorJsonLogic","defaultRuleProcessorMongoDB","defaultRuleProcessorParameterized","defaultRuleProcessorSQL","defaultRuleProcessorSpEL","defaultSpELValueProcessor","defaultTranslations","defaultValidator","defaultValueProcessor","defaultValueProcessorByRule","defaultValueProcessorCELByRule","defaultValueProcessorMongoDBByRule","defaultValueProcessorSpELByRule","filterFieldsByComparator","findPath","formatQuery","generateAccessibleDescription","generateID","getCommonAncestorPath","getCompatContextProvider","getFirstOption","getOption","getParentPath","getQuerySelectorById","getValidationClassNames","getValueSourcesUtil","groupInvalidReasons","isAncestor","isFlexibleOptionGroupArray","isFullOptionGroupArray","isOptionGroupArray","isPojo","isRuleGroup","isRuleGroupType","isRuleGroupTypeIC","isRuleOrGroupValid","isValidationResult","joinWith","jsonLogicAdditionalOperators","mergeClassnames","mergeTranslations","messages","move","nullFreeArray","numericRegex","objectEntries","objectKeys","parseNumber","pathIsDisabled","pathsAreEqual","prepareRule","prepareRuleGroup","prepareRuleOrGroup","queryBuilderStore","regenerateID","regenerateIDs","remove","rootPath","splitBy","standardClassnames","toArray","toFlatOptionArray","toFullOption","toFullOptionList","toFullOptionMap","toOptions","transformQuery","trimIfString","uniqByIdentifier","uniqByName","uniqOptGroups","uniqOptList","update","useControlledOrUncontrolled","useDeprecatedProps","useMergedContext","usePreferAnyProp","usePreferProp","usePrevious","useQueryBuilderSchema","useQueryBuilderSelector","useQueryBuilderSetup","useReactDndWarning","useRule","useRuleGroup","useSelectElementChangeHandler","useStopEventPropagation","useValueEditor","useValueSelector","__toCommonJS","React","ActionElement","props","e","React","import_react","DragHandle","props","dragRef","React","placeholderName","placeholderLabel","defaultPlaceholderFieldName","defaultPlaceholderFieldLabel","defaultPlaceholderFieldGroupLabel","defaultPlaceholderOperatorName","defaultPlaceholderOperatorLabel","defaultPlaceholderOperatorGroupLabel","defaultJoinChar","defaultTranslations","defaultOperators","defaultOperatorNegationMap","defaultCombinators","defaultCombinatorsExtended","standardClassnames","defaultControlClassnames","groupInvalidReasons","TestID","LogType","InlineCombinator","allProps","CombinatorSelectorComponent","props","standardClassnames","TestID","React","NotToggle","props","e","React","import_react_redux","messages","import_react_redux","import_toolkit","React","import_react_redux","import_toolkit","initialState","queriesSlice","state","qbId","query","import_toolkit","initialState","messages","warningsSlice","state","payload","preloadedState","queriesSlice","warningsSlice","queryBuilderStore","getDefaultMiddleware","QueryBuilderStateContext","useQueryBuilderSelector","getQuerySelectorById","qbId","state","_RQB_INTERNAL_dispatchThunk","payload","onQueryChange","dispatch","queriesSlice","useRQB_INTERNAL_QueryBuilderDispatch","QueryBuilderStateContext","useRQB_INTERNAL_QueryBuilderStore","_SYNC_rqbWarn","warningsSlice","import_react","usePrevious","value","ref","current","useControlledOrUncontrolled","params","dispatch","useRQB_INTERNAL_QueryBuilderDispatch","defaultQuery","queryProp","prevQueryPresent","usePrevious","useDeprecatedProps","type","logWarning","otherParams","dispatch","useRQB_INTERNAL_QueryBuilderDispatch","import_react","splitBy","str","splitChar","defaultJoinChar","c","prev","curr","idx","joinWith","strArr","joinChar","trimIfString","val","toArray","v","s","nullFreeArray","arr","el","import_numeric_quantity","numericRegex","numericQuantityRegex","isPojo","obj","isRuleGroup","rg","isPojo","isRuleGroupType","isRuleGroupTypeIC","processRuleOrStringOrRuleGroupIC","r","isRuleGroup","generateRuleGroupICWithConsistentCombinators","rg","returnArray","push","startIndex","i","j","convertFromIC","isRuleGroupType","processedRG","rulesAsMixedList","combinator","rules","convertToIC","isRuleGroupTypeIC","queryWithoutCombinator","length","idx","convertQuery","query","defaultValidator","query","result","validateRule","_rule","validateGroup","rg","reasons","groupInvalidReasons","isRuleGroupType","invalidICs","i","defaultCombinators","c","r","isRuleGroup","import_immer","isOptionWithName","opt","isPojo","isOptionWithValue","toFullOption","baseProperties","draft","idObj","needsUpdating","toFullOptionList","optList","isFlexibleOptionGroupArray","optGroup","idx","toFullOptionMap","optMap","k","v","uniqByName","originalArray","uniqByIdentifier","names","newArray","el","uniqOptGroups","labels","optionsForThisGroup","opt","toFullOption","uniqOptList","isFlexibleOptionGroupArray","o","isOptionGroupArray","arr","isPojo","isFlexibleOptionGroupArray","isFullOptionGroupArray","getOption","name","og","op","getFirstOption","toFlatOptionArray","uniqByIdentifier","filterByComparator","field","operator","fieldToCompare","fullField","toFullOption","fullFieldToCompare","filterFieldsByComparator","fields","filterOutSameField","f","isFlexibleOptionGroupArray","og","import_numeric_quantity","parseNumber","v","pno","n","mapSQLOperator","op","mongoOperators","celCombinatorMap","jsonLogicAdditionalOperators","a","b","numerifyValues","rg","r","isRuleGroup","value","parseNumber","isValidValue","v","shouldRenderAsNumber","parseNumbers","numericRegex","isValueProcessorLegacy","vp","quoteFieldNamesWithArray","quoteFieldNamesWith","nullOrUndefinedOrEmpty","shouldNegate","op","escapeDoubleQuotes","v","escapeQuotes","defaultRuleProcessorCEL","field","operator","value","valueSource","parseNumbers","valueIsField","operatorTL","useBareValue","shouldRenderAsNumber","trimIfString","negate","valueAsArray","toArray","val","nullOrUndefinedOrEmpty","first","second","firstNum","parseNumber","secondNum","firstValue","secondValue","tempNum","escapeDoubleQuotes","v","defaultRuleProcessorMongoDB","field","operator","value","valueSource","parseNumbers","valueIsField","useBareValue","shouldRenderAsNumber","trimIfString","mongoOperator","mongoOperators","valueAsArray","toArray","val","isValidValue","first","second","firstNum","parseNumber","secondNum","firstValue","secondValue","shouldNegate","op","wrapInNegation","clause","negate","escapeSingleQuotes","v","escapeQuotes","defaultRuleProcessorSpEL","field","operator","value","valueSource","parseNumbers","valueIsField","operatorTL","useBareValue","shouldRenderAsNumber","trimIfString","valueTL","valueAsArray","toArray","val","nullOrUndefinedOrEmpty","first","second","firstNum","parseNumber","secondNum","firstValue","secondValue","tempNum","escapeStringValueQuotes","v","quoteChar","escapeQuotes","defaultValueProcessorByRule","operator","value","valueSource","parseNumbers","quoteFieldNamesWith","quoteValuesWith","valueIsField","qfnwPre","qfnwPost","quoteFieldNamesWithArray","operatorLowerCase","escapeValue","wrapAndEscape","wrapFieldName","f","valueAsArray","toArray","shouldRenderAsNumber","trimIfString","isValidValue","first","second","rangeOperatorMap","negateIfNotOp","op","elasticSearchRule","escapeSQ","s","textFunctionMap","getTextScript","f","o","v","script","valueRenderer","parseNumbers","shouldRenderAsNumber","parseNumber","defaultRuleProcessorElasticSearch","field","operator","value","valueSource","toArray","fieldForScript","operatorForScript","valueForScript","valueAsArray","arr","isValidValue","first","second","firstNum","secondNum","tempNum","shouldNegate","op","quote","v","escapeQuotes","negate","clause","escapeStringRegex","s","defaultRuleProcessorJSONata","field","operator","value","valueSource","parseNumbers","quoteFieldNamesWith","valueIsField","useBareValue","shouldRenderAsNumber","qPre","qPost","quoteFieldNamesWithArray","qfn","f","trimIfString","valueAsArray","toArray","val","nullOrUndefinedOrEmpty","first","second","firstNum","parseNumber","secondNum","firstValue","secondValue","tempNum","renderAsNumbers","expression","convertOperator","op","negateIfNotOp","jsonRule","defaultRuleProcessorJsonLogic","field","operator","value","valueSource","parseNumbers","valueIsField","fieldObject","fieldOrNumberRenderer","v","shouldRenderAsNumber","parseNumber","valueAsArray","toArray","isValidValue","first","second","firstNum","secondNum","tempNum","defaultRuleProcessorParameterized","rule","opts","meta","fieldData","format","getNextNamedParam","parseNumbers","paramPrefix","paramsKeepPrefix","numberedParams","quoteFieldNamesWith","valueProcessor","defaultValueProcessorByRule","processedParams","parameterized","params","paramsNamed","finalize","sql","value","sqlOperator","mapSQLOperator","sqlOperatorLowerCase","splitValue","toArray","v","shouldRenderAsNumber","parseNumber","_v","i","inParams","thisParamName","valueAsArray","first","second","firstParamName","secondParamName","paramValue","paramName","defaultRuleProcessorSQL","rule","opts","parseNumbers","escapeQuotes","quoteFieldNamesWith","quoteValuesWith","valueProcessor","defaultValueProcessorByRule","value","operator","mapSQLOperator","operatorLowerCase","qPre","qPost","quoteFieldNamesWithArray","isValidationResult","vr","isPojo","isRuleOrGroupValid","rg","validationResult","validator","isRuleGroup","formatQuery","ruleGroup","options","format","valueProcessorInternal","defaultValueProcessorByRule","ruleProcessorInternal","quoteFieldNamesWith","validator","fields","validationMap","fallbackExpression","paramPrefix","paramsKeepPrefix","numberedParams","parseNumbers","placeholderFieldName","defaultPlaceholderFieldName","placeholderOperatorName","defaultPlaceholderOperatorName","quoteValuesWith","defaultRuleProcessorMongoDB","defaultRuleProcessorParameterized","defaultRuleProcessorCEL","defaultRuleProcessorSpEL","defaultRuleProcessorJsonLogic","defaultRuleProcessorElasticSearch","defaultRuleProcessorJSONata","valueProcessor","ruleProcessor","r","opts","isValueProcessorLegacy","quoteFieldNamesWithArray","toFullOptionList","rg","numerifyValues","key","value","validationResult","validatorMap","uniqueFields","toFlatOptionArray","f","validateRule","rule","fieldValidator","fieldArr","field","processRuleGroup","outermostOrLonelyInGroup","isRuleOrGroupValid","processedRules","isRuleGroup","escapeQuotes","fieldData","getOption","defaultRuleProcessorSQL","isRuleGroupType","parameterized","params","paramsNamed","fieldParams","getNextNamedParam","nextNamedParam","processRule","fieldParamNames","s","processedRule","isPojo","sql","customParams","p","outermost","combinator","hasChildRules","expressions","processedRuleGroup","rgStandard","convertFromIC","processedQuery","expression","celCombinatorMap","prefix","suffix","query","_outermost","jsonRuleGroup","internalValueProcessors","defaultValueProcessorByRule","defaultRuleProcessorMongoDB","defaultRuleProcessorCEL","defaultRuleProcessorSpEL","generateValueProcessor","format","field","operator","value","valueSource","defaultValueProcessor","defaultMongoDBValueProcessor","defaultCELValueProcessor","defaultSpELValueProcessor","defaultValueProcessorCELByRule","defaultRuleProcessorCEL","defaultValueProcessorMongoDBByRule","defaultRuleProcessorMongoDB","defaultValueProcessorSpELByRule","defaultRuleProcessorSpEL","findPath","path","query","target","level","isRuleGroup","t","getParentPath","pathsAreEqual","path1","path2","val","idx","isAncestor","maybeAncestor","getCommonAncestorPath","commonAncestorPath","parentPath1","parentPath2","i","pathIsDisabled","disabled","isPojo","generateAccessibleDescription","params","pathsAreEqual","cryptoModule","generateID","s","position19vals","container","id","i","React","import_react","import_clsx","mergeClassnames","args","joinClassnamesByName","name","clsx","c","import_immer","objectKeys","objectEntries","defaultTranslationsBase","mergeTranslations","args","base","otherTranslations","draft","translations","objectKeys","t","getCompatContextProvider","gccpProps","key","compatClassnames","compatElements","compatTranslations","props","rqbContext","QueryBuilderContext","classnamesObject","mergeClassnames","newTranslations","mergeTranslations","newContextProps","getValidationClassNames","validationResult","valid","standardClassnames","defaultValueSourcesArray","dummyFD","getValueSourcesUtil","fieldData","operator","getValueSources","fd","toFullOption","vals","import_immer","prepareRule","rule","idGenerator","generateID","draft","prepareRuleGroup","queryObject","r","isRuleGroup","prepareRuleOrGroup","rg","import_immer","regenerateID","rule","idGenerator","generateID","regenerateIDs","ruleOrGroup","isPojo","isRuleGroup","isRuleGroupType","rules","r","add","query","ruleOrGroup","parentPath","combinators","defaultCombinators","combinatorPreceding","idGenerator","generateID","draft","parent","findPath","isRuleGroup","isRuleGroupType","prevCombinator","getFirstOption","prepareRuleOrGroup","update","prop","value","path","resetOnFieldChange","resetOnOperatorChange","getRuleDefaultOperator","getValueSources","getRuleDefaultValue","parentRules","getParentPath","isGroup","resetValueSource","resetValue","defaultValueSource","remove","index","idxStartDelete","getNextPath","currentPath","newPathOrShiftDirection","ic","isRuleGroupTypeIC","pathsAreEqual","evaluationPath","entityAtTarget","entityToEvaluate","move","oldPath","newPath","clone","nextPath","ruleOrGroupOriginal","regenerateIDs","regenerateID","independentCombinators","parentOfRuleToRemove","ruleToRemoveIndex","oldPrevCombinator","oldNextCombinator","deleteLength","newNewPath","commonAncestorPath","getCommonAncestorPath","newNewParentPath","parentToInsertInto","newIndex","insertRuleOrGroup","args","newNextCombinator","newPrevCombinator","React","toOptions","arr","isOptionGroupArray","og","opt","import_immer","remapProperties","obj","propertyMap","deleteRemappedProperties","draft","k","v","transformQuery","query","options","ruleProcessor","r","ruleGroupProcessor","rg","combinatorMap","operatorMap","omitPath","processGroup","isRuleGroupType","idx","pathObject","isRuleGroup","import_react","preferPropDefaultTrue","prop","context","preferPropDefaultFalse","preferProp","def","usePreferProp","usePreferAnyProp","nullComp","nullFwdComp","useMergedContext","props","rqbContext","QueryBuilderContext","enableMountQueryChange","usePreferProp","enableDragAndDrop","debugMode","controlClassnames","mergeClassnames","defaultControlClassnames","controlElements","contextControlElements","propsControlElements","defaultControlElements","translations","mergeTranslations","defaultTranslations","_controlClassnames","_controlElements","_debugMode","_enableDragAndDrop","_enableMountQueryChange","_translations","otherContext","import_clsx","import_react","defaultValidationResult","defaultValidationMap","defaultGetValueEditorSeparator","defaultGetRuleClassname","defaultGetRuleGroupClassname","defaultOnAddRule","r","defaultOnAddGroup","rg","defaultOnRemove","defaultOnLog","params","useQueryBuilderSchema","props","setup","queryProp","defaultQueryProp","getValueEditorSeparator","getRuleClassname","getRuleGroupClassname","onAddRule","onAddGroup","onRemove","onQueryChange","showCombinatorsBetweenRulesProp","showNotToggleProp","showShiftActionsProp","showCloneButtonsProp","showLockButtonsProp","resetOnFieldChangeProp","resetOnOperatorChangeProp","autoSelectFieldProp","autoSelectOperatorProp","addRuleToNewGroupsProp","listsAsArraysProp","parseNumbers","disabled","validator","onLog","idGenerator","accessibleDescriptionGenerator","generateAccessibleDescription","qbId","rqbContext","fields","fieldMap","combinators","getOperatorsMain","getRuleDefaultOperator","getValueEditorTypeMain","getValueSourcesMain","getValuesMain","getRuleDefaultValue","getInputTypeMain","createRule","createRuleGroup","controlClassnames","controls","debugMode","enableDragAndDrop","enableMountQueryChange","translations","showCombinatorsBetweenRules","showNotToggle","showShiftActions","showCloneButtons","showLockButtons","resetOnFieldChange","resetOnOperatorChange","autoSelectField","autoSelectOperator","addRuleToNewGroups","listsAsArrays","useControlledOrUncontrolled","queryBuilderStore","useRQB_INTERNAL_QueryBuilderStore","queryBuilderDispatch","useRQB_INTERNAL_QueryBuilderDispatch","querySelector","getQuerySelectorById","storeQuery","useQueryBuilderSelector","getQuery","fallbackQuery","candidateQuery","rootGroup","prepareRuleGroup","_RQB_INTERNAL_dispatchThunk","independentCombinators","isRuleGroupTypeIC","invalidIC","useDeprecatedProps","hasRunMountQueryChange","dispatchQuery","newQuery","disabledPaths","queryDisabled","rootGroupDisabled","p","onRuleAdd","rule","parentPath","context","queryLocal","pathIsDisabled","LogType","newRule","add","onGroupAdd","ruleGroup","newGroup","onPropChange","prop","value","path","update","onRuleOrGroupRemove","ruleOrGroup","findPath","remove","moveRule","oldPath","newPath","clone","move","dndEnabledAttr","inlineCombinatorsAttr","combinatorPropObject","isRuleGroupType","validationResult","validationMap","schema","actions","wrapperClassName","standardClassnames","import_react","getFirstOptionsFrom","opts","r","listsAsArrays","firstOption","getFirstOption","valueAsArray","joinWith","v","useQueryBuilderSetup","props","qbId","generateID","fieldsPropOriginal","baseField","operatorsProp","baseOperator","combinatorsProp","defaultCombinators","baseCombinator","translationsProp","enableMountQueryChangeProp","controlClassnamesProp","controlElementsProp","getDefaultField","getDefaultOperator","getDefaultValue","getOperators","getValueEditorType","getValueSources","getInputType","getValues","autoSelectField","autoSelectOperator","addRuleToNewGroups","enableDragAndDropProp","debugModeProp","idGenerator","operators","defaultOperators","rqbContext","useMergedContext","translations","defaultField","fieldsProp","fields","flds","toFullOptionList","objectKeys","toFullOptionMap","fld","a","b","isFlexibleOptionGroupArray","uniqOptGroups","uniqByIdentifier","fieldMap","fp","fm","f","opt","toFullOption","combinators","defaultOperator","getOperatorsMain","field","fieldData","opsFinal","ops","uniqOptList","getRuleDefaultOperator","getValueEditorTypeMain","operator","getValueSourcesMain","getValueSourcesUtil","getValuesMain","getRuleDefaultValue","value","values","filteredFields","filterFieldsByComparator","editorType","getInputTypeMain","inputType","createRule","fo","df","valueSource","newRule","createRuleGroup","independentCombinators","useReactDndWarning","enableDragAndDrop","dndRefs","import_clsx","import_react","useRule","props","id","path","ruleProp","schema","moveRule","onPropChange","onRuleRemove","disabledProp","parentDisabled","shiftUpDisabled","shiftDownDisabled","fieldProp","operatorProp","valueProp","valueSourceProp","dragMonitorId","dropMonitorId","dndRef","dragRef","isDragging","isOver","classNamesProp","fields","fieldMap","getInputType","getOperators","getValueEditorType","getValueEditorSeparator","getValueSources","getValues","validationMap","enableDragAndDrop","getRuleClassname","useDeprecatedProps","useReactDndWarning","disabled","rule","classNames","standardClassnames","generateOnChangeHandler","prop","value","_context","cloneRule","_event","newPath","getParentPath","toggleLockRule","removeRule","shiftRuleUp","event","shiftRuleDown","fieldData","inputType","operators","operatorObject","getOption","arity","hideValueControls","valueSources","valueEditorType","valueEditorSeparator","values","filterFieldsByComparator","valueSourceOptions","vs","validationResult","validationClassName","getValidationClassNames","fieldBasedClassName","operatorBasedClassName","outerClassName","import_clsx","import_react","useRuleGroup","props","id","path","ruleGroupProp","qbId","accessibleDescriptionGenerator","classNamesProp","combinators","createRule","createRuleGroup","disabledPaths","independentCombinators","validationMap","enableDragAndDrop","getRuleGroupClassname","onGroupAdd","onGroupRemove","onPropChange","onRuleAdd","moveRule","disabledProp","parentDisabled","shiftUpDisabled","shiftDownDisabled","combinatorProp","rulesProp","notProp","dragMonitorId","dropMonitorId","previewRef","dragRef","dropRef","isDragging","isOver","useDeprecatedProps","useReactDndWarning","disabled","combinator","isRuleGroupType","getFirstOption","ruleGroup","classNames","standardClassnames","onCombinatorChange","value","_context","onIndependentCombinatorChange","index","onNotToggleChange","checked","addRule","_event","context","newRule","addGroup","newGroup","cloneGroup","newPath","getParentPath","shiftGroupUp","event","shiftGroupDown","toggleLockGroup","removeGroup","validationResult","validationClassName","getValidationClassNames","combinatorBasedClassName","getOption","ruleGroupClassname","outerClassName","pathsMemo","paths","i","thisPath","p","pathsAreEqual","accessibleDescription","import_react","useSelectElementChangeHandler","params","multiple","onChange","e","o","import_react","useStopEventPropagation","method","event","context","import_immer","import_react","useValueEditor","props","handleOnChange","inputType","operator","value","listsAsArrays","parseNumbers","values","type","skipHook","toArray","valueAsArray","multiValueHandler","v","i","val","va","parseNumber","getFirstOption","joinWith","import_react","useValueSelector","props","handleOnChange","listsAsArrays","multiple","value","onChange","v","valueAsArray","toArray","joinWith","val","import_react","QueryBuilderContext","rootPath","QueryBuilderStateProvider","props","QueryBuilderStateContext","queryBuilderStore","QueryBuilderInternal","allProps","setup","qb","useQueryBuilderSchema","RuleGroupControlElement","QueryBuilderContext","QueryBuilder","useQueryBuilderSetup","React","Rule","props","r","useRule","cloneRule","useStopEventPropagation","toggleLockRule","removeRule","shiftRuleUp","shiftRuleDown","TestID","RuleComponents","ShiftActionsControlElement","DragHandleControlElement","FieldSelectorControlElement","OperatorSelectorControlElement","ValueSourceSelectorControlElement","ValueEditorControlElement","CloneRuleActionControlElement","LockRuleActionControlElement","RemoveRuleActionControlElement","combinator","React","import_react","RuleGroup","props","rg","useRuleGroup","addRule","useStopEventPropagation","addGroup","cloneGroup","toggleLockGroup","removeGroup","shiftGroupUp","shiftGroupDown","TestID","RuleGroupHeaderComponents","RuleGroupBodyComponents","ShiftActionsControlElement","DragHandleControlElement","CombinatorSelectorControlElement","NotToggleControlElement","AddRuleActionControlElement","AddGroupActionControlElement","CloneGroupActionControlElement","LockGroupActionControlElement","RemoveGroupActionControlElement","InlineCombinatorControlElement","RuleGroupControlElement","RuleControlElement","r","idx","ruleArrayLength","thisPathMemo","thisPath","thisPathDisabled","shiftUpDisabled","pathsAreEqual","shiftDownDisabled","key","showCombinatorBetweenRules","val","isRuleGroup","isRuleGroupType","React","ShiftActions","props","React","ValueEditor","allProps","operator","value","handleOnChange","title","className","type","inputType","values","listsAsArrays","parseNumbers","fieldData","disabled","separator","testID","SelectorComponent","props","valueAsArray","multiValueHandler","useValueEditor","placeHolderText","inputTypeCoerced","editors","key","i","standardClassnames","e","v","getFirstOption","parseNumber","React","ValueSelector","props","onChange","val","useValueSelector","selectElementChangeHandler","useSelectElementChangeHandler","toOptions","defaultControlElements","ActionElement","ValueSelector","DragHandle","InlineCombinator","NotToggle","Rule","RuleGroup","ShiftActions","ValueEditor"]}